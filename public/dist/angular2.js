"format register";
System.register("npm:angular2@2.0.0-alpha.28/src/facade/lang", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var _global = (typeof window === 'undefined' ? global : window);
  exports.global = _global;
  exports.Type = Function;
  var BaseException = (function(_super) {
    __extends(BaseException, _super);
    function BaseException(message) {
      _super.call(this, message);
      this.message = message;
      this.stack = (new Error(message)).stack;
    }
    BaseException.prototype.toString = function() {
      return this.message;
    };
    return BaseException;
  })(Error);
  exports.BaseException = BaseException;
  exports.Math = _global.Math;
  exports.Date = _global.Date;
  var assertionsEnabled_ = typeof _global['assert'] !== 'undefined';
  function assertionsEnabled() {
    return assertionsEnabled_;
  }
  exports.assertionsEnabled = assertionsEnabled;
  _global.assert = function assert(condition) {
    if (assertionsEnabled_) {
      _global['assert'].call(condition);
    }
  };
  function CONST_EXPR(expr) {
    return expr;
  }
  exports.CONST_EXPR = CONST_EXPR;
  function CONST() {
    return function(target) {
      return target;
    };
  }
  exports.CONST = CONST;
  function ABSTRACT() {
    return function(t) {
      return t;
    };
  }
  exports.ABSTRACT = ABSTRACT;
  function IMPLEMENTS(_) {
    return function(t) {
      return t;
    };
  }
  exports.IMPLEMENTS = IMPLEMENTS;
  function isPresent(obj) {
    return obj !== undefined && obj !== null;
  }
  exports.isPresent = isPresent;
  function isBlank(obj) {
    return obj === undefined || obj === null;
  }
  exports.isBlank = isBlank;
  function isString(obj) {
    return typeof obj === "string";
  }
  exports.isString = isString;
  function isFunction(obj) {
    return typeof obj === "function";
  }
  exports.isFunction = isFunction;
  function isType(obj) {
    return isFunction(obj);
  }
  exports.isType = isType;
  function isStringMap(obj) {
    return typeof obj === 'object' && obj !== null;
  }
  exports.isStringMap = isStringMap;
  function isPromise(obj) {
    return obj instanceof _global.Promise;
  }
  exports.isPromise = isPromise;
  function isArray(obj) {
    return Array.isArray(obj);
  }
  exports.isArray = isArray;
  function stringify(token) {
    if (typeof token === 'string') {
      return token;
    }
    if (token === undefined || token === null) {
      return '' + token;
    }
    if (token.name) {
      return token.name;
    }
    return token.toString();
  }
  exports.stringify = stringify;
  var StringWrapper = (function() {
    function StringWrapper() {}
    StringWrapper.fromCharCode = function(code) {
      return String.fromCharCode(code);
    };
    StringWrapper.charCodeAt = function(s, index) {
      return s.charCodeAt(index);
    };
    StringWrapper.split = function(s, regExp) {
      return s.split(regExp);
    };
    StringWrapper.equals = function(s, s2) {
      return s === s2;
    };
    StringWrapper.replace = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.replaceAll = function(s, from, replace) {
      return s.replace(from, replace);
    };
    StringWrapper.toUpperCase = function(s) {
      return s.toUpperCase();
    };
    StringWrapper.toLowerCase = function(s) {
      return s.toLowerCase();
    };
    StringWrapper.startsWith = function(s, start) {
      return s.startsWith(start);
    };
    StringWrapper.substring = function(s, start, end) {
      if (end === void 0) {
        end = null;
      }
      return s.substring(start, end === null ? undefined : end);
    };
    StringWrapper.replaceAllMapped = function(s, from, cb) {
      return s.replace(from, function() {
        var matches = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          matches[_i - 0] = arguments[_i];
        }
        matches.splice(-2, 2);
        return cb(matches);
      });
    };
    StringWrapper.contains = function(s, substr) {
      return s.indexOf(substr) != -1;
    };
    return StringWrapper;
  })();
  exports.StringWrapper = StringWrapper;
  var StringJoiner = (function() {
    function StringJoiner(parts) {
      if (parts === void 0) {
        parts = [];
      }
      this.parts = parts;
    }
    StringJoiner.prototype.add = function(part) {
      this.parts.push(part);
    };
    StringJoiner.prototype.toString = function() {
      return this.parts.join("");
    };
    return StringJoiner;
  })();
  exports.StringJoiner = StringJoiner;
  var NumberParseError = (function(_super) {
    __extends(NumberParseError, _super);
    function NumberParseError(message) {
      _super.call(this);
      this.message = message;
    }
    NumberParseError.prototype.toString = function() {
      return this.message;
    };
    return NumberParseError;
  })(BaseException);
  exports.NumberParseError = NumberParseError;
  var NumberWrapper = (function() {
    function NumberWrapper() {}
    NumberWrapper.toFixed = function(n, fractionDigits) {
      return n.toFixed(fractionDigits);
    };
    NumberWrapper.equal = function(a, b) {
      return a === b;
    };
    NumberWrapper.parseIntAutoRadix = function(text) {
      var result = parseInt(text);
      if (isNaN(result)) {
        throw new NumberParseError("Invalid integer literal when parsing " + text);
      }
      return result;
    };
    NumberWrapper.parseInt = function(text, radix) {
      if (radix == 10) {
        if (/^(\-|\+)?[0-9]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else if (radix == 16) {
        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
          return parseInt(text, radix);
        }
      } else {
        var result = parseInt(text, radix);
        if (!isNaN(result)) {
          return result;
        }
      }
      throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
    };
    NumberWrapper.parseFloat = function(text) {
      return parseFloat(text);
    };
    Object.defineProperty(NumberWrapper, "NaN", {
      get: function() {
        return NaN;
      },
      enumerable: true,
      configurable: true
    });
    NumberWrapper.isNaN = function(value) {
      return isNaN(value);
    };
    NumberWrapper.isInteger = function(value) {
      return Number.isInteger(value);
    };
    return NumberWrapper;
  })();
  exports.NumberWrapper = NumberWrapper;
  exports.RegExp = _global.RegExp;
  var RegExpWrapper = (function() {
    function RegExpWrapper() {}
    RegExpWrapper.create = function(regExpStr, flags) {
      if (flags === void 0) {
        flags = '';
      }
      flags = flags.replace(/g/g, '');
      return new _global.RegExp(regExpStr, flags + 'g');
    };
    RegExpWrapper.firstMatch = function(regExp, input) {
      regExp.lastIndex = 0;
      return regExp.exec(input);
    };
    RegExpWrapper.test = function(regExp, input) {
      return regExp.test(input);
    };
    RegExpWrapper.matcher = function(regExp, input) {
      regExp.lastIndex = 0;
      return {
        re: regExp,
        input: input
      };
    };
    return RegExpWrapper;
  })();
  exports.RegExpWrapper = RegExpWrapper;
  var RegExpMatcherWrapper = (function() {
    function RegExpMatcherWrapper() {}
    RegExpMatcherWrapper.next = function(matcher) {
      return matcher.re.exec(matcher.input);
    };
    return RegExpMatcherWrapper;
  })();
  exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
  var FunctionWrapper = (function() {
    function FunctionWrapper() {}
    FunctionWrapper.apply = function(fn, posArgs) {
      return fn.apply(null, posArgs);
    };
    return FunctionWrapper;
  })();
  exports.FunctionWrapper = FunctionWrapper;
  function looseIdentical(a, b) {
    return a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b);
  }
  exports.looseIdentical = looseIdentical;
  function getMapKey(value) {
    return value;
  }
  exports.getMapKey = getMapKey;
  function normalizeBlank(obj) {
    return isBlank(obj) ? null : obj;
  }
  exports.normalizeBlank = normalizeBlank;
  function normalizeBool(obj) {
    return isBlank(obj) ? false : obj;
  }
  exports.normalizeBool = normalizeBool;
  function isJsObject(o) {
    return o !== null && (typeof o === "function" || typeof o === "object");
  }
  exports.isJsObject = isJsObject;
  function print(obj) {
    if (obj instanceof Error) {
      console.log(obj.stack);
    } else {
      console.log(obj);
    }
  }
  exports.print = print;
  var Json = (function() {
    function Json() {}
    Json.parse = function(s) {
      return _global.JSON.parse(s);
    };
    Json.stringify = function(data) {
      return _global.JSON.stringify(data, null, 2);
    };
    return Json;
  })();
  exports.Json = Json;
  var DateWrapper = (function() {
    function DateWrapper() {}
    DateWrapper.fromMillis = function(ms) {
      return new exports.Date(ms);
    };
    DateWrapper.toMillis = function(date) {
      return date.getTime();
    };
    DateWrapper.now = function() {
      return new exports.Date();
    };
    DateWrapper.toJson = function(date) {
      return date.toJSON();
    };
    return DateWrapper;
  })();
  exports.DateWrapper = DateWrapper;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/facade/collection", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  exports.List = lang_1.global.Array;
  exports.Map = lang_1.global.Map;
  exports.Set = lang_1.global.Set;
  exports.StringMap = lang_1.global.Object;
  var createMapFromPairs = (function() {
    try {
      if (new exports.Map([1, 2]).size === 2) {
        return function createMapFromPairs(pairs) {
          return new exports.Map(pairs);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromPairs(pairs) {
      var map = new exports.Map();
      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i];
        map.set(pair[0], pair[1]);
      }
      return map;
    };
  })();
  var createMapFromMap = (function() {
    try {
      if (new exports.Map(new exports.Map())) {
        return function createMapFromMap(m) {
          return new exports.Map(m);
        };
      }
    } catch (e) {}
    return function createMapAndPopulateFromMap(m) {
      var map = new exports.Map();
      m.forEach(function(v, k) {
        map.set(k, v);
      });
      return map;
    };
  })();
  var _clearValues = (function() {
    if ((new exports.Map()).keys().next) {
      return function _clearValues(m) {
        var keyIterator = m.keys();
        var k;
        while (!((k = keyIterator.next()).done)) {
          m.set(k.value, null);
        }
      };
    } else {
      return function _clearValuesWithForeEach(m) {
        m.forEach(function(v, k) {
          m.set(k, null);
        });
      };
    }
  })();
  var MapWrapper = (function() {
    function MapWrapper() {}
    MapWrapper.clone = function(m) {
      return createMapFromMap(m);
    };
    MapWrapper.createFromStringMap = function(stringMap) {
      var result = new exports.Map();
      for (var prop in stringMap) {
        result.set(prop, stringMap[prop]);
      }
      return result;
    };
    MapWrapper.createFromPairs = function(pairs) {
      return createMapFromPairs(pairs);
    };
    MapWrapper.forEach = function(m, fn) {
      m.forEach(fn);
    };
    MapWrapper.size = function(m) {
      return m.size;
    };
    MapWrapper.delete = function(m, k) {
      m.delete(k);
    };
    MapWrapper.clearValues = function(m) {
      _clearValues(m);
    };
    MapWrapper.iterable = function(m) {
      return m;
    };
    MapWrapper.keys = function(m) {
      return Array.from(m.keys());
    };
    MapWrapper.values = function(m) {
      return Array.from(m.values());
    };
    return MapWrapper;
  })();
  exports.MapWrapper = MapWrapper;
  var StringMapWrapper = (function() {
    function StringMapWrapper() {}
    StringMapWrapper.create = function() {
      return {};
    };
    StringMapWrapper.contains = function(map, key) {
      return map.hasOwnProperty(key);
    };
    StringMapWrapper.get = function(map, key) {
      return map.hasOwnProperty(key) ? map[key] : undefined;
    };
    StringMapWrapper.set = function(map, key, value) {
      map[key] = value;
    };
    StringMapWrapper.keys = function(map) {
      return Object.keys(map);
    };
    StringMapWrapper.isEmpty = function(map) {
      for (var prop in map) {
        return false;
      }
      return true;
    };
    StringMapWrapper.delete = function(map, key) {
      delete map[key];
    };
    StringMapWrapper.forEach = function(map, callback) {
      for (var prop in map) {
        if (map.hasOwnProperty(prop)) {
          callback(map[prop], prop);
        }
      }
    };
    StringMapWrapper.merge = function(m1, m2) {
      var m = {};
      for (var attr in m1) {
        if (m1.hasOwnProperty(attr)) {
          m[attr] = m1[attr];
        }
      }
      for (var attr in m2) {
        if (m2.hasOwnProperty(attr)) {
          m[attr] = m2[attr];
        }
      }
      return m;
    };
    StringMapWrapper.equals = function(m1, m2) {
      var k1 = Object.keys(m1);
      var k2 = Object.keys(m2);
      if (k1.length != k2.length) {
        return false;
      }
      var key;
      for (var i = 0; i < k1.length; i++) {
        key = k1[i];
        if (m1[key] !== m2[key]) {
          return false;
        }
      }
      return true;
    };
    return StringMapWrapper;
  })();
  exports.StringMapWrapper = StringMapWrapper;
  var ListWrapper = (function() {
    function ListWrapper() {}
    ListWrapper.createFixedSize = function(size) {
      return new exports.List(size);
    };
    ListWrapper.createGrowableSize = function(size) {
      return new exports.List(size);
    };
    ListWrapper.get = function(m, k) {
      return m[k];
    };
    ListWrapper.set = function(m, k, v) {
      m[k] = v;
    };
    ListWrapper.clone = function(array) {
      return array.slice(0);
    };
    ListWrapper.map = function(array, fn) {
      return array.map(fn);
    };
    ListWrapper.forEach = function(array, fn) {
      for (var i = 0; i < array.length; i++) {
        fn(array[i]);
      }
    };
    ListWrapper.first = function(array) {
      if (!array)
        return null;
      return array[0];
    };
    ListWrapper.last = function(array) {
      if (!array || array.length == 0)
        return null;
      return array[array.length - 1];
    };
    ListWrapper.find = function(list, pred) {
      for (var i = 0; i < list.length; ++i) {
        if (pred(list[i]))
          return list[i];
      }
      return null;
    };
    ListWrapper.indexOf = function(array, value, startIndex) {
      if (startIndex === void 0) {
        startIndex = 0;
      }
      return array.indexOf(value, startIndex);
    };
    ListWrapper.reduce = function(list, fn, init) {
      return list.reduce(fn, init);
    };
    ListWrapper.filter = function(array, pred) {
      return array.filter(pred);
    };
    ListWrapper.any = function(list, pred) {
      for (var i = 0; i < list.length; ++i) {
        if (pred(list[i]))
          return true;
      }
      return false;
    };
    ListWrapper.contains = function(list, el) {
      return list.indexOf(el) !== -1;
    };
    ListWrapper.reversed = function(array) {
      var a = ListWrapper.clone(array);
      return a.reverse();
    };
    ListWrapper.concat = function(a, b) {
      return a.concat(b);
    };
    ListWrapper.insert = function(list, index, value) {
      list.splice(index, 0, value);
    };
    ListWrapper.removeAt = function(list, index) {
      var res = list[index];
      list.splice(index, 1);
      return res;
    };
    ListWrapper.removeAll = function(list, items) {
      for (var i = 0; i < items.length; ++i) {
        var index = list.indexOf(items[i]);
        list.splice(index, 1);
      }
    };
    ListWrapper.removeLast = function(list) {
      return list.pop();
    };
    ListWrapper.remove = function(list, el) {
      var index = list.indexOf(el);
      if (index > -1) {
        list.splice(index, 1);
        return true;
      }
      return false;
    };
    ListWrapper.clear = function(list) {
      list.splice(0, list.length);
    };
    ListWrapper.join = function(list, s) {
      return list.join(s);
    };
    ListWrapper.isEmpty = function(list) {
      return list.length == 0;
    };
    ListWrapper.fill = function(list, value, start, end) {
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = null;
      }
      list.fill(value, start, end === null ? undefined : end);
    };
    ListWrapper.equals = function(a, b) {
      if (a.length != b.length)
        return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
          return false;
      }
      return true;
    };
    ListWrapper.slice = function(l, from, to) {
      if (from === void 0) {
        from = 0;
      }
      if (to === void 0) {
        to = null;
      }
      return l.slice(from, to === null ? undefined : to);
    };
    ListWrapper.splice = function(l, from, length) {
      return l.splice(from, length);
    };
    ListWrapper.sort = function(l, compareFn) {
      if (lang_1.isPresent(compareFn)) {
        l.sort(compareFn);
      } else {
        l.sort();
      }
    };
    ListWrapper.toString = function(l) {
      return l.toString();
    };
    return ListWrapper;
  })();
  exports.ListWrapper = ListWrapper;
  function isListLikeIterable(obj) {
    if (!lang_1.isJsObject(obj))
      return false;
    return lang_1.isArray(obj) || (!(obj instanceof exports.Map) && Symbol.iterator in obj);
  }
  exports.isListLikeIterable = isListLikeIterable;
  function iterateListLike(obj, fn) {
    if (lang_1.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        fn(obj[i]);
      }
    } else {
      var iterator = obj[Symbol.iterator]();
      var item;
      while (!((item = iterator.next()).done)) {
        fn(item.value);
      }
    }
  }
  exports.iterateListLike = iterateListLike;
  function iterableToList(ii) {
    var res = [];
    for (var _i = 0; _i < ii.length; _i++) {
      var i = ii[_i];
      res.push(i);
    }
    return res;
  }
  exports.iterableToList = iterableToList;
  var createSetFromList = (function() {
    var test = new exports.Set([1, 2, 3]);
    if (test.size === 3) {
      return function createSetFromList(lst) {
        return new exports.Set(lst);
      };
    } else {
      return function createSetAndPopulateFromList(lst) {
        var res = new exports.Set(lst);
        if (res.size !== lst.length) {
          for (var i = 0; i < lst.length; i++) {
            res.add(lst[i]);
          }
        }
        return res;
      };
    }
  })();
  var SetWrapper = (function() {
    function SetWrapper() {}
    SetWrapper.createFromList = function(lst) {
      return createSetFromList(lst);
    };
    SetWrapper.has = function(s, key) {
      return s.has(key);
    };
    return SetWrapper;
  })();
  exports.SetWrapper = SetWrapper;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/annotations_impl", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var Inject = (function() {
    function Inject(token) {
      this.token = token;
    }
    Inject.prototype.toString = function() {
      return "@Inject(" + lang_1.stringify(this.token) + ")";
    };
    Inject = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], Inject);
    return Inject;
  })();
  exports.Inject = Inject;
  var InjectPromise = (function() {
    function InjectPromise(token) {
      this.token = token;
    }
    InjectPromise.prototype.toString = function() {
      return "@InjectPromise(" + lang_1.stringify(this.token) + ")";
    };
    InjectPromise = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], InjectPromise);
    return InjectPromise;
  })();
  exports.InjectPromise = InjectPromise;
  var InjectLazy = (function() {
    function InjectLazy(token) {
      this.token = token;
    }
    InjectLazy.prototype.toString = function() {
      return "@InjectLazy(" + lang_1.stringify(this.token) + ")";
    };
    InjectLazy = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], InjectLazy);
    return InjectLazy;
  })();
  exports.InjectLazy = InjectLazy;
  var Optional = (function() {
    function Optional() {}
    Optional.prototype.toString = function() {
      return "@Optional()";
    };
    Optional = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], Optional);
    return Optional;
  })();
  exports.Optional = Optional;
  var DependencyAnnotation = (function() {
    function DependencyAnnotation() {}
    Object.defineProperty(DependencyAnnotation.prototype, "token", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    DependencyAnnotation = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], DependencyAnnotation);
    return DependencyAnnotation;
  })();
  exports.DependencyAnnotation = DependencyAnnotation;
  var Injectable = (function() {
    function Injectable() {}
    Injectable = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], Injectable);
    return Injectable;
  })();
  exports.Injectable = Injectable;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/util/decorators", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  function extractAnnotation(annotation) {
    if (lang_1.isFunction(annotation) && annotation.hasOwnProperty('annotation')) {
      annotation = annotation.annotation;
    }
    return annotation;
  }
  function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function || fnOrArray === Number || fnOrArray === Array) {
      throw new Error("Can not use native " + lang_1.stringify(fnOrArray) + " as constructor");
    }
    if (lang_1.isFunction(fnOrArray)) {
      return fnOrArray;
    } else if (fnOrArray instanceof Array) {
      var annotations = fnOrArray;
      var fn = fnOrArray[fnOrArray.length - 1];
      if (!lang_1.isFunction(fn)) {
        throw new Error("Last position of Class method array must be Function in key " + key + " was '" + lang_1.stringify(fn) + "'");
      }
      var annoLength = annotations.length - 1;
      if (annoLength != fn.length) {
        throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + lang_1.stringify(fn));
      }
      var paramsAnnotations = [];
      for (var i = 0,
          ii = annotations.length - 1; i < ii; i++) {
        var paramAnnotations = [];
        paramsAnnotations.push(paramAnnotations);
        var annotation = annotations[i];
        if (annotation instanceof Array) {
          for (var j = 0; j < annotation.length; j++) {
            paramAnnotations.push(extractAnnotation(annotation[j]));
          }
        } else if (lang_1.isFunction(annotation)) {
          paramAnnotations.push(extractAnnotation(annotation));
        } else {
          paramAnnotations.push(annotation);
        }
      }
      Reflect.defineMetadata('parameters', paramsAnnotations, fn);
      return fn;
    } else {
      throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + lang_1.stringify(fnOrArray) + "'");
    }
  }
  function Class(clsDef) {
    var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
      if (lang_1.isFunction(clsDef.extends)) {
        constructor.prototype = proto = Object.create(clsDef.extends.prototype);
      } else {
        throw new Error("Class definition 'extends' property must be a constructor function was: " + lang_1.stringify(clsDef.extends));
      }
    }
    for (var key in clsDef) {
      if (key != 'extends' && key != 'prototype' && clsDef.hasOwnProperty(key)) {
        proto[key] = applyParams(clsDef[key], key);
      }
    }
    if (this && this.annotations instanceof Array) {
      Reflect.defineMetadata('annotations', this.annotations, constructor);
    }
    return constructor;
  }
  exports.Class = Class;
  var Reflect = lang_1.global.Reflect;
  if (!(Reflect && Reflect.getMetadata)) {
    throw 'reflect-metadata shim is required when using class decorators';
  }
  function makeDecorator(annotationCls, chainFn) {
    if (chainFn === void 0) {
      chainFn = null;
    }
    function DecoratorFactory(objOrType) {
      var annotationInstance = new annotationCls(objOrType);
      if (this instanceof annotationCls) {
        return annotationInstance;
      } else {
        var chainAnnotation = lang_1.isFunction(this) && this.annotations instanceof Array ? this.annotations : [];
        chainAnnotation.push(annotationInstance);
        var TypeDecorator = function TypeDecorator(cls) {
          var annotations = Reflect.getMetadata('annotations', cls);
          annotations = annotations || [];
          annotations.push(annotationInstance);
          Reflect.defineMetadata('annotations', annotations, cls);
          return cls;
        };
        TypeDecorator.annotations = chainAnnotation;
        TypeDecorator.Class = Class;
        if (chainFn)
          chainFn(TypeDecorator);
        return TypeDecorator;
      }
    }
    DecoratorFactory.prototype = Object.create(annotationCls.prototype);
    return DecoratorFactory;
  }
  exports.makeDecorator = makeDecorator;
  function makeParamDecorator(annotationCls) {
    function ParamDecoratorFactory() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
      }
      var annotationInstance = Object.create(annotationCls.prototype);
      annotationCls.apply(annotationInstance, args);
      if (this instanceof annotationCls) {
        return annotationInstance;
      } else {
        ParamDecorator.annotation = annotationInstance;
        return ParamDecorator;
      }
      function ParamDecorator(cls, unusedKey, index) {
        var parameters = Reflect.getMetadata('parameters', cls);
        parameters = parameters || [];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        parameters[index] = parameters[index] || [];
        var annotationsForParam = parameters[index];
        annotationsForParam.push(annotationInstance);
        Reflect.defineMetadata('parameters', parameters, cls);
        return cls;
      }
    }
    ParamDecoratorFactory.prototype = Object.create(annotationCls.prototype);
    return ParamDecoratorFactory;
  }
  exports.makeParamDecorator = makeParamDecorator;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/reflection/types", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/reflection/reflection_capabilities", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var ReflectionCapabilities = (function() {
    function ReflectionCapabilities(reflect) {
      this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
    }
    ReflectionCapabilities.prototype.factory = function(t) {
      switch (t.length) {
        case 0:
          return function() {
            return new t();
          };
        case 1:
          return function(a1) {
            return new t(a1);
          };
        case 2:
          return function(a1, a2) {
            return new t(a1, a2);
          };
        case 3:
          return function(a1, a2, a3) {
            return new t(a1, a2, a3);
          };
        case 4:
          return function(a1, a2, a3, a4) {
            return new t(a1, a2, a3, a4);
          };
        case 5:
          return function(a1, a2, a3, a4, a5) {
            return new t(a1, a2, a3, a4, a5);
          };
        case 6:
          return function(a1, a2, a3, a4, a5, a6) {
            return new t(a1, a2, a3, a4, a5, a6);
          };
        case 7:
          return function(a1, a2, a3, a4, a5, a6, a7) {
            return new t(a1, a2, a3, a4, a5, a6, a7);
          };
        case 8:
          return function(a1, a2, a3, a4, a5, a6, a7, a8) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8);
          };
        case 9:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
          };
        case 10:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
          };
        case 11:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
          };
        case 12:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
          };
        case 13:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
          };
        case 14:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
          };
        case 15:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
          };
        case 16:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
          };
        case 17:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
          };
        case 18:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
          };
        case 19:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
          };
        case 20:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) {
            return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
          };
      }
      ;
      throw new Error("Cannot create a factory for '" + lang_1.stringify(t) + "' because its constructor has more than 20 arguments");
    };
    ReflectionCapabilities.prototype._zipTypesAndAnnotaions = function(paramTypes, paramAnnotations) {
      var result;
      if (typeof paramTypes === 'undefined') {
        result = collection_1.ListWrapper.createFixedSize(paramAnnotations.length);
      } else {
        result = collection_1.ListWrapper.createFixedSize(paramTypes.length);
      }
      for (var i = 0; i < result.length; i++) {
        if (typeof paramTypes === 'undefined') {
          result[i] = [];
        } else if (paramTypes[i] != Object) {
          result[i] = [paramTypes[i]];
        } else {
          result[i] = [];
        }
        if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
          result[i] = result[i].concat(paramAnnotations[i]);
        }
      }
      return result;
    };
    ReflectionCapabilities.prototype.parameters = function(typeOfFunc) {
      if (lang_1.isPresent(typeOfFunc.parameters)) {
        return typeOfFunc.parameters;
      }
      if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
        var paramAnnotations = this._reflect.getMetadata('parameters', typeOfFunc);
        var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOfFunc);
        if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
          return this._zipTypesAndAnnotaions(paramTypes, paramAnnotations);
        }
      }
      return collection_1.ListWrapper.createFixedSize(typeOfFunc.length);
    };
    ReflectionCapabilities.prototype.annotations = function(typeOfFunc) {
      if (lang_1.isPresent(typeOfFunc.annotations)) {
        var annotations = typeOfFunc.annotations;
        if (lang_1.isFunction(annotations) && annotations.annotations) {
          annotations = annotations.annotations;
        }
        return annotations;
      }
      if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
        var annotations = this._reflect.getMetadata('annotations', typeOfFunc);
        if (lang_1.isPresent(annotations))
          return annotations;
      }
      return [];
    };
    ReflectionCapabilities.prototype.interfaces = function(type) {
      throw new lang_1.BaseException("JavaScript does not support interfaces");
    };
    ReflectionCapabilities.prototype.getter = function(name) {
      return new Function('o', 'return o.' + name + ';');
    };
    ReflectionCapabilities.prototype.setter = function(name) {
      return new Function('o', 'v', 'return o.' + name + ' = v;');
    };
    ReflectionCapabilities.prototype.method = function(name) {
      var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
      return new Function('o', 'args', functionBody);
    };
    return ReflectionCapabilities;
  })();
  exports.ReflectionCapabilities = ReflectionCapabilities;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/locals", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var Locals = (function() {
    function Locals(parent, current) {
      this.parent = parent;
      this.current = current;
    }
    Locals.prototype.contains = function(name) {
      if (this.current.has(name)) {
        return true;
      }
      if (lang_1.isPresent(this.parent)) {
        return this.parent.contains(name);
      }
      return false;
    };
    Locals.prototype.get = function(name) {
      if (this.current.has(name)) {
        return this.current.get(name);
      }
      if (lang_1.isPresent(this.parent)) {
        return this.parent.get(name);
      }
      throw new lang_1.BaseException("Cannot find '" + name + "'");
    };
    Locals.prototype.set = function(name, value) {
      if (this.current.has(name)) {
        this.current.set(name, value);
      } else {
        throw new lang_1.BaseException("Setting of new keys post-construction is not supported. Key: " + name + ".");
      }
    };
    Locals.prototype.clearValues = function() {
      collection_1.MapWrapper.clearValues(this.current);
    };
    return Locals;
  })();
  exports.Locals = Locals;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/exceptions", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var ExpressionChangedAfterItHasBeenChecked = (function(_super) {
    __extends(ExpressionChangedAfterItHasBeenChecked, _super);
    function ExpressionChangedAfterItHasBeenChecked(proto, change) {
      _super.call(this);
      this.message = ("Expression '" + proto.expressionAsString + "' has changed after it was checked. ") + ("Previous value: '" + change.previousValue + "'. Current value: '" + change.currentValue + "'");
    }
    ExpressionChangedAfterItHasBeenChecked.prototype.toString = function() {
      return this.message;
    };
    return ExpressionChangedAfterItHasBeenChecked;
  })(lang_1.BaseException);
  exports.ExpressionChangedAfterItHasBeenChecked = ExpressionChangedAfterItHasBeenChecked;
  var ChangeDetectionError = (function(_super) {
    __extends(ChangeDetectionError, _super);
    function ChangeDetectionError(proto, originalException) {
      _super.call(this);
      this.originalException = originalException;
      this.location = proto.expressionAsString;
      this.message = this.originalException + " in [" + this.location + "]";
    }
    ChangeDetectionError.prototype.toString = function() {
      return this.message;
    };
    return ChangeDetectionError;
  })(lang_1.BaseException);
  exports.ChangeDetectionError = ChangeDetectionError;
  var DehydratedException = (function(_super) {
    __extends(DehydratedException, _super);
    function DehydratedException() {
      _super.call(this, 'Attempt to detect changes on a dehydrated detector.');
    }
    return DehydratedException;
  })(lang_1.BaseException);
  exports.DehydratedException = DehydratedException;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/interfaces", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ChangeDetection = (function() {
    function ChangeDetection() {}
    ChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      return null;
    };
    return ChangeDetection;
  })();
  exports.ChangeDetection = ChangeDetection;
  var ChangeDetectorDefinition = (function() {
    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, directiveRecords) {
      this.id = id;
      this.strategy = strategy;
      this.variableNames = variableNames;
      this.bindingRecords = bindingRecords;
      this.directiveRecords = directiveRecords;
    }
    return ChangeDetectorDefinition;
  })();
  exports.ChangeDetectorDefinition = ChangeDetectorDefinition;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/constants", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  exports.CHECK_ONCE = "CHECK_ONCE";
  exports.CHECKED = "CHECKED";
  exports.CHECK_ALWAYS = "ALWAYS_CHECK";
  exports.DETACHED = "DETACHED";
  exports.ON_PUSH = "ON_PUSH";
  exports.DEFAULT = "DEFAULT";
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var WrappedValue = (function() {
    function WrappedValue(wrapped) {
      this.wrapped = wrapped;
    }
    WrappedValue.wrap = function(value) {
      var w = _wrappedValues[_wrappedIndex++ % 5];
      w.wrapped = value;
      return w;
    };
    return WrappedValue;
  })();
  exports.WrappedValue = WrappedValue;
  var _wrappedValues = [new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null)];
  var _wrappedIndex = 0;
  var BasePipe = (function() {
    function BasePipe() {}
    BasePipe.prototype.supports = function(obj) {
      return true;
    };
    BasePipe.prototype.onDestroy = function() {};
    BasePipe.prototype.transform = function(value) {
      return _abstract();
    };
    return BasePipe;
  })();
  exports.BasePipe = BasePipe;
  function _abstract() {
    throw new lang_1.BaseException('This method is abstract');
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detector_ref", ["npm:angular2@2.0.0-alpha.28/src/change_detection/constants"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var constants_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/constants");
  var ChangeDetectorRef = (function() {
    function ChangeDetectorRef(_cd) {
      this._cd = _cd;
    }
    ChangeDetectorRef.prototype.requestCheck = function() {
      this._cd.markPathToRootAsCheckOnce();
    };
    ChangeDetectorRef.prototype.detach = function() {
      this._cd.mode = constants_1.DETACHED;
    };
    ChangeDetectorRef.prototype.reattach = function() {
      this._cd.mode = constants_1.CHECK_ALWAYS;
      this.requestCheck();
    };
    return ChangeDetectorRef;
  })();
  exports.ChangeDetectorRef = ChangeDetectorRef;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  (function(RecordType) {
    RecordType[RecordType["SELF"] = 0] = "SELF";
    RecordType[RecordType["CONST"] = 1] = "CONST";
    RecordType[RecordType["PRIMITIVE_OP"] = 2] = "PRIMITIVE_OP";
    RecordType[RecordType["PROPERTY"] = 3] = "PROPERTY";
    RecordType[RecordType["LOCAL"] = 4] = "LOCAL";
    RecordType[RecordType["INVOKE_METHOD"] = 5] = "INVOKE_METHOD";
    RecordType[RecordType["INVOKE_CLOSURE"] = 6] = "INVOKE_CLOSURE";
    RecordType[RecordType["KEYED_ACCESS"] = 7] = "KEYED_ACCESS";
    RecordType[RecordType["PIPE"] = 8] = "PIPE";
    RecordType[RecordType["INTERPOLATE"] = 9] = "INTERPOLATE";
    RecordType[RecordType["SAFE_PROPERTY"] = 10] = "SAFE_PROPERTY";
    RecordType[RecordType["SAFE_INVOKE_METHOD"] = 11] = "SAFE_INVOKE_METHOD";
    RecordType[RecordType["DIRECTIVE_LIFECYCLE"] = 12] = "DIRECTIVE_LIFECYCLE";
  })(exports.RecordType || (exports.RecordType = {}));
  var RecordType = exports.RecordType;
  var ProtoRecord = (function() {
    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, expressionAsString, lastInBinding, lastInDirective) {
      this.mode = mode;
      this.name = name;
      this.funcOrValue = funcOrValue;
      this.args = args;
      this.fixedArgs = fixedArgs;
      this.contextIndex = contextIndex;
      this.directiveIndex = directiveIndex;
      this.selfIndex = selfIndex;
      this.bindingRecord = bindingRecord;
      this.expressionAsString = expressionAsString;
      this.lastInBinding = lastInBinding;
      this.lastInDirective = lastInDirective;
    }
    ProtoRecord.prototype.isPureFunction = function() {
      return this.mode === RecordType.INTERPOLATE || this.mode === RecordType.PRIMITIVE_OP;
    };
    ProtoRecord.prototype.isPipeRecord = function() {
      return this.mode === RecordType.PIPE;
    };
    ProtoRecord.prototype.isLifeCycleRecord = function() {
      return this.mode === RecordType.DIRECTIVE_LIFECYCLE;
    };
    return ProtoRecord;
  })();
  exports.ProtoRecord = ProtoRecord;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/directive_record", ["npm:angular2@2.0.0-alpha.28/src/change_detection/constants", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var constants_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/constants");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var DirectiveIndex = (function() {
    function DirectiveIndex(elementIndex, directiveIndex) {
      this.elementIndex = elementIndex;
      this.directiveIndex = directiveIndex;
    }
    Object.defineProperty(DirectiveIndex.prototype, "name", {
      get: function() {
        return this.elementIndex + "_" + this.directiveIndex;
      },
      enumerable: true,
      configurable: true
    });
    return DirectiveIndex;
  })();
  exports.DirectiveIndex = DirectiveIndex;
  var DirectiveRecord = (function() {
    function DirectiveRecord(_a) {
      var _b = _a === void 0 ? {} : _a,
          directiveIndex = _b.directiveIndex,
          callOnAllChangesDone = _b.callOnAllChangesDone,
          callOnChange = _b.callOnChange,
          callOnCheck = _b.callOnCheck,
          callOnInit = _b.callOnInit,
          changeDetection = _b.changeDetection;
      this.directiveIndex = directiveIndex;
      this.callOnAllChangesDone = lang_1.normalizeBool(callOnAllChangesDone);
      this.callOnChange = lang_1.normalizeBool(callOnChange);
      this.callOnCheck = lang_1.normalizeBool(callOnCheck);
      this.callOnInit = lang_1.normalizeBool(callOnInit);
      this.changeDetection = changeDetection;
    }
    DirectiveRecord.prototype.isOnPushChangeDetection = function() {
      return lang_1.StringWrapper.equals(this.changeDetection, constants_1.ON_PUSH);
    };
    return DirectiveRecord;
  })();
  exports.DirectiveRecord = DirectiveRecord;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/coalesce", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record");
  function coalesce(records) {
    var res = [];
    var indexMap = new collection_1.Map();
    for (var i = 0; i < records.length; ++i) {
      var r = records[i];
      var record = _replaceIndices(r, res.length + 1, indexMap);
      var matchingRecord = _findMatching(record, res);
      if (lang_1.isPresent(matchingRecord) && record.lastInBinding) {
        res.push(_selfRecord(record, matchingRecord.selfIndex, res.length + 1));
        indexMap.set(r.selfIndex, matchingRecord.selfIndex);
      } else if (lang_1.isPresent(matchingRecord) && !record.lastInBinding) {
        indexMap.set(r.selfIndex, matchingRecord.selfIndex);
      } else {
        res.push(record);
        indexMap.set(r.selfIndex, record.selfIndex);
      }
    }
    return res;
  }
  exports.coalesce = coalesce;
  function _selfRecord(r, contextIndex, selfIndex) {
    return new proto_record_1.ProtoRecord(proto_record_1.RecordType.SELF, "self", null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
  }
  function _findMatching(r, rs) {
    return collection_1.ListWrapper.find(rs, function(rr) {
      return rr.mode !== proto_record_1.RecordType.DIRECTIVE_LIFECYCLE && rr.mode === r.mode && rr.funcOrValue === r.funcOrValue && rr.contextIndex === r.contextIndex && collection_1.ListWrapper.equals(rr.args, r.args);
    });
  }
  function _replaceIndices(r, selfIndex, indexMap) {
    var args = collection_1.ListWrapper.map(r.args, function(a) {
      return _map(indexMap, a);
    });
    var contextIndex = _map(indexMap, r.contextIndex);
    return new proto_record_1.ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
  }
  function _map(indexMap, value) {
    var r = indexMap.get(value);
    return lang_1.isPresent(r) ? r : value;
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/binding_record", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var DIRECTIVE = "directive";
  var DIRECTIVE_LIFECYCLE = "directiveLifecycle";
  var ELEMENT_PROPERTY = "elementProperty";
  var ELEMENT_ATTRIBUTE = "elementAttribute";
  var ELEMENT_CLASS = "elementClass";
  var ELEMENT_STYLE = "elementStyle";
  var TEXT_NODE = "textNode";
  var BindingRecord = (function() {
    function BindingRecord(mode, implicitReceiver, ast, elementIndex, propertyName, propertyUnit, setter, lifecycleEvent, directiveRecord) {
      this.mode = mode;
      this.implicitReceiver = implicitReceiver;
      this.ast = ast;
      this.elementIndex = elementIndex;
      this.propertyName = propertyName;
      this.propertyUnit = propertyUnit;
      this.setter = setter;
      this.lifecycleEvent = lifecycleEvent;
      this.directiveRecord = directiveRecord;
    }
    BindingRecord.prototype.callOnChange = function() {
      return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChange;
    };
    BindingRecord.prototype.isOnPushChangeDetection = function() {
      return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.isOnPushChangeDetection();
    };
    BindingRecord.prototype.isDirective = function() {
      return this.mode === DIRECTIVE;
    };
    BindingRecord.prototype.isDirectiveLifecycle = function() {
      return this.mode === DIRECTIVE_LIFECYCLE;
    };
    BindingRecord.prototype.isElementProperty = function() {
      return this.mode === ELEMENT_PROPERTY;
    };
    BindingRecord.prototype.isElementAttribute = function() {
      return this.mode === ELEMENT_ATTRIBUTE;
    };
    BindingRecord.prototype.isElementClass = function() {
      return this.mode === ELEMENT_CLASS;
    };
    BindingRecord.prototype.isElementStyle = function() {
      return this.mode === ELEMENT_STYLE;
    };
    BindingRecord.prototype.isTextNode = function() {
      return this.mode === TEXT_NODE;
    };
    BindingRecord.createForDirective = function(ast, propertyName, setter, directiveRecord) {
      return new BindingRecord(DIRECTIVE, 0, ast, 0, propertyName, null, setter, null, directiveRecord);
    };
    BindingRecord.createDirectiveOnCheck = function(directiveRecord) {
      return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, "onCheck", directiveRecord);
    };
    BindingRecord.createDirectiveOnInit = function(directiveRecord) {
      return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, "onInit", directiveRecord);
    };
    BindingRecord.createDirectiveOnChange = function(directiveRecord) {
      return new BindingRecord(DIRECTIVE_LIFECYCLE, 0, null, 0, null, null, null, "onChange", directiveRecord);
    };
    BindingRecord.createForElementProperty = function(ast, elementIndex, propertyName) {
      return new BindingRecord(ELEMENT_PROPERTY, 0, ast, elementIndex, propertyName, null, null, null, null);
    };
    BindingRecord.createForElementAttribute = function(ast, elementIndex, attributeName) {
      return new BindingRecord(ELEMENT_ATTRIBUTE, 0, ast, elementIndex, attributeName, null, null, null, null);
    };
    BindingRecord.createForElementClass = function(ast, elementIndex, className) {
      return new BindingRecord(ELEMENT_CLASS, 0, ast, elementIndex, className, null, null, null, null);
    };
    BindingRecord.createForElementStyle = function(ast, elementIndex, styleName, unit) {
      return new BindingRecord(ELEMENT_STYLE, 0, ast, elementIndex, styleName, unit, null, null, null);
    };
    BindingRecord.createForHostProperty = function(directiveIndex, ast, propertyName) {
      return new BindingRecord(ELEMENT_PROPERTY, directiveIndex, ast, directiveIndex.elementIndex, propertyName, null, null, null, null);
    };
    BindingRecord.createForHostAttribute = function(directiveIndex, ast, attributeName) {
      return new BindingRecord(ELEMENT_ATTRIBUTE, directiveIndex, ast, directiveIndex.elementIndex, attributeName, null, null, null, null);
    };
    BindingRecord.createForHostClass = function(directiveIndex, ast, className) {
      return new BindingRecord(ELEMENT_CLASS, directiveIndex, ast, directiveIndex.elementIndex, className, null, null, null, null);
    };
    BindingRecord.createForHostStyle = function(directiveIndex, ast, styleName, unit) {
      return new BindingRecord(ELEMENT_STYLE, directiveIndex, ast, directiveIndex.elementIndex, styleName, unit, null, null, null);
    };
    BindingRecord.createForTextNode = function(ast, elementIndex) {
      return new BindingRecord(TEXT_NODE, 0, ast, elementIndex, null, null, null, null, null);
    };
    return BindingRecord;
  })();
  exports.BindingRecord = BindingRecord;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe_registry", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/di/decorators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/di/decorators");
  var PipeRegistry = (function() {
    function PipeRegistry(config) {
      this.config = config;
    }
    PipeRegistry.prototype.get = function(type, obj, cdRef, existingPipe) {
      if (lang_1.isPresent(existingPipe) && existingPipe.supports(obj))
        return existingPipe;
      if (lang_1.isPresent(existingPipe))
        existingPipe.onDestroy();
      var factories = this._getListOfFactories(type, obj);
      var factory = this._getMatchingFactory(factories, type, obj);
      return factory.create(cdRef);
    };
    PipeRegistry.prototype._getListOfFactories = function(type, obj) {
      var listOfFactories = this.config[type];
      if (lang_1.isBlank(listOfFactories)) {
        throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
      }
      return listOfFactories;
    };
    PipeRegistry.prototype._getMatchingFactory = function(listOfFactories, type, obj) {
      var matchingFactory = collection_1.ListWrapper.find(listOfFactories, function(pipeFactory) {
        return pipeFactory.supports(obj);
      });
      if (lang_1.isBlank(matchingFactory)) {
        throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
      }
      return matchingFactory;
    };
    PipeRegistry = __decorate([decorators_1.Injectable(), __metadata('design:paramtypes', [Object])], PipeRegistry);
    return PipeRegistry;
  })();
  exports.PipeRegistry = PipeRegistry;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/null_pipe", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  var NullPipeFactory = (function() {
    function NullPipeFactory() {}
    NullPipeFactory.prototype.supports = function(obj) {
      return NullPipe.supportsObj(obj);
    };
    NullPipeFactory.prototype.create = function(cdRef) {
      return new NullPipe();
    };
    NullPipeFactory = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], NullPipeFactory);
    return NullPipeFactory;
  })();
  exports.NullPipeFactory = NullPipeFactory;
  var NullPipe = (function(_super) {
    __extends(NullPipe, _super);
    function NullPipe() {
      _super.apply(this, arguments);
      this.called = false;
    }
    NullPipe.supportsObj = function(obj) {
      return lang_1.isBlank(obj);
    };
    NullPipe.prototype.supports = function(obj) {
      return NullPipe.supportsObj(obj);
    };
    NullPipe.prototype.transform = function(value) {
      if (!this.called) {
        this.called = true;
        return pipe_1.WrappedValue.wrap(null);
      } else {
        return null;
      }
    };
    return NullPipe;
  })(pipe_1.BasePipe);
  exports.NullPipe = NullPipe;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_jit_generator", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/abstract_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util", "npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var abstract_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/abstract_change_detector");
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record");
  var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
  var UTIL = "ChangeDetectionUtil";
  var DISPATCHER_ACCESSOR = "this.dispatcher";
  var PIPE_REGISTRY_ACCESSOR = "this.pipeRegistry";
  var PROTOS_ACCESSOR = "this.protos";
  var DIRECTIVES_ACCESSOR = "this.directiveRecords";
  var CONTEXT_ACCESSOR = "this.context";
  var IS_CHANGED_LOCAL = "isChanged";
  var CHANGES_LOCAL = "changes";
  var LOCALS_ACCESSOR = "this.locals";
  var MODE_ACCESSOR = "this.mode";
  var CURRENT_PROTO = "currentProto";
  var ALREADY_CHECKED_ACCESSOR = "this.alreadyChecked";
  var ChangeDetectorJITGenerator = (function() {
    function ChangeDetectorJITGenerator(id, changeDetectionStrategy, records, directiveRecords) {
      this.id = id;
      this.changeDetectionStrategy = changeDetectionStrategy;
      this.records = records;
      this.directiveRecords = directiveRecords;
      this._localNames = this._getLocalNames(records);
      this._changeNames = this._getChangeNames(this._localNames);
      this._fieldNames = this._getFieldNames(this._localNames);
      this._pipeNames = this._getPipeNames(this._localNames);
    }
    ChangeDetectorJITGenerator.prototype._getLocalNames = function(records) {
      var index = 0;
      var names = records.map(function(r) {
        return _sanitizeName("" + r.name + index++);
      });
      return ["context"].concat(names);
    };
    ChangeDetectorJITGenerator.prototype._getChangeNames = function(_localNames) {
      return _localNames.map(function(n) {
        return ("change_" + n);
      });
    };
    ChangeDetectorJITGenerator.prototype._getFieldNames = function(_localNames) {
      return _localNames.map(function(n) {
        return ("this." + n);
      });
    };
    ChangeDetectorJITGenerator.prototype._getPipeNames = function(_localNames) {
      return _localNames.map(function(n) {
        return ("this." + n + "_pipe");
      });
    };
    ChangeDetectorJITGenerator.prototype.generate = function() {
      var _this = this;
      var typeName = _sanitizeName("ChangeDetector_" + this.id);
      var classDefinition = "\n      var " + typeName + " = function " + typeName + "(dispatcher, pipeRegistry, protos, directiveRecords) {\n        " + ABSTRACT_CHANGE_DETECTOR + ".call(this, " + JSON.stringify(this.id) + ");\n        " + DISPATCHER_ACCESSOR + " = dispatcher;\n        " + PIPE_REGISTRY_ACCESSOR + " = pipeRegistry;\n        " + PROTOS_ACCESSOR + " = protos;\n        " + DIRECTIVES_ACCESSOR + " = directiveRecords;\n        " + LOCALS_ACCESSOR + " = null;\n        " + ALREADY_CHECKED_ACCESSOR + " = false;\n        " + this._genFieldDefinitions() + "\n      }\n\n      " + typeName + ".prototype = Object.create(" + ABSTRACT_CHANGE_DETECTOR + ".prototype);\n\n      " + typeName + ".prototype.detectChangesInRecords = function(throwOnChange) {\n        if (!this.hydrated()) {\n          " + UTIL + ".throwDehydrated();\n        }\n        " + this._genLocalDefinitions() + "\n        " + this._genChangeDefinitions() + "\n        var " + IS_CHANGED_LOCAL + " = false;\n        var " + CURRENT_PROTO + ";\n        var " + CHANGES_LOCAL + " = null;\n\n        context = " + CONTEXT_ACCESSOR + ";\n\n        " + this.records.map(function(r) {
        return _this._genRecord(r);
      }).join("\n") + "\n\n        " + ALREADY_CHECKED_ACCESSOR + " = true;\n      }\n\n      " + typeName + ".prototype.callOnAllChangesDone = function() {\n        " + this._genCallOnAllChangesDoneBody() + "\n      }\n\n      " + typeName + ".prototype.hydrate = function(context, locals, directives) {\n        " + MODE_ACCESSOR + " = \"" + change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeDetectionStrategy) + "\";\n        " + CONTEXT_ACCESSOR + " = context;\n        " + LOCALS_ACCESSOR + " = locals;\n        " + this._genHydrateDirectives() + "\n        " + this._genHydrateDetectors() + "\n        " + ALREADY_CHECKED_ACCESSOR + " = false;\n      }\n\n      " + typeName + ".prototype.dehydrate = function() {\n        " + this._genPipeOnDestroy() + "\n        " + this._genFieldDefinitions() + "\n        " + LOCALS_ACCESSOR + " = null;\n      }\n\n      " + typeName + ".prototype.hydrated = function() {\n        return " + CONTEXT_ACCESSOR + " !== null;\n      }\n\n      return function(dispatcher, pipeRegistry) {\n        return new " + typeName + "(dispatcher, pipeRegistry, protos, directiveRecords);\n      }\n    ";
      return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', 'directiveRecords', classDefinition)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, this.records, this.directiveRecords);
    };
    ChangeDetectorJITGenerator.prototype._genGetDirectiveFieldNames = function() {
      var _this = this;
      return this.directiveRecords.map(function(d) {
        return _this._genGetDirective(d.directiveIndex);
      });
    };
    ChangeDetectorJITGenerator.prototype._genGetDetectorFieldNames = function() {
      var _this = this;
      return this.directiveRecords.filter(function(r) {
        return r.isOnPushChangeDetection();
      }).map(function(d) {
        return _this._genGetDetector(d.directiveIndex);
      });
    };
    ChangeDetectorJITGenerator.prototype._genGetDirective = function(d) {
      return "this.directive_" + d.name;
    };
    ChangeDetectorJITGenerator.prototype._genGetDetector = function(d) {
      return "this.detector_" + d.name;
    };
    ChangeDetectorJITGenerator.prototype._getNonNullPipeNames = function() {
      var _this = this;
      var pipes = [];
      this.records.forEach(function(r) {
        if (r.isPipeRecord()) {
          pipes.push(_this._pipeNames[r.selfIndex]);
        }
      });
      return pipes;
    };
    ChangeDetectorJITGenerator.prototype._genFieldDefinitions = function() {
      var fields = [];
      fields = fields.concat(this._fieldNames);
      fields = fields.concat(this._getNonNullPipeNames());
      fields = fields.concat(this._genGetDirectiveFieldNames());
      fields = fields.concat(this._genGetDetectorFieldNames());
      return fields.map(function(n) {
        return n == CONTEXT_ACCESSOR ? n + " = null;" : n + " = " + UTIL + ".uninitialized();";
      }).join("\n");
    };
    ChangeDetectorJITGenerator.prototype._genHydrateDirectives = function() {
      var directiveFieldNames = this._genGetDirectiveFieldNames();
      var lines = collection_1.ListWrapper.createFixedSize(directiveFieldNames.length);
      for (var i = 0,
          iLen = directiveFieldNames.length; i < iLen; ++i) {
        lines[i] = directiveFieldNames[i] + " = directives.getDirectiveFor(" + DIRECTIVES_ACCESSOR + "[" + i + "].directiveIndex);";
      }
      return lines.join('\n');
    };
    ChangeDetectorJITGenerator.prototype._genHydrateDetectors = function() {
      var detectorFieldNames = this._genGetDetectorFieldNames();
      var lines = collection_1.ListWrapper.createFixedSize(detectorFieldNames.length);
      for (var i = 0,
          iLen = detectorFieldNames.length; i < iLen; ++i) {
        lines[i] = detectorFieldNames[i] + " =\n          directives.getDetectorFor(" + DIRECTIVES_ACCESSOR + "[" + i + "].directiveIndex);";
      }
      return lines.join('\n');
    };
    ChangeDetectorJITGenerator.prototype._genPipeOnDestroy = function() {
      return this._getNonNullPipeNames().map(function(p) {
        return (p + ".onDestroy();");
      }).join("\n");
    };
    ChangeDetectorJITGenerator.prototype._genCallOnAllChangesDoneBody = function() {
      var notifications = [];
      var dirs = this.directiveRecords;
      for (var i = dirs.length - 1; i >= 0; --i) {
        var dir = dirs[i];
        if (dir.callOnAllChangesDone) {
          notifications.push(this._genGetDirective(dir.directiveIndex) + ".onAllChangesDone();");
        }
      }
      var directiveNotifications = notifications.join("\n");
      return "\n      this.dispatcher.notifyOnAllChangesDone();\n      " + directiveNotifications + "\n    ";
    };
    ChangeDetectorJITGenerator.prototype._genLocalDefinitions = function() {
      return this._localNames.map(function(n) {
        return ("var " + n + ";");
      }).join("\n");
    };
    ChangeDetectorJITGenerator.prototype._genChangeDefinitions = function() {
      return this._changeNames.map(function(n) {
        return ("var " + n + " = false;");
      }).join("\n");
    };
    ChangeDetectorJITGenerator.prototype._genRecord = function(r) {
      var rec;
      if (r.isLifeCycleRecord()) {
        rec = this._genDirectiveLifecycle(r);
      } else if (r.isPipeRecord()) {
        rec = this._genPipeCheck(r);
      } else {
        rec = this._genReferenceCheck(r);
      }
      return "" + rec + this._maybeGenLastInDirective(r);
    };
    ChangeDetectorJITGenerator.prototype._genDirectiveLifecycle = function(r) {
      if (r.name === "onCheck") {
        return this._genOnCheck(r);
      } else if (r.name === "onInit") {
        return this._genOnInit(r);
      } else if (r.name === "onChange") {
        return this._genOnChange(r);
      } else {
        throw new lang_1.BaseException("Unknown lifecycle event '" + r.name + "'");
      }
    };
    ChangeDetectorJITGenerator.prototype._genPipeCheck = function(r) {
      var context = this._localNames[r.contextIndex];
      var oldValue = this._fieldNames[r.selfIndex];
      var newValue = this._localNames[r.selfIndex];
      var change = this._changeNames[r.selfIndex];
      var pipe = this._pipeNames[r.selfIndex];
      var cdRef = "this.ref";
      var protoIndex = r.selfIndex - 1;
      var pipeType = r.name;
      return "\n      " + CURRENT_PROTO + " = " + PROTOS_ACCESSOR + "[" + protoIndex + "];\n      if (" + pipe + " === " + UTIL + ".uninitialized()) {\n        " + pipe + " = " + PIPE_REGISTRY_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + cdRef + ");\n      } else if (!" + pipe + ".supports(" + context + ")) {\n        " + pipe + ".onDestroy();\n        " + pipe + " = " + PIPE_REGISTRY_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + cdRef + ");\n      }\n\n      " + newValue + " = " + pipe + ".transform(" + context + ");\n      if (" + oldValue + " !== " + newValue + ") {\n        " + newValue + " = " + UTIL + ".unwrapValue(" + newValue + ");\n        " + change + " = true;\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
    };
    ChangeDetectorJITGenerator.prototype._genReferenceCheck = function(r) {
      var _this = this;
      var oldValue = this._fieldNames[r.selfIndex];
      var newValue = this._localNames[r.selfIndex];
      var protoIndex = r.selfIndex - 1;
      var check = "\n      " + CURRENT_PROTO + " = " + PROTOS_ACCESSOR + "[" + protoIndex + "];\n      " + this._genUpdateCurrentValue(r) + "\n      if (" + newValue + " !== " + oldValue + ") {\n        " + this._changeNames[r.selfIndex] + " = true;\n        " + this._genUpdateDirectiveOrElement(r) + "\n        " + this._genAddToChanges(r) + "\n        " + oldValue + " = " + newValue + ";\n      }\n    ";
      if (r.isPureFunction()) {
        var condition = r.args.map(function(a) {
          return _this._changeNames[a];
        }).join(" || ");
        return "if (" + condition + ") { " + check + " } else { " + newValue + " = " + oldValue + "; }";
      } else {
        return check;
      }
    };
    ChangeDetectorJITGenerator.prototype._genUpdateCurrentValue = function(r) {
      var _this = this;
      var context = (r.contextIndex == -1) ? this._genGetDirective(r.directiveIndex) : this._localNames[r.contextIndex];
      var newValue = this._localNames[r.selfIndex];
      var argString = r.args.map(function(arg) {
        return _this._localNames[arg];
      }).join(", ");
      var rhs;
      switch (r.mode) {
        case proto_record_1.RecordType.SELF:
          rhs = context;
          break;
        case proto_record_1.RecordType.CONST:
          rhs = JSON.stringify(r.funcOrValue);
          break;
        case proto_record_1.RecordType.PROPERTY:
          rhs = context + "." + r.name;
          break;
        case proto_record_1.RecordType.SAFE_PROPERTY:
          rhs = UTIL + ".isValueBlank(" + context + ") ? null : " + context + "." + r.name;
          break;
        case proto_record_1.RecordType.LOCAL:
          rhs = LOCALS_ACCESSOR + ".get('" + r.name + "')";
          break;
        case proto_record_1.RecordType.INVOKE_METHOD:
          rhs = context + "." + r.name + "(" + argString + ")";
          break;
        case proto_record_1.RecordType.SAFE_INVOKE_METHOD:
          rhs = UTIL + ".isValueBlank(" + context + ") ? null : " + context + "." + r.name + "(" + argString + ")";
          break;
        case proto_record_1.RecordType.INVOKE_CLOSURE:
          rhs = context + "(" + argString + ")";
          break;
        case proto_record_1.RecordType.PRIMITIVE_OP:
          rhs = UTIL + "." + r.name + "(" + argString + ")";
          break;
        case proto_record_1.RecordType.INTERPOLATE:
          rhs = this._genInterpolation(r);
          break;
        case proto_record_1.RecordType.KEYED_ACCESS:
          rhs = context + "[" + this._localNames[r.args[0]] + "]";
          break;
        default:
          throw new lang_1.BaseException("Unknown operation " + r.mode);
      }
      return newValue + " = " + rhs;
    };
    ChangeDetectorJITGenerator.prototype._genInterpolation = function(r) {
      var res = "";
      for (var i = 0; i < r.args.length; ++i) {
        res += JSON.stringify(r.fixedArgs[i]);
        res += " + ";
        res += this._localNames[r.args[i]];
        res += " + ";
      }
      res += JSON.stringify(r.fixedArgs[r.args.length]);
      return res;
    };
    ChangeDetectorJITGenerator.prototype._genUpdateDirectiveOrElement = function(r) {
      if (!r.lastInBinding)
        return "";
      var newValue = this._localNames[r.selfIndex];
      var oldValue = this._fieldNames[r.selfIndex];
      var br = r.bindingRecord;
      if (br.isDirective()) {
        var directiveProperty = this._genGetDirective(br.directiveRecord.directiveIndex) + "." + br.propertyName;
        return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        " + directiveProperty + " = " + newValue + ";\n        " + IS_CHANGED_LOCAL + " = true;\n      ";
      } else {
        return "\n        " + this._genThrowOnChangeCheck(oldValue, newValue) + "\n        " + DISPATCHER_ACCESSOR + ".notifyOnBinding(" + CURRENT_PROTO + ".bindingRecord, " + newValue + ");\n      ";
      }
    };
    ChangeDetectorJITGenerator.prototype._genThrowOnChangeCheck = function(oldValue, newValue) {
      return "\n      if(throwOnChange) {\n        " + UTIL + ".throwOnChange(" + CURRENT_PROTO + ", " + UTIL + ".simpleChange(" + oldValue + ", " + newValue + "));\n      }\n      ";
    };
    ChangeDetectorJITGenerator.prototype._genAddToChanges = function(r) {
      var newValue = this._localNames[r.selfIndex];
      var oldValue = this._fieldNames[r.selfIndex];
      if (!r.bindingRecord.callOnChange())
        return "";
      return "\n      " + CHANGES_LOCAL + " = " + UTIL + ".addChange(\n          " + CHANGES_LOCAL + ", " + CURRENT_PROTO + ".bindingRecord.propertyName,\n          " + UTIL + ".simpleChange(" + oldValue + ", " + newValue + "));\n    ";
    };
    ChangeDetectorJITGenerator.prototype._maybeGenLastInDirective = function(r) {
      if (!r.lastInDirective)
        return "";
      return "\n      " + CHANGES_LOCAL + " = null;\n      " + this._genNotifyOnPushDetectors(r) + "\n      " + IS_CHANGED_LOCAL + " = false;\n    ";
    };
    ChangeDetectorJITGenerator.prototype._genOnCheck = function(r) {
      var br = r.bindingRecord;
      return "if (!throwOnChange) " + this._genGetDirective(br.directiveRecord.directiveIndex) + ".onCheck();";
    };
    ChangeDetectorJITGenerator.prototype._genOnInit = function(r) {
      var br = r.bindingRecord;
      return "if (!throwOnChange && !" + ALREADY_CHECKED_ACCESSOR + ") " + this._genGetDirective(br.directiveRecord.directiveIndex) + ".onInit();";
    };
    ChangeDetectorJITGenerator.prototype._genOnChange = function(r) {
      var br = r.bindingRecord;
      return "if (!throwOnChange && " + CHANGES_LOCAL + ") " + this._genGetDirective(br.directiveRecord.directiveIndex) + ".onChange(" + CHANGES_LOCAL + ");";
    };
    ChangeDetectorJITGenerator.prototype._genNotifyOnPushDetectors = function(r) {
      var br = r.bindingRecord;
      if (!r.lastInDirective || !br.isOnPushChangeDetection())
        return "";
      var retVal = "\n      if(" + IS_CHANGED_LOCAL + ") {\n        " + this._genGetDetector(br.directiveRecord.directiveIndex) + ".markAsCheckOnce();\n      }\n    ";
      return retVal;
    };
    return ChangeDetectorJITGenerator;
  })();
  exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
  function _sanitizeName(s) {
    return s.replace(new RegExp("\\W", "g"), '');
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pregen_proto_change_detector", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var PregenProtoChangeDetector = (function() {
    function PregenProtoChangeDetector() {}
    PregenProtoChangeDetector.isSupported = function() {
      return false;
    };
    PregenProtoChangeDetector.prototype.instantiate = function(dispatcher) {
      throw new lang_1.BaseException('Pregen change detection not supported in Js');
    };
    return PregenProtoChangeDetector;
  })();
  exports.PregenProtoChangeDetector = PregenProtoChangeDetector;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/iterable_changes", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_2 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  var IterableChangesFactory = (function() {
    function IterableChangesFactory() {}
    IterableChangesFactory.prototype.supports = function(obj) {
      return IterableChanges.supportsObj(obj);
    };
    IterableChangesFactory.prototype.create = function(cdRef) {
      return new IterableChanges();
    };
    IterableChangesFactory = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], IterableChangesFactory);
    return IterableChangesFactory;
  })();
  exports.IterableChangesFactory = IterableChangesFactory;
  var IterableChanges = (function(_super) {
    __extends(IterableChanges, _super);
    function IterableChanges() {
      _super.call(this);
      this._collection = null;
      this._length = null;
      this._linkedRecords = null;
      this._unlinkedRecords = null;
      this._previousItHead = null;
      this._itHead = null;
      this._itTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._movesHead = null;
      this._movesTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
    }
    IterableChanges.supportsObj = function(obj) {
      return collection_1.isListLikeIterable(obj);
    };
    IterableChanges.prototype.supports = function(obj) {
      return IterableChanges.supportsObj(obj);
    };
    Object.defineProperty(IterableChanges.prototype, "collection", {
      get: function() {
        return this._collection;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(IterableChanges.prototype, "length", {
      get: function() {
        return this._length;
      },
      enumerable: true,
      configurable: true
    });
    IterableChanges.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._itHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    IterableChanges.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    IterableChanges.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    IterableChanges.prototype.forEachMovedItem = function(fn) {
      var record;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        fn(record);
      }
    };
    IterableChanges.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    IterableChanges.prototype.transform = function(collection) {
      if (this.check(collection)) {
        return pipe_1.WrappedValue.wrap(this);
      } else {
        return null;
      }
    };
    IterableChanges.prototype.check = function(collection) {
      var _this = this;
      this._reset();
      var record = this._itHead;
      var mayBeDirty = false;
      var index;
      var item;
      if (lang_2.isArray(collection)) {
        var list = collection;
        this._length = collection.length;
        for (index = 0; index < this._length; index++) {
          item = list[index];
          if (record === null || !lang_2.looseIdentical(record.item, item)) {
            record = this._mismatch(record, item, index);
            mayBeDirty = true;
          } else if (mayBeDirty) {
            record = this._verifyReinsertion(record, item, index);
          }
          record = record._next;
        }
      } else {
        index = 0;
        collection_1.iterateListLike(collection, function(item) {
          if (record === null || !lang_2.looseIdentical(record.item, item)) {
            record = _this._mismatch(record, item, index);
            mayBeDirty = true;
          } else if (mayBeDirty) {
            record = _this._verifyReinsertion(record, item, index);
          }
          record = record._next;
          index++;
        });
        this._length = index;
      }
      this._truncate(record);
      this._collection = collection;
      return this.isDirty;
    };
    Object.defineProperty(IterableChanges.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    IterableChanges.prototype._reset = function() {
      if (this.isDirty) {
        var record;
        var nextRecord;
        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
          record.previousIndex = record.currentIndex;
        }
        this._additionsHead = this._additionsTail = null;
        for (record = this._movesHead; record !== null; record = nextRecord) {
          record.previousIndex = record.currentIndex;
          nextRecord = record._nextMoved;
        }
        this._movesHead = this._movesTail = null;
        this._removalsHead = this._removalsTail = null;
      }
    };
    IterableChanges.prototype._mismatch = function(record, item, index) {
      var previousRecord;
      if (record === null) {
        previousRecord = this._itTail;
      } else {
        previousRecord = record._prev;
        this._remove(record);
      }
      record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
      if (record !== null) {
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
        if (record !== null) {
          this._reinsertAfter(record, previousRecord, index);
        } else {
          record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
        }
      }
      return record;
    };
    IterableChanges.prototype._verifyReinsertion = function(record, item, index) {
      var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
      if (reinsertRecord !== null) {
        record = this._reinsertAfter(reinsertRecord, record._prev, index);
      } else if (record.currentIndex != index) {
        record.currentIndex = index;
        this._addToMoves(record, index);
      }
      return record;
    };
    IterableChanges.prototype._truncate = function(record) {
      while (record !== null) {
        var nextRecord = record._next;
        this._addToRemovals(this._unlink(record));
        record = nextRecord;
      }
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.clear();
      }
      if (this._additionsTail !== null) {
        this._additionsTail._nextAdded = null;
      }
      if (this._movesTail !== null) {
        this._movesTail._nextMoved = null;
      }
      if (this._itTail !== null) {
        this._itTail._next = null;
      }
      if (this._removalsTail !== null) {
        this._removalsTail._nextRemoved = null;
      }
    };
    IterableChanges.prototype._reinsertAfter = function(record, prevRecord, index) {
      if (this._unlinkedRecords !== null) {
        this._unlinkedRecords.remove(record);
      }
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    IterableChanges.prototype._moveAfter = function(record, prevRecord, index) {
      this._unlink(record);
      this._insertAfter(record, prevRecord, index);
      this._addToMoves(record, index);
      return record;
    };
    IterableChanges.prototype._addAfter = function(record, prevRecord, index) {
      this._insertAfter(record, prevRecord, index);
      if (this._additionsTail === null) {
        this._additionsTail = this._additionsHead = record;
      } else {
        this._additionsTail = this._additionsTail._nextAdded = record;
      }
      return record;
    };
    IterableChanges.prototype._insertAfter = function(record, prevRecord, index) {
      var next = prevRecord === null ? this._itHead : prevRecord._next;
      record._next = next;
      record._prev = prevRecord;
      if (next === null) {
        this._itTail = record;
      } else {
        next._prev = record;
      }
      if (prevRecord === null) {
        this._itHead = record;
      } else {
        prevRecord._next = record;
      }
      if (this._linkedRecords === null) {
        this._linkedRecords = new _DuplicateMap();
      }
      this._linkedRecords.put(record);
      record.currentIndex = index;
      return record;
    };
    IterableChanges.prototype._remove = function(record) {
      return this._addToRemovals(this._unlink(record));
    };
    IterableChanges.prototype._unlink = function(record) {
      if (this._linkedRecords !== null) {
        this._linkedRecords.remove(record);
      }
      var prev = record._prev;
      var next = record._next;
      if (prev === null) {
        this._itHead = next;
      } else {
        prev._next = next;
      }
      if (next === null) {
        this._itTail = prev;
      } else {
        next._prev = prev;
      }
      return record;
    };
    IterableChanges.prototype._addToMoves = function(record, toIndex) {
      if (record.previousIndex === toIndex) {
        return record;
      }
      if (this._movesTail === null) {
        this._movesTail = this._movesHead = record;
      } else {
        this._movesTail = this._movesTail._nextMoved = record;
      }
      return record;
    };
    IterableChanges.prototype._addToRemovals = function(record) {
      if (this._unlinkedRecords === null) {
        this._unlinkedRecords = new _DuplicateMap();
      }
      this._unlinkedRecords.put(record);
      record.currentIndex = null;
      record._nextRemoved = null;
      if (this._removalsTail === null) {
        this._removalsTail = this._removalsHead = record;
        record._prevRemoved = null;
      } else {
        record._prevRemoved = this._removalsTail;
        this._removalsTail = this._removalsTail._nextRemoved = record;
      }
      return record;
    };
    IterableChanges.prototype.toString = function() {
      var record;
      var list = [];
      for (record = this._itHead; record !== null; record = record._next) {
        list.push(record);
      }
      var previous = [];
      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
        previous.push(record);
      }
      var additions = [];
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        additions.push(record);
      }
      var moves = [];
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        moves.push(record);
      }
      var removals = [];
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        removals.push(record);
      }
      return "collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" + "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" + "removals: " + removals.join(', ') + "\n";
    };
    return IterableChanges;
  })(pipe_1.BasePipe);
  exports.IterableChanges = IterableChanges;
  var CollectionChangeRecord = (function() {
    function CollectionChangeRecord(item) {
      this.item = item;
      this.currentIndex = null;
      this.previousIndex = null;
      this._nextPrevious = null;
      this._prev = null;
      this._next = null;
      this._prevDup = null;
      this._nextDup = null;
      this._prevRemoved = null;
      this._nextRemoved = null;
      this._nextAdded = null;
      this._nextMoved = null;
    }
    CollectionChangeRecord.prototype.toString = function() {
      return this.previousIndex === this.currentIndex ? lang_2.stringify(this.item) : lang_2.stringify(this.item) + '[' + lang_2.stringify(this.previousIndex) + '->' + lang_2.stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
  })();
  exports.CollectionChangeRecord = CollectionChangeRecord;
  var _DuplicateItemRecordList = (function() {
    function _DuplicateItemRecordList() {
      this._head = null;
      this._tail = null;
    }
    _DuplicateItemRecordList.prototype.add = function(record) {
      if (this._head === null) {
        this._head = this._tail = record;
        record._nextDup = null;
        record._prevDup = null;
      } else {
        this._tail._nextDup = record;
        record._prevDup = this._tail;
        record._nextDup = null;
        this._tail = record;
      }
    };
    _DuplicateItemRecordList.prototype.get = function(item, afterIndex) {
      var record;
      for (record = this._head; record !== null; record = record._nextDup) {
        if ((afterIndex === null || afterIndex < record.currentIndex) && lang_2.looseIdentical(record.item, item)) {
          return record;
        }
      }
      return null;
    };
    _DuplicateItemRecordList.prototype.remove = function(record) {
      var prev = record._prevDup;
      var next = record._nextDup;
      if (prev === null) {
        this._head = next;
      } else {
        prev._nextDup = next;
      }
      if (next === null) {
        this._tail = prev;
      } else {
        next._prevDup = prev;
      }
      return this._head === null;
    };
    return _DuplicateItemRecordList;
  })();
  var _DuplicateMap = (function() {
    function _DuplicateMap() {
      this.map = new Map();
    }
    _DuplicateMap.prototype.put = function(record) {
      var key = lang_2.getMapKey(record.item);
      var duplicates = this.map.get(key);
      if (!lang_2.isPresent(duplicates)) {
        duplicates = new _DuplicateItemRecordList();
        this.map.set(key, duplicates);
      }
      duplicates.add(record);
    };
    _DuplicateMap.prototype.get = function(value, afterIndex) {
      if (afterIndex === void 0) {
        afterIndex = null;
      }
      var key = lang_2.getMapKey(value);
      var recordList = this.map.get(key);
      return lang_2.isBlank(recordList) ? null : recordList.get(value, afterIndex);
    };
    _DuplicateMap.prototype.remove = function(record) {
      var key = lang_2.getMapKey(record.item);
      var recordList = this.map.get(key);
      if (recordList.remove(record)) {
        collection_1.MapWrapper.delete(this.map, key);
      }
      return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
      get: function() {
        return collection_1.MapWrapper.size(this.map) === 0;
      },
      enumerable: true,
      configurable: true
    });
    _DuplicateMap.prototype.clear = function() {
      this.map.clear();
    };
    _DuplicateMap.prototype.toString = function() {
      return '_DuplicateMap(' + lang_2.stringify(this.map) + ')';
    };
    return _DuplicateMap;
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/keyvalue_changes", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  var KeyValueChangesFactory = (function() {
    function KeyValueChangesFactory() {}
    KeyValueChangesFactory.prototype.supports = function(obj) {
      return KeyValueChanges.supportsObj(obj);
    };
    KeyValueChangesFactory.prototype.create = function(cdRef) {
      return new KeyValueChanges();
    };
    KeyValueChangesFactory = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], KeyValueChangesFactory);
    return KeyValueChangesFactory;
  })();
  exports.KeyValueChangesFactory = KeyValueChangesFactory;
  var KeyValueChanges = (function(_super) {
    __extends(KeyValueChanges, _super);
    function KeyValueChanges() {
      _super.apply(this, arguments);
      this._records = new Map();
      this._mapHead = null;
      this._previousMapHead = null;
      this._changesHead = null;
      this._changesTail = null;
      this._additionsHead = null;
      this._additionsTail = null;
      this._removalsHead = null;
      this._removalsTail = null;
    }
    KeyValueChanges.supportsObj = function(obj) {
      return obj instanceof Map || lang_1.isJsObject(obj);
    };
    KeyValueChanges.prototype.supports = function(obj) {
      return KeyValueChanges.supportsObj(obj);
    };
    KeyValueChanges.prototype.transform = function(map) {
      if (this.check(map)) {
        return pipe_1.WrappedValue.wrap(this);
      } else {
        return null;
      }
    };
    Object.defineProperty(KeyValueChanges.prototype, "isDirty", {
      get: function() {
        return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
      },
      enumerable: true,
      configurable: true
    });
    KeyValueChanges.prototype.forEachItem = function(fn) {
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        fn(record);
      }
    };
    KeyValueChanges.prototype.forEachPreviousItem = function(fn) {
      var record;
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        fn(record);
      }
    };
    KeyValueChanges.prototype.forEachChangedItem = function(fn) {
      var record;
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        fn(record);
      }
    };
    KeyValueChanges.prototype.forEachAddedItem = function(fn) {
      var record;
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        fn(record);
      }
    };
    KeyValueChanges.prototype.forEachRemovedItem = function(fn) {
      var record;
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        fn(record);
      }
    };
    KeyValueChanges.prototype.check = function(map) {
      var _this = this;
      this._reset();
      var records = this._records;
      var oldSeqRecord = this._mapHead;
      var lastOldSeqRecord = null;
      var lastNewSeqRecord = null;
      var seqChanged = false;
      this._forEach(map, function(value, key) {
        var newSeqRecord;
        if (oldSeqRecord !== null && key === oldSeqRecord.key) {
          newSeqRecord = oldSeqRecord;
          if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
            oldSeqRecord.previousValue = oldSeqRecord.currentValue;
            oldSeqRecord.currentValue = value;
            _this._addToChanges(oldSeqRecord);
          }
        } else {
          seqChanged = true;
          if (oldSeqRecord !== null) {
            oldSeqRecord._next = null;
            _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
            _this._addToRemovals(oldSeqRecord);
          }
          if (records.has(key)) {
            newSeqRecord = records.get(key);
          } else {
            newSeqRecord = new KVChangeRecord(key);
            records.set(key, newSeqRecord);
            newSeqRecord.currentValue = value;
            _this._addToAdditions(newSeqRecord);
          }
        }
        if (seqChanged) {
          if (_this._isInRemovals(newSeqRecord)) {
            _this._removeFromRemovals(newSeqRecord);
          }
          if (lastNewSeqRecord == null) {
            _this._mapHead = newSeqRecord;
          } else {
            lastNewSeqRecord._next = newSeqRecord;
          }
        }
        lastOldSeqRecord = oldSeqRecord;
        lastNewSeqRecord = newSeqRecord;
        oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
      });
      this._truncate(lastOldSeqRecord, oldSeqRecord);
      return this.isDirty;
    };
    KeyValueChanges.prototype._reset = function() {
      if (this.isDirty) {
        var record;
        for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
          record._nextPrevious = record._next;
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
          record.previousValue = record.currentValue;
        }
        for (record = this._additionsHead; record != null; record = record._nextAdded) {
          record.previousValue = record.currentValue;
        }
        this._changesHead = this._changesTail = null;
        this._additionsHead = this._additionsTail = null;
        this._removalsHead = this._removalsTail = null;
      }
    };
    KeyValueChanges.prototype._truncate = function(lastRecord, record) {
      while (record !== null) {
        if (lastRecord === null) {
          this._mapHead = null;
        } else {
          lastRecord._next = null;
        }
        var nextRecord = record._next;
        this._addToRemovals(record);
        lastRecord = record;
        record = nextRecord;
      }
      for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
        rec.previousValue = rec.currentValue;
        rec.currentValue = null;
        collection_1.MapWrapper.delete(this._records, rec.key);
      }
    };
    KeyValueChanges.prototype._isInRemovals = function(record) {
      return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
    };
    KeyValueChanges.prototype._addToRemovals = function(record) {
      if (this._removalsHead === null) {
        this._removalsHead = this._removalsTail = record;
      } else {
        this._removalsTail._nextRemoved = record;
        record._prevRemoved = this._removalsTail;
        this._removalsTail = record;
      }
    };
    KeyValueChanges.prototype._removeFromSeq = function(prev, record) {
      var next = record._next;
      if (prev === null) {
        this._mapHead = next;
      } else {
        prev._next = next;
      }
    };
    KeyValueChanges.prototype._removeFromRemovals = function(record) {
      var prev = record._prevRemoved;
      var next = record._nextRemoved;
      if (prev === null) {
        this._removalsHead = next;
      } else {
        prev._nextRemoved = next;
      }
      if (next === null) {
        this._removalsTail = prev;
      } else {
        next._prevRemoved = prev;
      }
      record._prevRemoved = record._nextRemoved = null;
    };
    KeyValueChanges.prototype._addToAdditions = function(record) {
      if (this._additionsHead === null) {
        this._additionsHead = this._additionsTail = record;
      } else {
        this._additionsTail._nextAdded = record;
        this._additionsTail = record;
      }
    };
    KeyValueChanges.prototype._addToChanges = function(record) {
      if (this._changesHead === null) {
        this._changesHead = this._changesTail = record;
      } else {
        this._changesTail._nextChanged = record;
        this._changesTail = record;
      }
    };
    KeyValueChanges.prototype.toString = function() {
      var items = [];
      var previous = [];
      var changes = [];
      var additions = [];
      var removals = [];
      var record;
      for (record = this._mapHead; record !== null; record = record._next) {
        items.push(lang_1.stringify(record));
      }
      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
        previous.push(lang_1.stringify(record));
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        changes.push(lang_1.stringify(record));
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        additions.push(lang_1.stringify(record));
      }
      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
        removals.push(lang_1.stringify(record));
      }
      return "map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" + "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" + "removals: " + removals.join(', ') + "\n";
    };
    KeyValueChanges.prototype._forEach = function(obj, fn) {
      if (obj instanceof Map) {
        collection_1.MapWrapper.forEach(obj, fn);
      } else {
        collection_1.StringMapWrapper.forEach(obj, fn);
      }
    };
    return KeyValueChanges;
  })(pipe_1.BasePipe);
  exports.KeyValueChanges = KeyValueChanges;
  var KVChangeRecord = (function() {
    function KVChangeRecord(key) {
      this.key = key;
      this.previousValue = null;
      this.currentValue = null;
      this._nextPrevious = null;
      this._next = null;
      this._nextAdded = null;
      this._nextRemoved = null;
      this._prevRemoved = null;
      this._nextChanged = null;
    }
    KVChangeRecord.prototype.toString = function() {
      return lang_1.looseIdentical(this.previousValue, this.currentValue) ? lang_1.stringify(this.key) : (lang_1.stringify(this.key) + '[' + lang_1.stringify(this.previousValue) + '->' + lang_1.stringify(this.currentValue) + ']');
    };
    return KVChangeRecord;
  })();
  exports.KVChangeRecord = KVChangeRecord;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:process@0.10.1/browser", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var process = module.exports = {};
  var queue = [];
  var draining = false;
  function drainQueue() {
    if (draining) {
      return ;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      var i = -1;
      while (++i < len) {
        currentQueue[i]();
      }
      len = queue.length;
    }
    draining = false;
  }
  process.nextTick = function(fun) {
    queue.push(fun);
    if (!draining) {
      setTimeout(drainQueue, 0);
    }
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = '';
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.binding = function(name) {
    throw new Error('process.binding is not supported');
  };
  process.cwd = function() {
    return '/';
  };
  process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() {
    return 0;
  };
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.aggregates", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        CompositeDisposable = Rx.CompositeDisposable,
        AnonymousObservable = Rx.AnonymousObservable,
        disposableEmpty = Rx.Disposable.empty,
        isEqual = Rx.internals.isEqual,
        helpers = Rx.helpers,
        not = helpers.not,
        defaultComparer = helpers.defaultComparer,
        identity = helpers.identity,
        defaultSubComparer = helpers.defaultSubComparer,
        isFunction = helpers.isFunction,
        isPromise = helpers.isPromise,
        isArrayLike = helpers.isArrayLike,
        isIterable = helpers.isIterable,
        observableFromPromise = Observable.fromPromise,
        observableFrom = Observable.from,
        bindCallback = Rx.internals.bindCallback,
        EmptyError = Rx.EmptyError,
        ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError;
    function extremaBy(source, keySelector, comparer) {
      return new AnonymousObservable(function(o) {
        var hasValue = false,
            lastKey = null,
            list = [];
        return source.subscribe(function(x) {
          var comparison,
              key;
          try {
            key = keySelector(x);
          } catch (ex) {
            o.onError(ex);
            return ;
          }
          comparison = 0;
          if (!hasValue) {
            hasValue = true;
            lastKey = key;
          } else {
            try {
              comparison = comparer(key, lastKey);
            } catch (ex1) {
              o.onError(ex1);
              return ;
            }
          }
          if (comparison > 0) {
            lastKey = key;
            list = [];
          }
          if (comparison >= 0) {
            list.push(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(list);
          o.onCompleted();
        });
      }, source);
    }
    function firstOnly(x) {
      if (x.length === 0) {
        throw new EmptyError();
      }
      return x[0];
    }
    observableProto.aggregate = function() {
      var hasSeed = false,
          accumulator,
          seed,
          source = this;
      if (arguments.length === 2) {
        hasSeed = true;
        seed = arguments[0];
        accumulator = arguments[1];
      } else {
        accumulator = arguments[0];
      }
      return new AnonymousObservable(function(o) {
        var hasAccumulation,
            accumulation,
            hasValue;
        return source.subscribe(function(x) {
          !hasValue && (hasValue = true);
          try {
            if (hasAccumulation) {
              accumulation = accumulator(accumulation, x);
            } else {
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            }
          } catch (e) {
            return o.onError(e);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          hasValue && o.onNext(accumulation);
          !hasValue && hasSeed && o.onNext(seed);
          !hasValue && !hasSeed && o.onError(new EmptyError());
          o.onCompleted();
        });
      }, source);
    };
    observableProto.reduce = function(accumulator) {
      var hasSeed = false,
          seed,
          source = this;
      if (arguments.length === 2) {
        hasSeed = true;
        seed = arguments[1];
      }
      return new AnonymousObservable(function(o) {
        var hasAccumulation,
            accumulation,
            hasValue;
        return source.subscribe(function(x) {
          !hasValue && (hasValue = true);
          try {
            if (hasAccumulation) {
              accumulation = accumulator(accumulation, x);
            } else {
              accumulation = hasSeed ? accumulator(seed, x) : x;
              hasAccumulation = true;
            }
          } catch (e) {
            return o.onError(e);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          hasValue && o.onNext(accumulation);
          !hasValue && hasSeed && o.onNext(seed);
          !hasValue && !hasSeed && o.onError(new EmptyError());
          o.onCompleted();
        });
      }, source);
    };
    observableProto.some = function(predicate, thisArg) {
      var source = this;
      return predicate ? source.filter(predicate, thisArg).some() : new AnonymousObservable(function(observer) {
        return source.subscribe(function() {
          observer.onNext(true);
          observer.onCompleted();
        }, function(e) {
          observer.onError(e);
        }, function() {
          observer.onNext(false);
          observer.onCompleted();
        });
      }, source);
    };
    observableProto.any = function() {
      return this.some.apply(this, arguments);
    };
    observableProto.isEmpty = function() {
      return this.any().map(not);
    };
    observableProto.every = function(predicate, thisArg) {
      return this.filter(function(v) {
        return !predicate(v);
      }, thisArg).some().map(not);
    };
    observableProto.all = function() {
      return this.every.apply(this, arguments);
    };
    observableProto.includes = function(searchElement, fromIndex) {
      var source = this;
      function comparer(a, b) {
        return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
      }
      return new AnonymousObservable(function(o) {
        var i = 0,
            n = +fromIndex || 0;
        Math.abs(n) === Infinity && (n = 0);
        if (n < 0) {
          o.onNext(false);
          o.onCompleted();
          return disposableEmpty;
        }
        return source.subscribe(function(x) {
          if (i++ >= n && comparer(x, searchElement)) {
            o.onNext(true);
            o.onCompleted();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(false);
          o.onCompleted();
        });
      }, this);
    };
    observableProto.contains = function(searchElement, fromIndex) {
      observableProto.includes(searchElement, fromIndex);
    };
    observableProto.count = function(predicate, thisArg) {
      return predicate ? this.filter(predicate, thisArg).count() : this.reduce(function(count) {
        return count + 1;
      }, 0);
    };
    observableProto.indexOf = function(searchElement, fromIndex) {
      var source = this;
      return new AnonymousObservable(function(o) {
        var i = 0,
            n = +fromIndex || 0;
        Math.abs(n) === Infinity && (n = 0);
        if (n < 0) {
          o.onNext(-1);
          o.onCompleted();
          return disposableEmpty;
        }
        return source.subscribe(function(x) {
          if (i >= n && x === searchElement) {
            o.onNext(i);
            o.onCompleted();
          }
          i++;
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(-1);
          o.onCompleted();
        });
      }, source);
    };
    observableProto.sum = function(keySelector, thisArg) {
      return keySelector && isFunction(keySelector) ? this.map(keySelector, thisArg).sum() : this.reduce(function(prev, curr) {
        return prev + curr;
      }, 0);
    };
    observableProto.minBy = function(keySelector, comparer) {
      comparer || (comparer = defaultSubComparer);
      return extremaBy(this, keySelector, function(x, y) {
        return comparer(x, y) * -1;
      });
    };
    observableProto.min = function(comparer) {
      return this.minBy(identity, comparer).map(function(x) {
        return firstOnly(x);
      });
    };
    observableProto.maxBy = function(keySelector, comparer) {
      comparer || (comparer = defaultSubComparer);
      return extremaBy(this, keySelector, comparer);
    };
    observableProto.max = function(comparer) {
      return this.maxBy(identity, comparer).map(function(x) {
        return firstOnly(x);
      });
    };
    observableProto.average = function(keySelector, thisArg) {
      return keySelector && isFunction(keySelector) ? this.map(keySelector, thisArg).average() : this.reduce(function(prev, cur) {
        return {
          sum: prev.sum + cur,
          count: prev.count + 1
        };
      }, {
        sum: 0,
        count: 0
      }).map(function(s) {
        if (s.count === 0) {
          throw new EmptyError();
        }
        return s.sum / s.count;
      });
    };
    observableProto.sequenceEqual = function(second, comparer) {
      var first = this;
      comparer || (comparer = defaultComparer);
      return new AnonymousObservable(function(o) {
        var donel = false,
            doner = false,
            ql = [],
            qr = [];
        var subscription1 = first.subscribe(function(x) {
          var equal,
              v;
          if (qr.length > 0) {
            v = qr.shift();
            try {
              equal = comparer(v, x);
            } catch (e) {
              o.onError(e);
              return ;
            }
            if (!equal) {
              o.onNext(false);
              o.onCompleted();
            }
          } else if (doner) {
            o.onNext(false);
            o.onCompleted();
          } else {
            ql.push(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          donel = true;
          if (ql.length === 0) {
            if (qr.length > 0) {
              o.onNext(false);
              o.onCompleted();
            } else if (doner) {
              o.onNext(true);
              o.onCompleted();
            }
          }
        });
        (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
        isPromise(second) && (second = observableFromPromise(second));
        var subscription2 = second.subscribe(function(x) {
          var equal;
          if (ql.length > 0) {
            var v = ql.shift();
            try {
              equal = comparer(v, x);
            } catch (exception) {
              o.onError(exception);
              return ;
            }
            if (!equal) {
              o.onNext(false);
              o.onCompleted();
            }
          } else if (donel) {
            o.onNext(false);
            o.onCompleted();
          } else {
            qr.push(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          doner = true;
          if (qr.length === 0) {
            if (ql.length > 0) {
              o.onNext(false);
              o.onCompleted();
            } else if (donel) {
              o.onNext(true);
              o.onCompleted();
            }
          }
        });
        return new CompositeDisposable(subscription1, subscription2);
      }, first);
    };
    function elementAtOrDefault(source, index, hasDefault, defaultValue) {
      if (index < 0) {
        throw new ArgumentOutOfRangeError();
      }
      return new AnonymousObservable(function(o) {
        var i = index;
        return source.subscribe(function(x) {
          if (i-- === 0) {
            o.onNext(x);
            o.onCompleted();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!hasDefault) {
            o.onError(new ArgumentOutOfRangeError());
          } else {
            o.onNext(defaultValue);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.elementAt = function(index) {
      return elementAtOrDefault(this, index, false);
    };
    observableProto.elementAtOrDefault = function(index, defaultValue) {
      return elementAtOrDefault(this, index, true, defaultValue);
    };
    function singleOrDefaultAsync(source, hasDefault, defaultValue) {
      return new AnonymousObservable(function(o) {
        var value = defaultValue,
            seenValue = false;
        return source.subscribe(function(x) {
          if (seenValue) {
            o.onError(new Error('Sequence contains more than one element'));
          } else {
            value = x;
            seenValue = true;
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!seenValue && !hasDefault) {
            o.onError(new EmptyError());
          } else {
            o.onNext(value);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.single = function(predicate, thisArg) {
      return predicate && isFunction(predicate) ? this.where(predicate, thisArg).single() : singleOrDefaultAsync(this, false);
    };
    observableProto.singleOrDefault = function(predicate, defaultValue, thisArg) {
      return predicate && isFunction(predicate) ? this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) : singleOrDefaultAsync(this, true, defaultValue);
    };
    function firstOrDefaultAsync(source, hasDefault, defaultValue) {
      return new AnonymousObservable(function(o) {
        return source.subscribe(function(x) {
          o.onNext(x);
          o.onCompleted();
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!hasDefault) {
            o.onError(new EmptyError());
          } else {
            o.onNext(defaultValue);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.first = function(predicate, thisArg) {
      return predicate ? this.where(predicate, thisArg).first() : firstOrDefaultAsync(this, false);
    };
    observableProto.firstOrDefault = function(predicate, defaultValue, thisArg) {
      return predicate ? this.where(predicate).firstOrDefault(null, defaultValue) : firstOrDefaultAsync(this, true, defaultValue);
    };
    function lastOrDefaultAsync(source, hasDefault, defaultValue) {
      return new AnonymousObservable(function(o) {
        var value = defaultValue,
            seenValue = false;
        return source.subscribe(function(x) {
          value = x;
          seenValue = true;
        }, function(e) {
          o.onError(e);
        }, function() {
          if (!seenValue && !hasDefault) {
            o.onError(new EmptyError());
          } else {
            o.onNext(value);
            o.onCompleted();
          }
        });
      }, source);
    }
    observableProto.last = function(predicate, thisArg) {
      return predicate ? this.where(predicate, thisArg).last() : lastOrDefaultAsync(this, false);
    };
    observableProto.lastOrDefault = function(predicate, defaultValue, thisArg) {
      return predicate ? this.where(predicate, thisArg).lastOrDefault(null, defaultValue) : lastOrDefaultAsync(this, true, defaultValue);
    };
    function findValue(source, predicate, thisArg, yieldIndex) {
      var callback = bindCallback(predicate, thisArg, 3);
      return new AnonymousObservable(function(o) {
        var i = 0;
        return source.subscribe(function(x) {
          var shouldRun;
          try {
            shouldRun = callback(x, i, source);
          } catch (e) {
            o.onError(e);
            return ;
          }
          if (shouldRun) {
            o.onNext(yieldIndex ? i : x);
            o.onCompleted();
          } else {
            i++;
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(yieldIndex ? -1 : undefined);
          o.onCompleted();
        });
      }, source);
    }
    observableProto.find = function(predicate, thisArg) {
      return findValue(this, predicate, thisArg, false);
    };
    observableProto.findIndex = function(predicate, thisArg) {
      return findValue(this, predicate, thisArg, true);
    };
    observableProto.toSet = function() {
      if (typeof root.Set === 'undefined') {
        throw new TypeError();
      }
      var source = this;
      return new AnonymousObservable(function(o) {
        var s = new root.Set();
        return source.subscribe(function(x) {
          s.add(x);
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(s);
          o.onCompleted();
        });
      }, source);
    };
    observableProto.toMap = function(keySelector, elementSelector) {
      if (typeof root.Map === 'undefined') {
        throw new TypeError();
      }
      var source = this;
      return new AnonymousObservable(function(o) {
        var m = new root.Map();
        return source.subscribe(function(x) {
          var key;
          try {
            key = keySelector(x);
          } catch (e) {
            o.onError(e);
            return ;
          }
          var element = x;
          if (elementSelector) {
            try {
              element = elementSelector(x);
            } catch (e) {
              o.onError(e);
              return ;
            }
          }
          m.set(key, element);
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onNext(m);
          o.onCompleted();
        });
      }, source);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.async", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx.binding", "exports"], function(Rx, exports) {
        root.Rx = factory(root, exports, Rx);
        return root.Rx;
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        observableFromPromise = Observable.fromPromise,
        observableThrow = Observable.throwError,
        AnonymousObservable = Rx.AnonymousObservable,
        AsyncSubject = Rx.AsyncSubject,
        disposableCreate = Rx.Disposable.create,
        CompositeDisposable = Rx.CompositeDisposable,
        immediateScheduler = Rx.Scheduler.immediate,
        timeoutScheduler = Rx.Scheduler.timeout,
        isScheduler = Rx.helpers.isScheduler,
        slice = Array.prototype.slice;
    var fnString = 'function',
        throwString = 'throw',
        isObject = Rx.internals.isObject;
    function toThunk(obj, ctx) {
      if (Array.isArray(obj)) {
        return objectToThunk.call(ctx, obj);
      }
      if (isGeneratorFunction(obj)) {
        return observableSpawn(obj.call(ctx));
      }
      if (isGenerator(obj)) {
        return observableSpawn(obj);
      }
      if (isObservable(obj)) {
        return observableToThunk(obj);
      }
      if (isPromise(obj)) {
        return promiseToThunk(obj);
      }
      if (typeof obj === fnString) {
        return obj;
      }
      if (isObject(obj) || Array.isArray(obj)) {
        return objectToThunk.call(ctx, obj);
      }
      return obj;
    }
    function objectToThunk(obj) {
      var ctx = this;
      return function(done) {
        var keys = Object.keys(obj),
            pending = keys.length,
            results = new obj.constructor(),
            finished;
        if (!pending) {
          timeoutScheduler.schedule(function() {
            done(null, results);
          });
          return ;
        }
        for (var i = 0,
            len = keys.length; i < len; i++) {
          run(obj[keys[i]], keys[i]);
        }
        function run(fn, key) {
          if (finished) {
            return ;
          }
          try {
            fn = toThunk(fn, ctx);
            if (typeof fn !== fnString) {
              results[key] = fn;
              return --pending || done(null, results);
            }
            fn.call(ctx, function(err, res) {
              if (finished) {
                return ;
              }
              if (err) {
                finished = true;
                return done(err);
              }
              results[key] = res;
              --pending || done(null, results);
            });
          } catch (e) {
            finished = true;
            done(e);
          }
        }
      };
    }
    function observableToThunk(observable) {
      return function(fn) {
        var value,
            hasValue = false;
        observable.subscribe(function(v) {
          value = v;
          hasValue = true;
        }, fn, function() {
          hasValue && fn(null, value);
        });
      };
    }
    function promiseToThunk(promise) {
      return function(fn) {
        promise.then(function(res) {
          fn(null, res);
        }, fn);
      };
    }
    function isObservable(obj) {
      return obj && typeof obj.subscribe === fnString;
    }
    function isGeneratorFunction(obj) {
      return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';
    }
    function isGenerator(obj) {
      return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;
    }
    var observableSpawn = Rx.spawn = function(fn) {
      var isGenFun = isGeneratorFunction(fn);
      return function(done) {
        var ctx = this,
            gen = fn;
        if (isGenFun) {
          for (var args = [],
              i = 0,
              len = arguments.length; i < len; i++) {
            args.push(arguments[i]);
          }
          var len = args.length,
              hasCallback = len && typeof args[len - 1] === fnString;
          done = hasCallback ? args.pop() : handleError;
          gen = fn.apply(this, args);
        } else {
          done = done || handleError;
        }
        next();
        function exit(err, res) {
          timeoutScheduler.schedule(done.bind(ctx, err, res));
        }
        function next(err, res) {
          var ret;
          if (arguments.length > 2) {
            for (var res = [],
                i = 1,
                len = arguments.length; i < len; i++) {
              res.push(arguments[i]);
            }
          }
          if (err) {
            try {
              ret = gen[throwString](err);
            } catch (e) {
              return exit(e);
            }
          }
          if (!err) {
            try {
              ret = gen.next(res);
            } catch (e) {
              return exit(e);
            }
          }
          if (ret.done) {
            return exit(null, ret.value);
          }
          ret.value = toThunk(ret.value, ctx);
          if (typeof ret.value === fnString) {
            var called = false;
            try {
              ret.value.call(ctx, function() {
                if (called) {
                  return ;
                }
                called = true;
                next.apply(ctx, arguments);
              });
            } catch (e) {
              timeoutScheduler.schedule(function() {
                if (called) {
                  return ;
                }
                called = true;
                next.call(ctx, e);
              });
            }
            return ;
          }
          next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));
        }
      };
    };
    function handleError(err) {
      if (!err) {
        return ;
      }
      timeoutScheduler.schedule(function() {
        throw err;
      });
    }
    Observable.start = function(func, context, scheduler) {
      return observableToAsync(func, context, scheduler)();
    };
    var observableToAsync = Observable.toAsync = function(func, context, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return function() {
        var args = arguments,
            subject = new AsyncSubject();
        scheduler.schedule(function() {
          var result;
          try {
            result = func.apply(context, args);
          } catch (e) {
            subject.onError(e);
            return ;
          }
          subject.onNext(result);
          subject.onCompleted();
        });
        return subject.asObservable();
      };
    };
    Observable.fromCallback = function(func, context, selector) {
      return function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        return new AnonymousObservable(function(observer) {
          function handler() {
            var len = arguments.length,
                results = new Array(len);
            for (var i = 0; i < len; i++) {
              results[i] = arguments[i];
            }
            if (selector) {
              try {
                results = selector.apply(context, results);
              } catch (e) {
                return observer.onError(e);
              }
              observer.onNext(results);
            } else {
              if (results.length <= 1) {
                observer.onNext.apply(observer, results);
              } else {
                observer.onNext(results);
              }
            }
            observer.onCompleted();
          }
          args.push(handler);
          func.apply(context, args);
        }).publishLast().refCount();
      };
    };
    Observable.fromNodeCallback = function(func, context, selector) {
      return function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        return new AnonymousObservable(function(observer) {
          function handler(err) {
            if (err) {
              observer.onError(err);
              return ;
            }
            var len = arguments.length,
                results = [];
            for (var i = 1; i < len; i++) {
              results[i - 1] = arguments[i];
            }
            if (selector) {
              try {
                results = selector.apply(context, results);
              } catch (e) {
                return observer.onError(e);
              }
              observer.onNext(results);
            } else {
              if (results.length <= 1) {
                observer.onNext.apply(observer, results);
              } else {
                observer.onNext(results);
              }
            }
            observer.onCompleted();
          }
          args.push(handler);
          func.apply(context, args);
        }).publishLast().refCount();
      };
    };
    function createListener(element, name, handler) {
      if (element.addEventListener) {
        element.addEventListener(name, handler, false);
        return disposableCreate(function() {
          element.removeEventListener(name, handler, false);
        });
      }
      throw new Error('No listener found');
    }
    function createEventListener(el, eventName, handler) {
      var disposables = new CompositeDisposable();
      if (Object.prototype.toString.call(el) === '[object NodeList]') {
        for (var i = 0,
            len = el.length; i < len; i++) {
          disposables.add(createEventListener(el.item(i), eventName, handler));
        }
      } else if (el) {
        disposables.add(createListener(el, eventName, handler));
      }
      return disposables;
    }
    Rx.config.useNativeEvents = false;
    Observable.fromEvent = function(element, eventName, selector) {
      if (element.addListener) {
        return fromEventPattern(function(h) {
          element.addListener(eventName, h);
        }, function(h) {
          element.removeListener(eventName, h);
        }, selector);
      }
      if (!Rx.config.useNativeEvents) {
        if (typeof element.on === 'function' && typeof element.off === 'function') {
          return fromEventPattern(function(h) {
            element.on(eventName, h);
          }, function(h) {
            element.off(eventName, h);
          }, selector);
        }
      }
      return new AnonymousObservable(function(observer) {
        return createEventListener(element, eventName, function handler(e) {
          var results = e;
          if (selector) {
            try {
              results = selector(arguments);
            } catch (err) {
              return observer.onError(err);
            }
          }
          observer.onNext(results);
        });
      }).publish().refCount();
    };
    var fromEventPattern = Observable.fromEventPattern = function(addHandler, removeHandler, selector) {
      return new AnonymousObservable(function(observer) {
        function innerHandler(e) {
          var result = e;
          if (selector) {
            try {
              result = selector(arguments);
            } catch (err) {
              return observer.onError(err);
            }
          }
          observer.onNext(result);
        }
        var returnValue = addHandler(innerHandler);
        return disposableCreate(function() {
          if (removeHandler) {
            removeHandler(innerHandler, returnValue);
          }
        });
      }).publish().refCount();
    };
    Observable.startAsync = function(functionAsync) {
      var promise;
      try {
        promise = functionAsync();
      } catch (e) {
        return observableThrow(e);
      }
      return observableFromPromise(promise);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.backpressure", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        AbstractObserver = Rx.internals.AbstractObserver,
        CompositeDisposable = Rx.CompositeDisposable,
        Subject = Rx.Subject,
        Observer = Rx.Observer,
        disposableEmpty = Rx.Disposable.empty,
        disposableCreate = Rx.Disposable.create,
        inherits = Rx.internals.inherits,
        addProperties = Rx.internals.addProperties,
        timeoutScheduler = Rx.Scheduler.timeout,
        currentThreadScheduler = Rx.Scheduler.currentThread,
        identity = Rx.helpers.identity,
        checkDisposed = Rx.Disposable.checkDisposed;
    Rx.Pauser = (function(__super__) {
      inherits(Pauser, __super__);
      function Pauser() {
        __super__.call(this);
      }
      Pauser.prototype.pause = function() {
        this.onNext(false);
      };
      Pauser.prototype.resume = function() {
        this.onNext(true);
      };
      return Pauser;
    }(Subject));
    var PausableObservable = (function(__super__) {
      inherits(PausableObservable, __super__);
      function subscribe(observer) {
        var conn = this.source.publish(),
            subscription = conn.subscribe(observer),
            connection = disposableEmpty;
        var pausable = this.pauser.distinctUntilChanged().subscribe(function(b) {
          if (b) {
            connection = conn.connect();
          } else {
            connection.dispose();
            connection = disposableEmpty;
          }
        });
        return new CompositeDisposable(subscription, connection, pausable);
      }
      function PausableObservable(source, pauser) {
        this.source = source;
        this.controller = new Subject();
        if (pauser && pauser.subscribe) {
          this.pauser = this.controller.merge(pauser);
        } else {
          this.pauser = this.controller;
        }
        __super__.call(this, subscribe, source);
      }
      PausableObservable.prototype.pause = function() {
        this.controller.onNext(false);
      };
      PausableObservable.prototype.resume = function() {
        this.controller.onNext(true);
      };
      return PausableObservable;
    }(Observable));
    observableProto.pausable = function(pauser) {
      return new PausableObservable(this, pauser);
    };
    function combineLatestSource(source, subject, resultSelector) {
      return new AnonymousObservable(function(o) {
        var hasValue = [false, false],
            hasValueAll = false,
            isDone = false,
            values = new Array(2),
            err;
        function next(x, i) {
          values[i] = x;
          var res;
          hasValue[i] = true;
          if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
            if (err) {
              o.onError(err);
              return ;
            }
            try {
              res = resultSelector.apply(null, values);
            } catch (ex) {
              o.onError(ex);
              return ;
            }
            o.onNext(res);
          }
          if (isDone && values[1]) {
            o.onCompleted();
          }
        }
        return new CompositeDisposable(source.subscribe(function(x) {
          next(x, 0);
        }, function(e) {
          if (values[1]) {
            o.onError(e);
          } else {
            err = e;
          }
        }, function() {
          isDone = true;
          values[1] && o.onCompleted();
        }), subject.subscribe(function(x) {
          next(x, 1);
        }, function(e) {
          o.onError(e);
        }, function() {
          isDone = true;
          next(true, 1);
        }));
      }, source);
    }
    var PausableBufferedObservable = (function(__super__) {
      inherits(PausableBufferedObservable, __super__);
      function subscribe(o) {
        var q = [],
            previousShouldFire;
        var subscription = combineLatestSource(this.source, this.pauser.distinctUntilChanged().startWith(false), function(data, shouldFire) {
          return {
            data: data,
            shouldFire: shouldFire
          };
        }).subscribe(function(results) {
          if (previousShouldFire !== undefined && results.shouldFire != previousShouldFire) {
            previousShouldFire = results.shouldFire;
            if (results.shouldFire) {
              while (q.length > 0) {
                o.onNext(q.shift());
              }
            }
          } else {
            previousShouldFire = results.shouldFire;
            if (results.shouldFire) {
              o.onNext(results.data);
            } else {
              q.push(results.data);
            }
          }
        }, function(err) {
          while (q.length > 0) {
            o.onNext(q.shift());
          }
          o.onError(err);
        }, function() {
          while (q.length > 0) {
            o.onNext(q.shift());
          }
          o.onCompleted();
        });
        return subscription;
      }
      function PausableBufferedObservable(source, pauser) {
        this.source = source;
        this.controller = new Subject();
        if (pauser && pauser.subscribe) {
          this.pauser = this.controller.merge(pauser);
        } else {
          this.pauser = this.controller;
        }
        __super__.call(this, subscribe, source);
      }
      PausableBufferedObservable.prototype.pause = function() {
        this.controller.onNext(false);
      };
      PausableBufferedObservable.prototype.resume = function() {
        this.controller.onNext(true);
      };
      return PausableBufferedObservable;
    }(Observable));
    observableProto.pausableBuffered = function(subject) {
      return new PausableBufferedObservable(this, subject);
    };
    var ControlledObservable = (function(__super__) {
      inherits(ControlledObservable, __super__);
      function subscribe(observer) {
        return this.source.subscribe(observer);
      }
      function ControlledObservable(source, enableQueue) {
        __super__.call(this, subscribe, source);
        this.subject = new ControlledSubject(enableQueue);
        this.source = source.multicast(this.subject).refCount();
      }
      ControlledObservable.prototype.request = function(numberOfItems) {
        if (numberOfItems == null) {
          numberOfItems = -1;
        }
        return this.subject.request(numberOfItems);
      };
      return ControlledObservable;
    }(Observable));
    var ControlledSubject = (function(__super__) {
      function subscribe(observer) {
        return this.subject.subscribe(observer);
      }
      inherits(ControlledSubject, __super__);
      function ControlledSubject(enableQueue) {
        enableQueue == null && (enableQueue = true);
        __super__.call(this, subscribe);
        this.subject = new Subject();
        this.enableQueue = enableQueue;
        this.queue = enableQueue ? [] : null;
        this.requestedCount = 0;
        this.requestedDisposable = disposableEmpty;
        this.error = null;
        this.hasFailed = false;
        this.hasCompleted = false;
      }
      addProperties(ControlledSubject.prototype, Observer, {
        onCompleted: function() {
          this.hasCompleted = true;
          if (!this.enableQueue || this.queue.length === 0)
            this.subject.onCompleted();
          else
            this.queue.push(Rx.Notification.createOnCompleted());
        },
        onError: function(error) {
          this.hasFailed = true;
          this.error = error;
          if (!this.enableQueue || this.queue.length === 0)
            this.subject.onError(error);
          else
            this.queue.push(Rx.Notification.createOnError(error));
        },
        onNext: function(value) {
          var hasRequested = false;
          if (this.requestedCount === 0) {
            this.enableQueue && this.queue.push(Rx.Notification.createOnNext(value));
          } else {
            (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
            hasRequested = true;
          }
          hasRequested && this.subject.onNext(value);
        },
        _processRequest: function(numberOfItems) {
          if (this.enableQueue) {
            while ((this.queue.length >= numberOfItems && numberOfItems > 0) || (this.queue.length > 0 && this.queue[0].kind !== 'N')) {
              var first = this.queue.shift();
              first.accept(this.subject);
              if (first.kind === 'N')
                numberOfItems--;
              else {
                this.disposeCurrentRequest();
                this.queue = [];
              }
            }
            return {
              numberOfItems: numberOfItems,
              returnValue: this.queue.length !== 0
            };
          }
          return {
            numberOfItems: numberOfItems,
            returnValue: false
          };
        },
        request: function(number) {
          this.disposeCurrentRequest();
          var self = this,
              r = this._processRequest(number);
          var number = r.numberOfItems;
          if (!r.returnValue) {
            this.requestedCount = number;
            this.requestedDisposable = disposableCreate(function() {
              self.requestedCount = 0;
            });
            return this.requestedDisposable;
          } else {
            return disposableEmpty;
          }
        },
        disposeCurrentRequest: function() {
          this.requestedDisposable.dispose();
          this.requestedDisposable = disposableEmpty;
        }
      });
      return ControlledSubject;
    }(Observable));
    observableProto.controlled = function(enableQueue) {
      if (enableQueue == null) {
        enableQueue = true;
      }
      return new ControlledObservable(this, enableQueue);
    };
    var StopAndWaitObservable = (function(__super__) {
      function subscribe(observer) {
        this.subscription = this.source.subscribe(new StopAndWaitObserver(observer, this, this.subscription));
        var self = this;
        timeoutScheduler.schedule(function() {
          self.source.request(1);
        });
        return this.subscription;
      }
      inherits(StopAndWaitObservable, __super__);
      function StopAndWaitObservable(source) {
        __super__.call(this, subscribe, source);
        this.source = source;
      }
      var StopAndWaitObserver = (function(__sub__) {
        inherits(StopAndWaitObserver, __sub__);
        function StopAndWaitObserver(observer, observable, cancel) {
          __sub__.call(this);
          this.observer = observer;
          this.observable = observable;
          this.cancel = cancel;
        }
        var stopAndWaitObserverProto = StopAndWaitObserver.prototype;
        stopAndWaitObserverProto.completed = function() {
          this.observer.onCompleted();
          this.dispose();
        };
        stopAndWaitObserverProto.error = function(error) {
          this.observer.onError(error);
          this.dispose();
        };
        stopAndWaitObserverProto.next = function(value) {
          this.observer.onNext(value);
          var self = this;
          timeoutScheduler.schedule(function() {
            self.observable.source.request(1);
          });
        };
        stopAndWaitObserverProto.dispose = function() {
          this.observer = null;
          if (this.cancel) {
            this.cancel.dispose();
            this.cancel = null;
          }
          __sub__.prototype.dispose.call(this);
        };
        return StopAndWaitObserver;
      }(AbstractObserver));
      return StopAndWaitObservable;
    }(Observable));
    ControlledObservable.prototype.stopAndWait = function() {
      return new StopAndWaitObservable(this);
    };
    var WindowedObservable = (function(__super__) {
      function subscribe(observer) {
        this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));
        var self = this;
        timeoutScheduler.schedule(function() {
          self.source.request(self.windowSize);
        });
        return this.subscription;
      }
      inherits(WindowedObservable, __super__);
      function WindowedObservable(source, windowSize) {
        __super__.call(this, subscribe, source);
        this.source = source;
        this.windowSize = windowSize;
      }
      var WindowedObserver = (function(__sub__) {
        inherits(WindowedObserver, __sub__);
        function WindowedObserver(observer, observable, cancel) {
          this.observer = observer;
          this.observable = observable;
          this.cancel = cancel;
          this.received = 0;
        }
        var windowedObserverPrototype = WindowedObserver.prototype;
        windowedObserverPrototype.completed = function() {
          this.observer.onCompleted();
          this.dispose();
        };
        windowedObserverPrototype.error = function(error) {
          this.observer.onError(error);
          this.dispose();
        };
        windowedObserverPrototype.next = function(value) {
          this.observer.onNext(value);
          this.received = ++this.received % this.observable.windowSize;
          if (this.received === 0) {
            var self = this;
            timeoutScheduler.schedule(function() {
              self.observable.source.request(self.observable.windowSize);
            });
          }
        };
        windowedObserverPrototype.dispose = function() {
          this.observer = null;
          if (this.cancel) {
            this.cancel.dispose();
            this.cancel = null;
          }
          __sub__.prototype.dispose.call(this);
        };
        return WindowedObserver;
      }(AbstractObserver));
      return WindowedObservable;
    }(Observable));
    ControlledObservable.prototype.windowed = function(windowSize) {
      return new WindowedObservable(this, windowSize);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.binding", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        Subject = Rx.Subject,
        AsyncSubject = Rx.AsyncSubject,
        Observer = Rx.Observer,
        ScheduledObserver = Rx.internals.ScheduledObserver,
        disposableCreate = Rx.Disposable.create,
        disposableEmpty = Rx.Disposable.empty,
        CompositeDisposable = Rx.CompositeDisposable,
        currentThreadScheduler = Rx.Scheduler.currentThread,
        isFunction = Rx.helpers.isFunction,
        inherits = Rx.internals.inherits,
        addProperties = Rx.internals.addProperties,
        checkDisposed = Rx.Disposable.checkDisposed;
    function cloneArray(arr) {
      var len = arr.length,
          a = new Array(len);
      for (var i = 0; i < len; i++) {
        a[i] = arr[i];
      }
      return a;
    }
    observableProto.multicast = function(subjectOrSubjectSelector, selector) {
      var source = this;
      return typeof subjectOrSubjectSelector === 'function' ? new AnonymousObservable(function(observer) {
        var connectable = source.multicast(subjectOrSubjectSelector());
        return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
      }, source) : new ConnectableObservable(source, subjectOrSubjectSelector);
    };
    observableProto.publish = function(selector) {
      return selector && isFunction(selector) ? this.multicast(function() {
        return new Subject();
      }, selector) : this.multicast(new Subject());
    };
    observableProto.share = function() {
      return this.publish().refCount();
    };
    observableProto.publishLast = function(selector) {
      return selector && isFunction(selector) ? this.multicast(function() {
        return new AsyncSubject();
      }, selector) : this.multicast(new AsyncSubject());
    };
    observableProto.publishValue = function(initialValueOrSelector, initialValue) {
      return arguments.length === 2 ? this.multicast(function() {
        return new BehaviorSubject(initialValue);
      }, initialValueOrSelector) : this.multicast(new BehaviorSubject(initialValueOrSelector));
    };
    observableProto.shareValue = function(initialValue) {
      return this.publishValue(initialValue).refCount();
    };
    observableProto.replay = function(selector, bufferSize, windowSize, scheduler) {
      return selector && isFunction(selector) ? this.multicast(function() {
        return new ReplaySubject(bufferSize, windowSize, scheduler);
      }, selector) : this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
    };
    observableProto.shareReplay = function(bufferSize, windowSize, scheduler) {
      return this.replay(null, bufferSize, windowSize, scheduler).refCount();
    };
    var InnerSubscription = function(subject, observer) {
      this.subject = subject;
      this.observer = observer;
    };
    InnerSubscription.prototype.dispose = function() {
      if (!this.subject.isDisposed && this.observer !== null) {
        var idx = this.subject.observers.indexOf(this.observer);
        this.subject.observers.splice(idx, 1);
        this.observer = null;
      }
    };
    var BehaviorSubject = Rx.BehaviorSubject = (function(__super__) {
      function subscribe(observer) {
        checkDisposed(this);
        if (!this.isStopped) {
          this.observers.push(observer);
          observer.onNext(this.value);
          return new InnerSubscription(this, observer);
        }
        if (this.hasError) {
          observer.onError(this.error);
        } else {
          observer.onCompleted();
        }
        return disposableEmpty;
      }
      inherits(BehaviorSubject, __super__);
      function BehaviorSubject(value) {
        __super__.call(this, subscribe);
        this.value = value, this.observers = [], this.isDisposed = false, this.isStopped = false, this.hasError = false;
      }
      addProperties(BehaviorSubject.prototype, Observer, {
        getValue: function() {
          checkDisposed(this);
          if (this.hasError) {
            throw this.error;
          }
          return this.value;
        },
        hasObservers: function() {
          return this.observers.length > 0;
        },
        onCompleted: function() {
          checkDisposed(this);
          if (this.isStopped) {
            return ;
          }
          this.isStopped = true;
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            os[i].onCompleted();
          }
          this.observers.length = 0;
        },
        onError: function(error) {
          checkDisposed(this);
          if (this.isStopped) {
            return ;
          }
          this.isStopped = true;
          this.hasError = true;
          this.error = error;
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            os[i].onError(error);
          }
          this.observers.length = 0;
        },
        onNext: function(value) {
          checkDisposed(this);
          if (this.isStopped) {
            return ;
          }
          this.value = value;
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            os[i].onNext(value);
          }
        },
        dispose: function() {
          this.isDisposed = true;
          this.observers = null;
          this.value = null;
          this.exception = null;
        }
      });
      return BehaviorSubject;
    }(Observable));
    var ReplaySubject = Rx.ReplaySubject = (function(__super__) {
      var maxSafeInteger = Math.pow(2, 53) - 1;
      function createRemovableDisposable(subject, observer) {
        return disposableCreate(function() {
          observer.dispose();
          !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
        });
      }
      function subscribe(observer) {
        var so = new ScheduledObserver(this.scheduler, observer),
            subscription = createRemovableDisposable(this, so);
        checkDisposed(this);
        this._trim(this.scheduler.now());
        this.observers.push(so);
        for (var i = 0,
            len = this.q.length; i < len; i++) {
          so.onNext(this.q[i].value);
        }
        if (this.hasError) {
          so.onError(this.error);
        } else if (this.isStopped) {
          so.onCompleted();
        }
        so.ensureActive();
        return subscription;
      }
      inherits(ReplaySubject, __super__);
      function ReplaySubject(bufferSize, windowSize, scheduler) {
        this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
        this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
        this.scheduler = scheduler || currentThreadScheduler;
        this.q = [];
        this.observers = [];
        this.isStopped = false;
        this.isDisposed = false;
        this.hasError = false;
        this.error = null;
        __super__.call(this, subscribe);
      }
      addProperties(ReplaySubject.prototype, Observer.prototype, {
        hasObservers: function() {
          return this.observers.length > 0;
        },
        _trim: function(now) {
          while (this.q.length > this.bufferSize) {
            this.q.shift();
          }
          while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
            this.q.shift();
          }
        },
        onNext: function(value) {
          checkDisposed(this);
          if (this.isStopped) {
            return ;
          }
          var now = this.scheduler.now();
          this.q.push({
            interval: now,
            value: value
          });
          this._trim(now);
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            var observer = os[i];
            observer.onNext(value);
            observer.ensureActive();
          }
        },
        onError: function(error) {
          checkDisposed(this);
          if (this.isStopped) {
            return ;
          }
          this.isStopped = true;
          this.error = error;
          this.hasError = true;
          var now = this.scheduler.now();
          this._trim(now);
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            var observer = os[i];
            observer.onError(error);
            observer.ensureActive();
          }
          this.observers.length = 0;
        },
        onCompleted: function() {
          checkDisposed(this);
          if (this.isStopped) {
            return ;
          }
          this.isStopped = true;
          var now = this.scheduler.now();
          this._trim(now);
          for (var i = 0,
              os = cloneArray(this.observers),
              len = os.length; i < len; i++) {
            var observer = os[i];
            observer.onCompleted();
            observer.ensureActive();
          }
          this.observers.length = 0;
        },
        dispose: function() {
          this.isDisposed = true;
          this.observers = null;
        }
      });
      return ReplaySubject;
    }(Observable));
    var ConnectableObservable = Rx.ConnectableObservable = (function(__super__) {
      inherits(ConnectableObservable, __super__);
      function ConnectableObservable(source, subject) {
        var hasSubscription = false,
            subscription,
            sourceObservable = source.asObservable();
        this.connect = function() {
          if (!hasSubscription) {
            hasSubscription = true;
            subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function() {
              hasSubscription = false;
            }));
          }
          return subscription;
        };
        __super__.call(this, function(o) {
          return subject.subscribe(o);
        });
      }
      ConnectableObservable.prototype.refCount = function() {
        var connectableSubscription,
            count = 0,
            source = this;
        return new AnonymousObservable(function(observer) {
          var shouldConnect = ++count === 1,
              subscription = source.subscribe(observer);
          shouldConnect && (connectableSubscription = source.connect());
          return function() {
            subscription.dispose();
            --count === 0 && connectableSubscription.dispose();
          };
        });
      };
      return ConnectableObservable;
    }(Observable));
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.coincidence", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        CompositeDisposable = Rx.CompositeDisposable,
        RefCountDisposable = Rx.RefCountDisposable,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        SerialDisposable = Rx.SerialDisposable,
        Subject = Rx.Subject,
        observableProto = Observable.prototype,
        observableEmpty = Observable.empty,
        observableNever = Observable.never,
        AnonymousObservable = Rx.AnonymousObservable,
        observerCreate = Rx.Observer.create,
        addRef = Rx.internals.addRef,
        defaultComparer = Rx.internals.isEqual,
        inherits = Rx.internals.inherits,
        noop = Rx.helpers.noop,
        identity = Rx.helpers.identity,
        isPromise = Rx.helpers.isPromise,
        observableFromPromise = Observable.fromPromise,
        ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError;
    var Dictionary = (function() {
      var primes = [1, 3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554393, 67108859, 134217689, 268435399, 536870909, 1073741789, 2147483647],
          noSuchkey = "no such key",
          duplicatekey = "duplicate key";
      function isPrime(candidate) {
        if ((candidate & 1) === 0) {
          return candidate === 2;
        }
        var num1 = Math.sqrt(candidate),
            num2 = 3;
        while (num2 <= num1) {
          if (candidate % num2 === 0) {
            return false;
          }
          num2 += 2;
        }
        return true;
      }
      function getPrime(min) {
        var index,
            num,
            candidate;
        for (index = 0; index < primes.length; ++index) {
          num = primes[index];
          if (num >= min) {
            return num;
          }
        }
        candidate = min | 1;
        while (candidate < primes[primes.length - 1]) {
          if (isPrime(candidate)) {
            return candidate;
          }
          candidate += 2;
        }
        return min;
      }
      function stringHashFn(str) {
        var hash = 757602046;
        if (!str.length) {
          return hash;
        }
        for (var i = 0,
            len = str.length; i < len; i++) {
          var character = str.charCodeAt(i);
          hash = ((hash << 5) - hash) + character;
          hash = hash & hash;
        }
        return hash;
      }
      function numberHashFn(key) {
        var c2 = 0x27d4eb2d;
        key = (key ^ 61) ^ (key >>> 16);
        key = key + (key << 3);
        key = key ^ (key >>> 4);
        key = key * c2;
        key = key ^ (key >>> 15);
        return key;
      }
      var getHashCode = (function() {
        var uniqueIdCounter = 0;
        return function(obj) {
          if (obj == null) {
            throw new Error(noSuchkey);
          }
          if (typeof obj === 'string') {
            return stringHashFn(obj);
          }
          if (typeof obj === 'number') {
            return numberHashFn(obj);
          }
          if (typeof obj === 'boolean') {
            return obj === true ? 1 : 0;
          }
          if (obj instanceof Date) {
            return numberHashFn(obj.valueOf());
          }
          if (obj instanceof RegExp) {
            return stringHashFn(obj.toString());
          }
          if (typeof obj.valueOf === 'function') {
            var valueOf = obj.valueOf();
            if (typeof valueOf === 'number') {
              return numberHashFn(valueOf);
            }
            if (typeof valueOf === 'string') {
              return stringHashFn(valueOf);
            }
          }
          if (obj.hashCode) {
            return obj.hashCode();
          }
          var id = 17 * uniqueIdCounter++;
          obj.hashCode = function() {
            return id;
          };
          return id;
        };
      }());
      function newEntry() {
        return {
          key: null,
          value: null,
          next: 0,
          hashCode: 0
        };
      }
      function Dictionary(capacity, comparer) {
        if (capacity < 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (capacity > 0) {
          this._initialize(capacity);
        }
        this.comparer = comparer || defaultComparer;
        this.freeCount = 0;
        this.size = 0;
        this.freeList = -1;
      }
      var dictionaryProto = Dictionary.prototype;
      dictionaryProto._initialize = function(capacity) {
        var prime = getPrime(capacity),
            i;
        this.buckets = new Array(prime);
        this.entries = new Array(prime);
        for (i = 0; i < prime; i++) {
          this.buckets[i] = -1;
          this.entries[i] = newEntry();
        }
        this.freeList = -1;
      };
      dictionaryProto.add = function(key, value) {
        this._insert(key, value, true);
      };
      dictionaryProto._insert = function(key, value, add) {
        if (!this.buckets) {
          this._initialize(0);
        }
        var index3,
            num = getHashCode(key) & 2147483647,
            index1 = num % this.buckets.length;
        for (var index2 = this.buckets[index1]; index2 >= 0; index2 = this.entries[index2].next) {
          if (this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key, key)) {
            if (add) {
              throw new Error(duplicatekey);
            }
            this.entries[index2].value = value;
            return ;
          }
        }
        if (this.freeCount > 0) {
          index3 = this.freeList;
          this.freeList = this.entries[index3].next;
          --this.freeCount;
        } else {
          if (this.size === this.entries.length) {
            this._resize();
            index1 = num % this.buckets.length;
          }
          index3 = this.size;
          ++this.size;
        }
        this.entries[index3].hashCode = num;
        this.entries[index3].next = this.buckets[index1];
        this.entries[index3].key = key;
        this.entries[index3].value = value;
        this.buckets[index1] = index3;
      };
      dictionaryProto._resize = function() {
        var prime = getPrime(this.size * 2),
            numArray = new Array(prime);
        for (index = 0; index < numArray.length; ++index) {
          numArray[index] = -1;
        }
        var entryArray = new Array(prime);
        for (index = 0; index < this.size; ++index) {
          entryArray[index] = this.entries[index];
        }
        for (var index = this.size; index < prime; ++index) {
          entryArray[index] = newEntry();
        }
        for (var index1 = 0; index1 < this.size; ++index1) {
          var index2 = entryArray[index1].hashCode % prime;
          entryArray[index1].next = numArray[index2];
          numArray[index2] = index1;
        }
        this.buckets = numArray;
        this.entries = entryArray;
      };
      dictionaryProto.remove = function(key) {
        if (this.buckets) {
          var num = getHashCode(key) & 2147483647,
              index1 = num % this.buckets.length,
              index2 = -1;
          for (var index3 = this.buckets[index1]; index3 >= 0; index3 = this.entries[index3].next) {
            if (this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key, key)) {
              if (index2 < 0) {
                this.buckets[index1] = this.entries[index3].next;
              } else {
                this.entries[index2].next = this.entries[index3].next;
              }
              this.entries[index3].hashCode = -1;
              this.entries[index3].next = this.freeList;
              this.entries[index3].key = null;
              this.entries[index3].value = null;
              this.freeList = index3;
              ++this.freeCount;
              return true;
            } else {
              index2 = index3;
            }
          }
        }
        return false;
      };
      dictionaryProto.clear = function() {
        var index,
            len;
        if (this.size <= 0) {
          return ;
        }
        for (index = 0, len = this.buckets.length; index < len; ++index) {
          this.buckets[index] = -1;
        }
        for (index = 0; index < this.size; ++index) {
          this.entries[index] = newEntry();
        }
        this.freeList = -1;
        this.size = 0;
      };
      dictionaryProto._findEntry = function(key) {
        if (this.buckets) {
          var num = getHashCode(key) & 2147483647;
          for (var index = this.buckets[num % this.buckets.length]; index >= 0; index = this.entries[index].next) {
            if (this.entries[index].hashCode === num && this.comparer(this.entries[index].key, key)) {
              return index;
            }
          }
        }
        return -1;
      };
      dictionaryProto.count = function() {
        return this.size - this.freeCount;
      };
      dictionaryProto.tryGetValue = function(key) {
        var entry = this._findEntry(key);
        return entry >= 0 ? this.entries[entry].value : undefined;
      };
      dictionaryProto.getValues = function() {
        var index = 0,
            results = [];
        if (this.entries) {
          for (var index1 = 0; index1 < this.size; index1++) {
            if (this.entries[index1].hashCode >= 0) {
              results[index++] = this.entries[index1].value;
            }
          }
        }
        return results;
      };
      dictionaryProto.get = function(key) {
        var entry = this._findEntry(key);
        if (entry >= 0) {
          return this.entries[entry].value;
        }
        throw new Error(noSuchkey);
      };
      dictionaryProto.set = function(key, value) {
        this._insert(key, value, false);
      };
      dictionaryProto.containskey = function(key) {
        return this._findEntry(key) >= 0;
      };
      return Dictionary;
    }());
    observableProto.join = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {
      var left = this;
      return new AnonymousObservable(function(observer) {
        var group = new CompositeDisposable();
        var leftDone = false,
            rightDone = false;
        var leftId = 0,
            rightId = 0;
        var leftMap = new Dictionary(),
            rightMap = new Dictionary();
        group.add(left.subscribe(function(value) {
          var id = leftId++;
          var md = new SingleAssignmentDisposable();
          leftMap.add(id, value);
          group.add(md);
          var expire = function() {
            leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
            group.remove(md);
          };
          var duration;
          try {
            duration = leftDurationSelector(value);
          } catch (e) {
            observer.onError(e);
            return ;
          }
          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
          rightMap.getValues().forEach(function(v) {
            var result;
            try {
              result = resultSelector(value, v);
            } catch (exn) {
              observer.onError(exn);
              return ;
            }
            observer.onNext(result);
          });
        }, observer.onError.bind(observer), function() {
          leftDone = true;
          (rightDone || leftMap.count() === 0) && observer.onCompleted();
        }));
        group.add(right.subscribe(function(value) {
          var id = rightId++;
          var md = new SingleAssignmentDisposable();
          rightMap.add(id, value);
          group.add(md);
          var expire = function() {
            rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
            group.remove(md);
          };
          var duration;
          try {
            duration = rightDurationSelector(value);
          } catch (e) {
            observer.onError(e);
            return ;
          }
          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
          leftMap.getValues().forEach(function(v) {
            var result;
            try {
              result = resultSelector(v, value);
            } catch (exn) {
              observer.onError(exn);
              return ;
            }
            observer.onNext(result);
          });
        }, observer.onError.bind(observer), function() {
          rightDone = true;
          (leftDone || rightMap.count() === 0) && observer.onCompleted();
        }));
        return group;
      }, left);
    };
    observableProto.groupJoin = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {
      var left = this;
      return new AnonymousObservable(function(observer) {
        var group = new CompositeDisposable();
        var r = new RefCountDisposable(group);
        var leftMap = new Dictionary(),
            rightMap = new Dictionary();
        var leftId = 0,
            rightId = 0;
        function handleError(e) {
          return function(v) {
            v.onError(e);
          };
        }
        ;
        group.add(left.subscribe(function(value) {
          var s = new Subject();
          var id = leftId++;
          leftMap.add(id, s);
          var result;
          try {
            result = resultSelector(value, addRef(s, r));
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return ;
          }
          observer.onNext(result);
          rightMap.getValues().forEach(function(v) {
            s.onNext(v);
          });
          var md = new SingleAssignmentDisposable();
          group.add(md);
          var expire = function() {
            leftMap.remove(id) && s.onCompleted();
            group.remove(md);
          };
          var duration;
          try {
            duration = leftDurationSelector(value);
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return ;
          }
          md.setDisposable(duration.take(1).subscribe(noop, function(e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
          }, expire));
        }, function(e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        }, observer.onCompleted.bind(observer)));
        group.add(right.subscribe(function(value) {
          var id = rightId++;
          rightMap.add(id, value);
          var md = new SingleAssignmentDisposable();
          group.add(md);
          var expire = function() {
            rightMap.remove(id);
            group.remove(md);
          };
          var duration;
          try {
            duration = rightDurationSelector(value);
          } catch (e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
            return ;
          }
          md.setDisposable(duration.take(1).subscribe(noop, function(e) {
            leftMap.getValues().forEach(handleError(e));
            observer.onError(e);
          }, expire));
          leftMap.getValues().forEach(function(v) {
            v.onNext(value);
          });
        }, function(e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        }));
        return r;
      }, left);
    };
    observableProto.buffer = function(bufferOpeningsOrClosingSelector, bufferClosingSelector) {
      return this.window.apply(this, arguments).selectMany(function(x) {
        return x.toArray();
      });
    };
    observableProto.window = function(windowOpeningsOrClosingSelector, windowClosingSelector) {
      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
        return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
      }
      return typeof windowOpeningsOrClosingSelector === 'function' ? observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) : observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
    };
    function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
      return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function(_, win) {
        return win;
      });
    }
    function observableWindowWithBoundaries(windowBoundaries) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var win = new Subject(),
            d = new CompositeDisposable(),
            r = new RefCountDisposable(d);
        observer.onNext(addRef(win, r));
        d.add(source.subscribe(function(x) {
          win.onNext(x);
        }, function(err) {
          win.onError(err);
          observer.onError(err);
        }, function() {
          win.onCompleted();
          observer.onCompleted();
        }));
        isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));
        d.add(windowBoundaries.subscribe(function(w) {
          win.onCompleted();
          win = new Subject();
          observer.onNext(addRef(win, r));
        }, function(err) {
          win.onError(err);
          observer.onError(err);
        }, function() {
          win.onCompleted();
          observer.onCompleted();
        }));
        return r;
      }, source);
    }
    function observableWindowWithClosingSelector(windowClosingSelector) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var m = new SerialDisposable(),
            d = new CompositeDisposable(m),
            r = new RefCountDisposable(d),
            win = new Subject();
        observer.onNext(addRef(win, r));
        d.add(source.subscribe(function(x) {
          win.onNext(x);
        }, function(err) {
          win.onError(err);
          observer.onError(err);
        }, function() {
          win.onCompleted();
          observer.onCompleted();
        }));
        function createWindowClose() {
          var windowClose;
          try {
            windowClose = windowClosingSelector();
          } catch (e) {
            observer.onError(e);
            return ;
          }
          isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));
          var m1 = new SingleAssignmentDisposable();
          m.setDisposable(m1);
          m1.setDisposable(windowClose.take(1).subscribe(noop, function(err) {
            win.onError(err);
            observer.onError(err);
          }, function() {
            win.onCompleted();
            win = new Subject();
            observer.onNext(addRef(win, r));
            createWindowClose();
          }));
        }
        createWindowClose();
        return r;
      }, source);
    }
    observableProto.pairwise = function() {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var previous,
            hasPrevious = false;
        return source.subscribe(function(x) {
          if (hasPrevious) {
            observer.onNext([previous, x]);
          } else {
            hasPrevious = true;
          }
          previous = x;
        }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
      }, source);
    };
    observableProto.partition = function(predicate, thisArg) {
      return [this.filter(predicate, thisArg), this.filter(function(x, i, o) {
        return !predicate.call(thisArg, x, i, o);
      })];
    };
    observableProto.groupBy = function(keySelector, elementSelector, comparer) {
      return this.groupByUntil(keySelector, elementSelector, observableNever, comparer);
    };
    observableProto.groupByUntil = function(keySelector, elementSelector, durationSelector, comparer) {
      var source = this;
      elementSelector || (elementSelector = identity);
      comparer || (comparer = defaultComparer);
      return new AnonymousObservable(function(observer) {
        function handleError(e) {
          return function(item) {
            item.onError(e);
          };
        }
        var map = new Dictionary(0, comparer),
            groupDisposable = new CompositeDisposable(),
            refCountDisposable = new RefCountDisposable(groupDisposable);
        groupDisposable.add(source.subscribe(function(x) {
          var key;
          try {
            key = keySelector(x);
          } catch (e) {
            map.getValues().forEach(handleError(e));
            observer.onError(e);
            return ;
          }
          var fireNewMapEntry = false,
              writer = map.tryGetValue(key);
          if (!writer) {
            writer = new Subject();
            map.set(key, writer);
            fireNewMapEntry = true;
          }
          if (fireNewMapEntry) {
            var group = new GroupedObservable(key, writer, refCountDisposable),
                durationGroup = new GroupedObservable(key, writer);
            try {
              duration = durationSelector(durationGroup);
            } catch (e) {
              map.getValues().forEach(handleError(e));
              observer.onError(e);
              return ;
            }
            observer.onNext(group);
            var md = new SingleAssignmentDisposable();
            groupDisposable.add(md);
            var expire = function() {
              map.remove(key) && writer.onCompleted();
              groupDisposable.remove(md);
            };
            md.setDisposable(duration.take(1).subscribe(noop, function(exn) {
              map.getValues().forEach(handleError(exn));
              observer.onError(exn);
            }, expire));
          }
          var element;
          try {
            element = elementSelector(x);
          } catch (e) {
            map.getValues().forEach(handleError(e));
            observer.onError(e);
            return ;
          }
          writer.onNext(element);
        }, function(ex) {
          map.getValues().forEach(handleError(ex));
          observer.onError(ex);
        }, function() {
          map.getValues().forEach(function(item) {
            item.onCompleted();
          });
          observer.onCompleted();
        }));
        return refCountDisposable;
      }, source);
    };
    var GroupedObservable = (function(__super__) {
      inherits(GroupedObservable, __super__);
      function subscribe(observer) {
        return this.underlyingObservable.subscribe(observer);
      }
      function GroupedObservable(key, underlyingObservable, mergedDisposable) {
        __super__.call(this, subscribe);
        this.key = key;
        this.underlyingObservable = !mergedDisposable ? underlyingObservable : new AnonymousObservable(function(observer) {
          return new CompositeDisposable(mergedDisposable.getDisposable(), underlyingObservable.subscribe(observer));
        });
      }
      return GroupedObservable;
    }(Observable));
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.experimental", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableConcat = Observable.concat,
        observableDefer = Observable.defer,
        observableEmpty = Observable.empty,
        disposableEmpty = Rx.Disposable.empty,
        CompositeDisposable = Rx.CompositeDisposable,
        SerialDisposable = Rx.SerialDisposable,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        Enumerator = Rx.internals.Enumerator,
        Enumerable = Rx.internals.Enumerable,
        enumerableOf = Enumerable.of,
        immediateScheduler = Rx.Scheduler.immediate,
        currentThreadScheduler = Rx.Scheduler.currentThread,
        slice = Array.prototype.slice,
        AsyncSubject = Rx.AsyncSubject,
        Observer = Rx.Observer,
        inherits = Rx.internals.inherits,
        bindCallback = Rx.internals.bindCallback,
        addProperties = Rx.internals.addProperties,
        helpers = Rx.helpers,
        noop = helpers.noop,
        isPromise = helpers.isPromise,
        isScheduler = helpers.isScheduler,
        observableFromPromise = Observable.fromPromise;
    var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) || '_es6shim_iterator_';
    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
      $iterator$ = '@@iterator';
    }
    var doneEnumerator = Rx.doneEnumerator = {
      done: true,
      value: undefined
    };
    var isIterable = Rx.helpers.isIterable = function(o) {
      return o[$iterator$] !== undefined;
    };
    var isArrayLike = Rx.helpers.isArrayLike = function(o) {
      return o && o.length !== undefined;
    };
    Rx.helpers.iterator = $iterator$;
    function enumerableWhile(condition, source) {
      return new Enumerable(function() {
        return new Enumerator(function() {
          return condition() ? {
            done: false,
            value: source
          } : {
            done: true,
            value: undefined
          };
        });
      });
    }
    observableProto.letBind = observableProto['let'] = function(func) {
      return func(this);
    };
    Observable['if'] = Observable.ifThen = function(condition, thenSource, elseSourceOrScheduler) {
      return observableDefer(function() {
        elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());
        isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
        isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));
        typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
        return condition() ? thenSource : elseSourceOrScheduler;
      });
    };
    Observable['for'] = Observable.forIn = function(sources, resultSelector, thisArg) {
      return enumerableOf(sources, resultSelector, thisArg).concat();
    };
    var observableWhileDo = Observable['while'] = Observable.whileDo = function(condition, source) {
      isPromise(source) && (source = observableFromPromise(source));
      return enumerableWhile(condition, source).concat();
    };
    observableProto.doWhile = function(condition) {
      return observableConcat([this, observableWhileDo(condition, this)]);
    };
    Observable['case'] = Observable.switchCase = function(selector, sources, defaultSourceOrScheduler) {
      return observableDefer(function() {
        isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
        defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());
        typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));
        var result = sources[selector()];
        isPromise(result) && (result = observableFromPromise(result));
        return result || defaultSourceOrScheduler;
      });
    };
    observableProto.expand = function(selector, scheduler) {
      isScheduler(scheduler) || (scheduler = immediateScheduler);
      var source = this;
      return new AnonymousObservable(function(observer) {
        var q = [],
            m = new SerialDisposable(),
            d = new CompositeDisposable(m),
            activeCount = 0,
            isAcquired = false;
        var ensureActive = function() {
          var isOwner = false;
          if (q.length > 0) {
            isOwner = !isAcquired;
            isAcquired = true;
          }
          if (isOwner) {
            m.setDisposable(scheduler.scheduleRecursive(function(self) {
              var work;
              if (q.length > 0) {
                work = q.shift();
              } else {
                isAcquired = false;
                return ;
              }
              var m1 = new SingleAssignmentDisposable();
              d.add(m1);
              m1.setDisposable(work.subscribe(function(x) {
                observer.onNext(x);
                var result = null;
                try {
                  result = selector(x);
                } catch (e) {
                  observer.onError(e);
                }
                q.push(result);
                activeCount++;
                ensureActive();
              }, observer.onError.bind(observer), function() {
                d.remove(m1);
                activeCount--;
                if (activeCount === 0) {
                  observer.onCompleted();
                }
              }));
              self();
            }));
          }
        };
        q.push(source);
        activeCount++;
        ensureActive();
        return d;
      }, this);
    };
    Observable.forkJoin = function() {
      var allSources = [];
      if (Array.isArray(arguments[0])) {
        allSources = arguments[0];
      } else {
        for (var i = 0,
            len = arguments.length; i < len; i++) {
          allSources.push(arguments[i]);
        }
      }
      return new AnonymousObservable(function(subscriber) {
        var count = allSources.length;
        if (count === 0) {
          subscriber.onCompleted();
          return disposableEmpty;
        }
        var group = new CompositeDisposable(),
            finished = false,
            hasResults = new Array(count),
            hasCompleted = new Array(count),
            results = new Array(count);
        for (var idx = 0; idx < count; idx++) {
          (function(i) {
            var source = allSources[i];
            isPromise(source) && (source = observableFromPromise(source));
            group.add(source.subscribe(function(value) {
              if (!finished) {
                hasResults[i] = true;
                results[i] = value;
              }
            }, function(e) {
              finished = true;
              subscriber.onError(e);
              group.dispose();
            }, function() {
              if (!finished) {
                if (!hasResults[i]) {
                  subscriber.onCompleted();
                  return ;
                }
                hasCompleted[i] = true;
                for (var ix = 0; ix < count; ix++) {
                  if (!hasCompleted[ix]) {
                    return ;
                  }
                }
                finished = true;
                subscriber.onNext(results);
                subscriber.onCompleted();
              }
            }));
          })(idx);
        }
        return group;
      });
    };
    observableProto.forkJoin = function(second, resultSelector) {
      var first = this;
      return new AnonymousObservable(function(observer) {
        var leftStopped = false,
            rightStopped = false,
            hasLeft = false,
            hasRight = false,
            lastLeft,
            lastRight,
            leftSubscription = new SingleAssignmentDisposable(),
            rightSubscription = new SingleAssignmentDisposable();
        isPromise(second) && (second = observableFromPromise(second));
        leftSubscription.setDisposable(first.subscribe(function(left) {
          hasLeft = true;
          lastLeft = left;
        }, function(err) {
          rightSubscription.dispose();
          observer.onError(err);
        }, function() {
          leftStopped = true;
          if (rightStopped) {
            if (!hasLeft) {
              observer.onCompleted();
            } else if (!hasRight) {
              observer.onCompleted();
            } else {
              var result;
              try {
                result = resultSelector(lastLeft, lastRight);
              } catch (e) {
                observer.onError(e);
                return ;
              }
              observer.onNext(result);
              observer.onCompleted();
            }
          }
        }));
        rightSubscription.setDisposable(second.subscribe(function(right) {
          hasRight = true;
          lastRight = right;
        }, function(err) {
          leftSubscription.dispose();
          observer.onError(err);
        }, function() {
          rightStopped = true;
          if (leftStopped) {
            if (!hasLeft) {
              observer.onCompleted();
            } else if (!hasRight) {
              observer.onCompleted();
            } else {
              var result;
              try {
                result = resultSelector(lastLeft, lastRight);
              } catch (e) {
                observer.onError(e);
                return ;
              }
              observer.onNext(result);
              observer.onCompleted();
            }
          }
        }));
        return new CompositeDisposable(leftSubscription, rightSubscription);
      }, first);
    };
    observableProto.manySelect = function(selector, scheduler) {
      isScheduler(scheduler) || (scheduler = immediateScheduler);
      var source = this;
      return observableDefer(function() {
        var chain;
        return source.map(function(x) {
          var curr = new ChainObservable(x);
          chain && chain.onNext(x);
          chain = curr;
          return curr;
        }).tap(noop, function(e) {
          chain && chain.onError(e);
        }, function() {
          chain && chain.onCompleted();
        }).observeOn(scheduler).map(selector);
      }, source);
    };
    var ChainObservable = (function(__super__) {
      function subscribe(observer) {
        var self = this,
            g = new CompositeDisposable();
        g.add(currentThreadScheduler.schedule(function() {
          observer.onNext(self.head);
          g.add(self.tail.mergeAll().subscribe(observer));
        }));
        return g;
      }
      inherits(ChainObservable, __super__);
      function ChainObservable(head) {
        __super__.call(this, subscribe);
        this.head = head;
        this.tail = new AsyncSubject();
      }
      addProperties(ChainObservable.prototype, Observer, {
        onCompleted: function() {
          this.onNext(Observable.empty());
        },
        onError: function(e) {
          this.onNext(Observable.throwError(e));
        },
        onNext: function(v) {
          this.tail.onNext(v);
          this.tail.onCompleted();
        }
      });
      return ChainObservable;
    }(Observable));
    observableProto.exclusive = function() {
      var sources = this;
      return new AnonymousObservable(function(observer) {
        var hasCurrent = false,
            isStopped = false,
            m = new SingleAssignmentDisposable(),
            g = new CompositeDisposable();
        g.add(m);
        m.setDisposable(sources.subscribe(function(innerSource) {
          if (!hasCurrent) {
            hasCurrent = true;
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
            var innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);
            innerSubscription.setDisposable(innerSource.subscribe(observer.onNext.bind(observer), observer.onError.bind(observer), function() {
              g.remove(innerSubscription);
              hasCurrent = false;
              if (isStopped && g.length === 1) {
                observer.onCompleted();
              }
            }));
          }
        }, observer.onError.bind(observer), function() {
          isStopped = true;
          if (!hasCurrent && g.length === 1) {
            observer.onCompleted();
          }
        }));
        return g;
      }, this);
    };
    observableProto.exclusiveMap = function(selector, thisArg) {
      var sources = this,
          selectorFunc = bindCallback(selector, thisArg, 3);
      return new AnonymousObservable(function(observer) {
        var index = 0,
            hasCurrent = false,
            isStopped = true,
            m = new SingleAssignmentDisposable(),
            g = new CompositeDisposable();
        g.add(m);
        m.setDisposable(sources.subscribe(function(innerSource) {
          if (!hasCurrent) {
            hasCurrent = true;
            innerSubscription = new SingleAssignmentDisposable();
            g.add(innerSubscription);
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
            innerSubscription.setDisposable(innerSource.subscribe(function(x) {
              var result;
              try {
                result = selectorFunc(x, index++, innerSource);
              } catch (e) {
                observer.onError(e);
                return ;
              }
              observer.onNext(result);
            }, function(e) {
              observer.onError(e);
            }, function() {
              g.remove(innerSubscription);
              hasCurrent = false;
              if (isStopped && g.length === 1) {
                observer.onCompleted();
              }
            }));
          }
        }, function(e) {
          observer.onError(e);
        }, function() {
          isStopped = true;
          if (g.length === 1 && !hasCurrent) {
            observer.onCompleted();
          }
        }));
        return g;
      }, this);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.joinpatterns", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableThrow = Observable.throwError,
        observerCreate = Rx.Observer.create,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        CompositeDisposable = Rx.CompositeDisposable,
        AbstractObserver = Rx.internals.AbstractObserver,
        noop = Rx.helpers.noop,
        defaultComparer = Rx.internals.isEqual,
        inherits = Rx.internals.inherits,
        Enumerable = Rx.internals.Enumerable,
        Enumerator = Rx.internals.Enumerator,
        $iterator$ = Rx.iterator,
        doneEnumerator = Rx.doneEnumerator;
    var Map = root.Map || (function() {
      function Map() {
        this._keys = [];
        this._values = [];
      }
      Map.prototype.get = function(key) {
        var i = this._keys.indexOf(key);
        return i !== -1 ? this._values[i] : undefined;
      };
      Map.prototype.set = function(key, value) {
        var i = this._keys.indexOf(key);
        i !== -1 && (this._values[i] = value);
        this._values[this._keys.push(key) - 1] = value;
      };
      Map.prototype.forEach = function(callback, thisArg) {
        for (var i = 0,
            len = this._keys.length; i < len; i++) {
          callback.call(thisArg, this._values[i], this._keys[i]);
        }
      };
      return Map;
    }());
    function Pattern(patterns) {
      this.patterns = patterns;
    }
    Pattern.prototype.and = function(other) {
      return new Pattern(this.patterns.concat(other));
    };
    Pattern.prototype.thenDo = function(selector) {
      return new Plan(this, selector);
    };
    function Plan(expression, selector) {
      this.expression = expression;
      this.selector = selector;
    }
    Plan.prototype.activate = function(externalSubscriptions, observer, deactivate) {
      var self = this;
      var joinObservers = [];
      for (var i = 0,
          len = this.expression.patterns.length; i < len; i++) {
        joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
      }
      var activePlan = new ActivePlan(joinObservers, function() {
        var result;
        try {
          result = self.selector.apply(self, arguments);
        } catch (e) {
          observer.onError(e);
          return ;
        }
        observer.onNext(result);
      }, function() {
        for (var j = 0,
            jlen = joinObservers.length; j < jlen; j++) {
          joinObservers[j].removeActivePlan(activePlan);
        }
        deactivate(activePlan);
      });
      for (i = 0, len = joinObservers.length; i < len; i++) {
        joinObservers[i].addActivePlan(activePlan);
      }
      return activePlan;
    };
    function planCreateObserver(externalSubscriptions, observable, onError) {
      var entry = externalSubscriptions.get(observable);
      if (!entry) {
        var observer = new JoinObserver(observable, onError);
        externalSubscriptions.set(observable, observer);
        return observer;
      }
      return entry;
    }
    function ActivePlan(joinObserverArray, onNext, onCompleted) {
      this.joinObserverArray = joinObserverArray;
      this.onNext = onNext;
      this.onCompleted = onCompleted;
      this.joinObservers = new Map();
      for (var i = 0,
          len = this.joinObserverArray.length; i < len; i++) {
        var joinObserver = this.joinObserverArray[i];
        this.joinObservers.set(joinObserver, joinObserver);
      }
    }
    ActivePlan.prototype.dequeue = function() {
      this.joinObservers.forEach(function(v) {
        v.queue.shift();
      });
    };
    ActivePlan.prototype.match = function() {
      var i,
          len,
          hasValues = true;
      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
        if (this.joinObserverArray[i].queue.length === 0) {
          hasValues = false;
          break;
        }
      }
      if (hasValues) {
        var firstValues = [],
            isCompleted = false;
        for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
          firstValues.push(this.joinObserverArray[i].queue[0]);
          this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
        }
        if (isCompleted) {
          this.onCompleted();
        } else {
          this.dequeue();
          var values = [];
          for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
            values.push(firstValues[i].value);
          }
          this.onNext.apply(this, values);
        }
      }
    };
    var JoinObserver = (function(__super__) {
      inherits(JoinObserver, __super__);
      function JoinObserver(source, onError) {
        __super__.call(this);
        this.source = source;
        this.onError = onError;
        this.queue = [];
        this.activePlans = [];
        this.subscription = new SingleAssignmentDisposable();
        this.isDisposed = false;
      }
      var JoinObserverPrototype = JoinObserver.prototype;
      JoinObserverPrototype.next = function(notification) {
        if (!this.isDisposed) {
          if (notification.kind === 'E') {
            return this.onError(notification.exception);
          }
          this.queue.push(notification);
          var activePlans = this.activePlans.slice(0);
          for (var i = 0,
              len = activePlans.length; i < len; i++) {
            activePlans[i].match();
          }
        }
      };
      JoinObserverPrototype.error = noop;
      JoinObserverPrototype.completed = noop;
      JoinObserverPrototype.addActivePlan = function(activePlan) {
        this.activePlans.push(activePlan);
      };
      JoinObserverPrototype.subscribe = function() {
        this.subscription.setDisposable(this.source.materialize().subscribe(this));
      };
      JoinObserverPrototype.removeActivePlan = function(activePlan) {
        this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
        this.activePlans.length === 0 && this.dispose();
      };
      JoinObserverPrototype.dispose = function() {
        __super__.prototype.dispose.call(this);
        if (!this.isDisposed) {
          this.isDisposed = true;
          this.subscription.dispose();
        }
      };
      return JoinObserver;
    }(AbstractObserver));
    observableProto.and = function(right) {
      return new Pattern([this, right]);
    };
    observableProto.thenDo = function(selector) {
      return new Pattern([this]).thenDo(selector);
    };
    Observable.when = function() {
      var len = arguments.length,
          plans;
      if (Array.isArray(arguments[0])) {
        plans = arguments[0];
      } else {
        plans = new Array(len);
        for (var i = 0; i < len; i++) {
          plans[i] = arguments[i];
        }
      }
      return new AnonymousObservable(function(o) {
        var activePlans = [],
            externalSubscriptions = new Map();
        var outObserver = observerCreate(function(x) {
          o.onNext(x);
        }, function(err) {
          externalSubscriptions.forEach(function(v) {
            v.onError(err);
          });
          o.onError(err);
        }, function(x) {
          o.onCompleted();
        });
        try {
          for (var i = 0,
              len = plans.length; i < len; i++) {
            activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function(activePlan) {
              var idx = activePlans.indexOf(activePlan);
              activePlans.splice(idx, 1);
              activePlans.length === 0 && o.onCompleted();
            }));
          }
        } catch (e) {
          observableThrow(e).subscribe(o);
        }
        var group = new CompositeDisposable();
        externalSubscriptions.forEach(function(joinObserver) {
          joinObserver.subscribe();
          group.add(joinObserver);
        });
        return group;
      });
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.sorting", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableNever = Observable.never,
        isEqual = Rx.internals.isEqual,
        defaultSubComparer = Rx.helpers.defaultSubComparer;
    observableProto.jortSort = function() {
      return this.jortSortUntil(observableNever());
    };
    observableProto.jortSortUntil = function(other) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var arr = [];
        return source.takeUntil(other).subscribe(arr.push.bind(arr), observer.onError.bind(observer), function() {
          var sorted = arr.slice(0).sort(defaultSubComparer);
          observer.onNext(isEqual(arr, sorted));
          observer.onCompleted();
        });
      }, source);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.virtualtime", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Scheduler = Rx.Scheduler,
        PriorityQueue = Rx.internals.PriorityQueue,
        ScheduledItem = Rx.internals.ScheduledItem,
        SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive,
        disposableEmpty = Rx.Disposable.empty,
        inherits = Rx.internals.inherits,
        defaultSubComparer = Rx.helpers.defaultSubComparer,
        notImplemented = Rx.helpers.notImplemented;
    Rx.VirtualTimeScheduler = (function(__super__) {
      function localNow() {
        return this.toDateTimeOffset(this.clock);
      }
      function scheduleNow(state, action) {
        return this.scheduleAbsoluteWithState(state, this.clock, action);
      }
      function scheduleRelative(state, dueTime, action) {
        return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
      }
      function scheduleAbsolute(state, dueTime, action) {
        return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
      }
      function invokeAction(scheduler, action) {
        action();
        return disposableEmpty;
      }
      inherits(VirtualTimeScheduler, __super__);
      function VirtualTimeScheduler(initialClock, comparer) {
        this.clock = initialClock;
        this.comparer = comparer;
        this.isEnabled = false;
        this.queue = new PriorityQueue(1024);
        __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
      }
      var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;
      VirtualTimeSchedulerPrototype.add = notImplemented;
      VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;
      VirtualTimeSchedulerPrototype.toRelative = notImplemented;
      VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function(state, period, action) {
        var s = new SchedulePeriodicRecursive(this, state, period, action);
        return s.start();
      };
      VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function(state, dueTime, action) {
        var runAt = this.add(this.clock, dueTime);
        return this.scheduleAbsoluteWithState(state, runAt, action);
      };
      VirtualTimeSchedulerPrototype.scheduleRelative = function(dueTime, action) {
        return this.scheduleRelativeWithState(action, dueTime, invokeAction);
      };
      VirtualTimeSchedulerPrototype.start = function() {
        if (!this.isEnabled) {
          this.isEnabled = true;
          do {
            var next = this.getNext();
            if (next !== null) {
              this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
              next.invoke();
            } else {
              this.isEnabled = false;
            }
          } while (this.isEnabled);
        }
      };
      VirtualTimeSchedulerPrototype.stop = function() {
        this.isEnabled = false;
      };
      VirtualTimeSchedulerPrototype.advanceTo = function(time) {
        var dueToClock = this.comparer(this.clock, time);
        if (this.comparer(this.clock, time) > 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (dueToClock === 0) {
          return ;
        }
        if (!this.isEnabled) {
          this.isEnabled = true;
          do {
            var next = this.getNext();
            if (next !== null && this.comparer(next.dueTime, time) <= 0) {
              this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
              next.invoke();
            } else {
              this.isEnabled = false;
            }
          } while (this.isEnabled);
          this.clock = time;
        }
      };
      VirtualTimeSchedulerPrototype.advanceBy = function(time) {
        var dt = this.add(this.clock, time),
            dueToClock = this.comparer(this.clock, dt);
        if (dueToClock > 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (dueToClock === 0) {
          return ;
        }
        this.advanceTo(dt);
      };
      VirtualTimeSchedulerPrototype.sleep = function(time) {
        var dt = this.add(this.clock, time);
        if (this.comparer(this.clock, dt) >= 0) {
          throw new ArgumentOutOfRangeError();
        }
        this.clock = dt;
      };
      VirtualTimeSchedulerPrototype.getNext = function() {
        while (this.queue.length > 0) {
          var next = this.queue.peek();
          if (next.isCancelled()) {
            this.queue.dequeue();
          } else {
            return next;
          }
        }
        return null;
      };
      VirtualTimeSchedulerPrototype.scheduleAbsolute = function(dueTime, action) {
        return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
      };
      VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function(state, dueTime, action) {
        var self = this;
        function run(scheduler, state1) {
          self.queue.remove(si);
          return action(scheduler, state1);
        }
        var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
        this.queue.enqueue(si);
        return si.disposable;
      };
      return VirtualTimeScheduler;
    }(Scheduler));
    Rx.HistoricalScheduler = (function(__super__) {
      inherits(HistoricalScheduler, __super__);
      function HistoricalScheduler(initialClock, comparer) {
        var clock = initialClock == null ? 0 : initialClock;
        var cmp = comparer || defaultSubComparer;
        __super__.call(this, clock, cmp);
      }
      var HistoricalSchedulerProto = HistoricalScheduler.prototype;
      HistoricalSchedulerProto.add = function(absolute, relative) {
        return absolute + relative;
      };
      HistoricalSchedulerProto.toDateTimeOffset = function(absolute) {
        return new Date(absolute).getTime();
      };
      HistoricalSchedulerProto.toRelative = function(timeSpan) {
        return timeSpan;
      };
      return HistoricalScheduler;
    }(Rx.VirtualTimeScheduler));
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.testing", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx.virtualtime", "exports"], function(Rx, exports) {
        root.Rx = factory(root, exports, Rx);
        return root.Rx;
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observer = Rx.Observer,
        Observable = Rx.Observable,
        Notification = Rx.Notification,
        VirtualTimeScheduler = Rx.VirtualTimeScheduler,
        Disposable = Rx.Disposable,
        disposableEmpty = Disposable.empty,
        disposableCreate = Disposable.create,
        CompositeDisposable = Rx.CompositeDisposable,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        inherits = Rx.internals.inherits,
        defaultComparer = Rx.internals.isEqual;
    function OnNextPredicate(predicate) {
      this.predicate = predicate;
    }
    ;
    OnNextPredicate.prototype.equals = function(other) {
      if (other === this) {
        return true;
      }
      if (other == null) {
        return false;
      }
      if (other.kind !== 'N') {
        return false;
      }
      return this.predicate(other.value);
    };
    function OnErrorPredicate(predicate) {
      this.predicate = predicate;
    }
    ;
    OnErrorPredicate.prototype.equals = function(other) {
      if (other === this) {
        return true;
      }
      if (other == null) {
        return false;
      }
      if (other.kind !== 'E') {
        return false;
      }
      return this.predicate(other.exception);
    };
    var ReactiveTest = Rx.ReactiveTest = {
      created: 100,
      subscribed: 200,
      disposed: 1000,
      onNext: function(ticks, value) {
        return typeof value === 'function' ? new Recorded(ticks, new OnNextPredicate(value)) : new Recorded(ticks, Notification.createOnNext(value));
      },
      onError: function(ticks, error) {
        return typeof error === 'function' ? new Recorded(ticks, new OnErrorPredicate(error)) : new Recorded(ticks, Notification.createOnError(error));
      },
      onCompleted: function(ticks) {
        return new Recorded(ticks, Notification.createOnCompleted());
      },
      subscribe: function(start, end) {
        return new Subscription(start, end);
      }
    };
    var Recorded = Rx.Recorded = function(time, value, comparer) {
      this.time = time;
      this.value = value;
      this.comparer = comparer || defaultComparer;
    };
    Recorded.prototype.equals = function(other) {
      return this.time === other.time && this.comparer(this.value, other.value);
    };
    Recorded.prototype.toString = function() {
      return this.value.toString() + '@' + this.time;
    };
    var Subscription = Rx.Subscription = function(start, end) {
      this.subscribe = start;
      this.unsubscribe = end || Number.MAX_VALUE;
    };
    Subscription.prototype.equals = function(other) {
      return this.subscribe === other.subscribe && this.unsubscribe === other.unsubscribe;
    };
    Subscription.prototype.toString = function() {
      return '(' + this.subscribe + ', ' + (this.unsubscribe === Number.MAX_VALUE ? 'Infinite' : this.unsubscribe) + ')';
    };
    var MockDisposable = Rx.MockDisposable = function(scheduler) {
      this.scheduler = scheduler;
      this.disposes = [];
      this.disposes.push(this.scheduler.clock);
    };
    MockDisposable.prototype.dispose = function() {
      this.disposes.push(this.scheduler.clock);
    };
    var MockObserver = (function(__super__) {
      inherits(MockObserver, __super__);
      function MockObserver(scheduler) {
        __super__.call(this);
        this.scheduler = scheduler;
        this.messages = [];
      }
      var MockObserverPrototype = MockObserver.prototype;
      MockObserverPrototype.onNext = function(value) {
        this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnNext(value)));
      };
      MockObserverPrototype.onError = function(exception) {
        this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnError(exception)));
      };
      MockObserverPrototype.onCompleted = function() {
        this.messages.push(new Recorded(this.scheduler.clock, Notification.createOnCompleted()));
      };
      return MockObserver;
    })(Observer);
    function MockPromise(scheduler, messages) {
      var self = this;
      this.scheduler = scheduler;
      this.messages = messages;
      this.subscriptions = [];
      this.observers = [];
      for (var i = 0,
          len = this.messages.length; i < len; i++) {
        var message = this.messages[i],
            notification = message.value;
        (function(innerNotification) {
          scheduler.scheduleAbsoluteWithState(null, message.time, function() {
            var obs = self.observers.slice(0);
            for (var j = 0,
                jLen = obs.length; j < jLen; j++) {
              innerNotification.accept(obs[j]);
            }
            return disposableEmpty;
          });
        })(notification);
      }
    }
    MockPromise.prototype.then = function(onResolved, onRejected) {
      var self = this;
      this.subscriptions.push(new Subscription(this.scheduler.clock));
      var index = this.subscriptions.length - 1;
      var newPromise;
      var observer = Rx.Observer.create(function(x) {
        var retValue = onResolved(x);
        if (retValue && typeof retValue.then === 'function') {
          newPromise = retValue;
        } else {
          var ticks = self.scheduler.clock;
          newPromise = new MockPromise(self.scheduler, [Rx.ReactiveTest.onNext(ticks, undefined), Rx.ReactiveTest.onCompleted(ticks)]);
        }
        var idx = self.observers.indexOf(observer);
        self.observers.splice(idx, 1);
        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
      }, function(err) {
        onRejected(err);
        var idx = self.observers.indexOf(observer);
        self.observers.splice(idx, 1);
        self.subscriptions[index] = new Subscription(self.subscriptions[index].subscribe, self.scheduler.clock);
      });
      this.observers.push(observer);
      return newPromise || new MockPromise(this.scheduler, this.messages);
    };
    var HotObservable = (function(__super__) {
      function subscribe(observer) {
        var observable = this;
        this.observers.push(observer);
        this.subscriptions.push(new Subscription(this.scheduler.clock));
        var index = this.subscriptions.length - 1;
        return disposableCreate(function() {
          var idx = observable.observers.indexOf(observer);
          observable.observers.splice(idx, 1);
          observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
        });
      }
      inherits(HotObservable, __super__);
      function HotObservable(scheduler, messages) {
        __super__.call(this, subscribe);
        var message,
            notification,
            observable = this;
        this.scheduler = scheduler;
        this.messages = messages;
        this.subscriptions = [];
        this.observers = [];
        for (var i = 0,
            len = this.messages.length; i < len; i++) {
          message = this.messages[i];
          notification = message.value;
          (function(innerNotification) {
            scheduler.scheduleAbsoluteWithState(null, message.time, function() {
              var obs = observable.observers.slice(0);
              for (var j = 0,
                  jLen = obs.length; j < jLen; j++) {
                innerNotification.accept(obs[j]);
              }
              return disposableEmpty;
            });
          })(notification);
        }
      }
      return HotObservable;
    })(Observable);
    var ColdObservable = (function(__super__) {
      function subscribe(observer) {
        var message,
            notification,
            observable = this;
        this.subscriptions.push(new Subscription(this.scheduler.clock));
        var index = this.subscriptions.length - 1;
        var d = new CompositeDisposable();
        for (var i = 0,
            len = this.messages.length; i < len; i++) {
          message = this.messages[i];
          notification = message.value;
          (function(innerNotification) {
            d.add(observable.scheduler.scheduleRelativeWithState(null, message.time, function() {
              innerNotification.accept(observer);
              return disposableEmpty;
            }));
          })(notification);
        }
        return disposableCreate(function() {
          observable.subscriptions[index] = new Subscription(observable.subscriptions[index].subscribe, observable.scheduler.clock);
          d.dispose();
        });
      }
      inherits(ColdObservable, __super__);
      function ColdObservable(scheduler, messages) {
        __super__.call(this, subscribe);
        this.scheduler = scheduler;
        this.messages = messages;
        this.subscriptions = [];
      }
      return ColdObservable;
    })(Observable);
    Rx.TestScheduler = (function(__super__) {
      inherits(TestScheduler, __super__);
      function baseComparer(x, y) {
        return x > y ? 1 : (x < y ? -1 : 0);
      }
      function TestScheduler() {
        __super__.call(this, 0, baseComparer);
      }
      TestScheduler.prototype.scheduleAbsoluteWithState = function(state, dueTime, action) {
        dueTime <= this.clock && (dueTime = this.clock + 1);
        return __super__.prototype.scheduleAbsoluteWithState.call(this, state, dueTime, action);
      };
      TestScheduler.prototype.add = function(absolute, relative) {
        return absolute + relative;
      };
      TestScheduler.prototype.toDateTimeOffset = function(absolute) {
        return new Date(absolute).getTime();
      };
      TestScheduler.prototype.toRelative = function(timeSpan) {
        return timeSpan;
      };
      TestScheduler.prototype.startWithTiming = function(create, created, subscribed, disposed) {
        var observer = this.createObserver(),
            source,
            subscription;
        this.scheduleAbsoluteWithState(null, created, function() {
          source = create();
          return disposableEmpty;
        });
        this.scheduleAbsoluteWithState(null, subscribed, function() {
          subscription = source.subscribe(observer);
          return disposableEmpty;
        });
        this.scheduleAbsoluteWithState(null, disposed, function() {
          subscription.dispose();
          return disposableEmpty;
        });
        this.start();
        return observer;
      };
      TestScheduler.prototype.startWithDispose = function(create, disposed) {
        return this.startWithTiming(create, ReactiveTest.created, ReactiveTest.subscribed, disposed);
      };
      TestScheduler.prototype.startWithCreate = function(create) {
        return this.startWithTiming(create, ReactiveTest.created, ReactiveTest.subscribed, ReactiveTest.disposed);
      };
      TestScheduler.prototype.createHotObservable = function() {
        var len = arguments.length,
            args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          args = new Array(len);
          for (var i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        return new HotObservable(this, args);
      };
      TestScheduler.prototype.createColdObservable = function() {
        var len = arguments.length,
            args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          args = new Array(len);
          for (var i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        return new ColdObservable(this, args);
      };
      TestScheduler.prototype.createResolvedPromise = function(ticks, value) {
        return new MockPromise(this, [Rx.ReactiveTest.onNext(ticks, value), Rx.ReactiveTest.onCompleted(ticks)]);
      };
      TestScheduler.prototype.createRejectedPromise = function(ticks, reason) {
        return new MockPromise(this, [Rx.ReactiveTest.onError(ticks, reason)]);
      };
      TestScheduler.prototype.createObserver = function() {
        return new MockObserver(this);
      };
      return TestScheduler;
    })(VirtualTimeScheduler);
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx.time", ["npm:rx@2.5.1/dist/rx"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  ;
  (function(factory) {
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };
    var root = (objectTypes[typeof window] && window) || this,
        freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
        freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
        moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
        freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }
    if (typeof define === 'function' && define.amd) {
      define(["rx"], function(Rx, exports) {
        return factory(root, exports, Rx);
      });
    } else if (typeof module === 'object' && module && module.exports === freeExports) {
      module.exports = factory(root, module.exports, require("npm:rx@2.5.1/dist/rx"));
    } else {
      root.Rx = factory(root, {}, root.Rx);
    }
  }.call(this, function(root, exp, Rx, undefined) {
    var Observable = Rx.Observable,
        observableProto = Observable.prototype,
        AnonymousObservable = Rx.AnonymousObservable,
        observableDefer = Observable.defer,
        observableEmpty = Observable.empty,
        observableNever = Observable.never,
        observableThrow = Observable.throwException,
        observableFromArray = Observable.fromArray,
        timeoutScheduler = Rx.Scheduler.timeout,
        SingleAssignmentDisposable = Rx.SingleAssignmentDisposable,
        SerialDisposable = Rx.SerialDisposable,
        CompositeDisposable = Rx.CompositeDisposable,
        RefCountDisposable = Rx.RefCountDisposable,
        Subject = Rx.Subject,
        addRef = Rx.internals.addRef,
        normalizeTime = Rx.Scheduler.normalize,
        helpers = Rx.helpers,
        isPromise = helpers.isPromise,
        isScheduler = helpers.isScheduler,
        observableFromPromise = Observable.fromPromise;
    function observableTimerDate(dueTime, scheduler) {
      return new AnonymousObservable(function(observer) {
        return scheduler.scheduleWithAbsolute(dueTime, function() {
          observer.onNext(0);
          observer.onCompleted();
        });
      });
    }
    function observableTimerDateAndPeriod(dueTime, period, scheduler) {
      return new AnonymousObservable(function(observer) {
        var d = dueTime,
            p = normalizeTime(period);
        return scheduler.scheduleRecursiveWithAbsoluteAndState(0, d, function(count, self) {
          if (p > 0) {
            var now = scheduler.now();
            d = d + p;
            d <= now && (d = now + p);
          }
          observer.onNext(count);
          self(count + 1, d);
        });
      });
    }
    function observableTimerTimeSpan(dueTime, scheduler) {
      return new AnonymousObservable(function(observer) {
        return scheduler.scheduleWithRelative(normalizeTime(dueTime), function() {
          observer.onNext(0);
          observer.onCompleted();
        });
      });
    }
    function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
      return dueTime === period ? new AnonymousObservable(function(observer) {
        return scheduler.schedulePeriodicWithState(0, period, function(count) {
          observer.onNext(count);
          return count + 1;
        });
      }) : observableDefer(function() {
        return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
      });
    }
    var observableinterval = Observable.interval = function(period, scheduler) {
      return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : timeoutScheduler);
    };
    var observableTimer = Observable.timer = function(dueTime, periodOrScheduler, scheduler) {
      var period;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      if (periodOrScheduler !== undefined && typeof periodOrScheduler === 'number') {
        period = periodOrScheduler;
      } else if (isScheduler(periodOrScheduler)) {
        scheduler = periodOrScheduler;
      }
      if (dueTime instanceof Date && period === undefined) {
        return observableTimerDate(dueTime.getTime(), scheduler);
      }
      if (dueTime instanceof Date && period !== undefined) {
        period = periodOrScheduler;
        return observableTimerDateAndPeriod(dueTime.getTime(), period, scheduler);
      }
      return period === undefined ? observableTimerTimeSpan(dueTime, scheduler) : observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
    };
    function observableDelayTimeSpan(source, dueTime, scheduler) {
      return new AnonymousObservable(function(observer) {
        var active = false,
            cancelable = new SerialDisposable(),
            exception = null,
            q = [],
            running = false,
            subscription;
        subscription = source.materialize().timestamp(scheduler).subscribe(function(notification) {
          var d,
              shouldRun;
          if (notification.value.kind === 'E') {
            q = [];
            q.push(notification);
            exception = notification.value.exception;
            shouldRun = !running;
          } else {
            q.push({
              value: notification.value,
              timestamp: notification.timestamp + dueTime
            });
            shouldRun = !active;
            active = true;
          }
          if (shouldRun) {
            if (exception !== null) {
              observer.onError(exception);
            } else {
              d = new SingleAssignmentDisposable();
              cancelable.setDisposable(d);
              d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function(self) {
                var e,
                    recurseDueTime,
                    result,
                    shouldRecurse;
                if (exception !== null) {
                  return ;
                }
                running = true;
                do {
                  result = null;
                  if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
                    result = q.shift().value;
                  }
                  if (result !== null) {
                    result.accept(observer);
                  }
                } while (result !== null);
                shouldRecurse = false;
                recurseDueTime = 0;
                if (q.length > 0) {
                  shouldRecurse = true;
                  recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
                } else {
                  active = false;
                }
                e = exception;
                running = false;
                if (e !== null) {
                  observer.onError(e);
                } else if (shouldRecurse) {
                  self(recurseDueTime);
                }
              }));
            }
          }
        });
        return new CompositeDisposable(subscription, cancelable);
      }, source);
    }
    function observableDelayDate(source, dueTime, scheduler) {
      return observableDefer(function() {
        return observableDelayTimeSpan(source, dueTime - scheduler.now(), scheduler);
      });
    }
    observableProto.delay = function(dueTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return dueTime instanceof Date ? observableDelayDate(this, dueTime.getTime(), scheduler) : observableDelayTimeSpan(this, dueTime, scheduler);
    };
    observableProto.debounce = observableProto.throttleWithTimeout = function(dueTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this;
      return new AnonymousObservable(function(observer) {
        var cancelable = new SerialDisposable(),
            hasvalue = false,
            value,
            id = 0;
        var subscription = source.subscribe(function(x) {
          hasvalue = true;
          value = x;
          id++;
          var currentId = id,
              d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(scheduler.scheduleWithRelative(dueTime, function() {
            hasvalue && id === currentId && observer.onNext(value);
            hasvalue = false;
          }));
        }, function(e) {
          cancelable.dispose();
          observer.onError(e);
          hasvalue = false;
          id++;
        }, function() {
          cancelable.dispose();
          hasvalue && observer.onNext(value);
          observer.onCompleted();
          hasvalue = false;
          id++;
        });
        return new CompositeDisposable(subscription, cancelable);
      }, this);
    };
    observableProto.throttle = function(dueTime, scheduler) {
      return this.debounce(dueTime, scheduler);
    };
    observableProto.windowWithTime = function(timeSpan, timeShiftOrScheduler, scheduler) {
      var source = this,
          timeShift;
      timeShiftOrScheduler == null && (timeShift = timeSpan);
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      if (typeof timeShiftOrScheduler === 'number') {
        timeShift = timeShiftOrScheduler;
      } else if (isScheduler(timeShiftOrScheduler)) {
        timeShift = timeSpan;
        scheduler = timeShiftOrScheduler;
      }
      return new AnonymousObservable(function(observer) {
        var groupDisposable,
            nextShift = timeShift,
            nextSpan = timeSpan,
            q = [],
            refCountDisposable,
            timerD = new SerialDisposable(),
            totalTime = 0;
        groupDisposable = new CompositeDisposable(timerD), refCountDisposable = new RefCountDisposable(groupDisposable);
        function createTimer() {
          var m = new SingleAssignmentDisposable(),
              isSpan = false,
              isShift = false;
          timerD.setDisposable(m);
          if (nextSpan === nextShift) {
            isSpan = true;
            isShift = true;
          } else if (nextSpan < nextShift) {
            isSpan = true;
          } else {
            isShift = true;
          }
          var newTotalTime = isSpan ? nextSpan : nextShift,
              ts = newTotalTime - totalTime;
          totalTime = newTotalTime;
          if (isSpan) {
            nextSpan += timeShift;
          }
          if (isShift) {
            nextShift += timeShift;
          }
          m.setDisposable(scheduler.scheduleWithRelative(ts, function() {
            if (isShift) {
              var s = new Subject();
              q.push(s);
              observer.onNext(addRef(s, refCountDisposable));
            }
            isSpan && q.shift().onCompleted();
            createTimer();
          }));
        }
        ;
        q.push(new Subject());
        observer.onNext(addRef(q[0], refCountDisposable));
        createTimer();
        groupDisposable.add(source.subscribe(function(x) {
          for (var i = 0,
              len = q.length; i < len; i++) {
            q[i].onNext(x);
          }
        }, function(e) {
          for (var i = 0,
              len = q.length; i < len; i++) {
            q[i].onError(e);
          }
          observer.onError(e);
        }, function() {
          for (var i = 0,
              len = q.length; i < len; i++) {
            q[i].onCompleted();
          }
          observer.onCompleted();
        }));
        return refCountDisposable;
      }, source);
    };
    observableProto.windowWithTimeOrCount = function(timeSpan, count, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var timerD = new SerialDisposable(),
            groupDisposable = new CompositeDisposable(timerD),
            refCountDisposable = new RefCountDisposable(groupDisposable),
            n = 0,
            windowId = 0,
            s = new Subject();
        function createTimer(id) {
          var m = new SingleAssignmentDisposable();
          timerD.setDisposable(m);
          m.setDisposable(scheduler.scheduleWithRelative(timeSpan, function() {
            if (id !== windowId) {
              return ;
            }
            n = 0;
            var newId = ++windowId;
            s.onCompleted();
            s = new Subject();
            observer.onNext(addRef(s, refCountDisposable));
            createTimer(newId);
          }));
        }
        observer.onNext(addRef(s, refCountDisposable));
        createTimer(0);
        groupDisposable.add(source.subscribe(function(x) {
          var newId = 0,
              newWindow = false;
          s.onNext(x);
          if (++n === count) {
            newWindow = true;
            n = 0;
            newId = ++windowId;
            s.onCompleted();
            s = new Subject();
            observer.onNext(addRef(s, refCountDisposable));
          }
          newWindow && createTimer(newId);
        }, function(e) {
          s.onError(e);
          observer.onError(e);
        }, function() {
          s.onCompleted();
          observer.onCompleted();
        }));
        return refCountDisposable;
      }, source);
    };
    observableProto.bufferWithTime = function(timeSpan, timeShiftOrScheduler, scheduler) {
      return this.windowWithTime.apply(this, arguments).selectMany(function(x) {
        return x.toArray();
      });
    };
    observableProto.bufferWithTimeOrCount = function(timeSpan, count, scheduler) {
      return this.windowWithTimeOrCount(timeSpan, count, scheduler).selectMany(function(x) {
        return x.toArray();
      });
    };
    observableProto.timeInterval = function(scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return observableDefer(function() {
        var last = scheduler.now();
        return source.map(function(x) {
          var now = scheduler.now(),
              span = now - last;
          last = now;
          return {
            value: x,
            interval: span
          };
        });
      });
    };
    observableProto.timestamp = function(scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return this.map(function(x) {
        return {
          value: x,
          timestamp: scheduler.now()
        };
      });
    };
    function sampleObservable(source, sampler) {
      return new AnonymousObservable(function(observer) {
        var atEnd,
            value,
            hasValue;
        function sampleSubscribe() {
          if (hasValue) {
            hasValue = false;
            observer.onNext(value);
          }
          atEnd && observer.onCompleted();
        }
        return new CompositeDisposable(source.subscribe(function(newValue) {
          hasValue = true;
          value = newValue;
        }, observer.onError.bind(observer), function() {
          atEnd = true;
        }), sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe));
      }, source);
    }
    observableProto.sample = observableProto.throttleLatest = function(intervalOrSampler, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return typeof intervalOrSampler === 'number' ? sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) : sampleObservable(this, intervalOrSampler);
    };
    observableProto.timeout = function(dueTime, other, scheduler) {
      (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this,
          schedulerMethod = dueTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
      return new AnonymousObservable(function(observer) {
        var id = 0,
            original = new SingleAssignmentDisposable(),
            subscription = new SerialDisposable(),
            switched = false,
            timer = new SerialDisposable();
        subscription.setDisposable(original);
        function createTimer() {
          var myId = id;
          timer.setDisposable(scheduler[schedulerMethod](dueTime, function() {
            if (id === myId) {
              isPromise(other) && (other = observableFromPromise(other));
              subscription.setDisposable(other.subscribe(observer));
            }
          }));
        }
        createTimer();
        original.setDisposable(source.subscribe(function(x) {
          if (!switched) {
            id++;
            observer.onNext(x);
            createTimer();
          }
        }, function(e) {
          if (!switched) {
            id++;
            observer.onError(e);
          }
        }, function() {
          if (!switched) {
            id++;
            observer.onCompleted();
          }
        }));
        return new CompositeDisposable(subscription, timer);
      }, source);
    };
    Observable.generateWithAbsoluteTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var first = true,
            hasResult = false,
            result,
            state = initialState,
            time;
        return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(), function(self) {
          hasResult && observer.onNext(result);
          try {
            if (first) {
              first = false;
            } else {
              state = iterate(state);
            }
            hasResult = condition(state);
            if (hasResult) {
              result = resultSelector(state);
              time = timeSelector(state);
            }
          } catch (e) {
            observer.onError(e);
            return ;
          }
          if (hasResult) {
            self(time);
          } else {
            observer.onCompleted();
          }
        });
      });
    };
    Observable.generateWithRelativeTime = function(initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var first = true,
            hasResult = false,
            result,
            state = initialState,
            time;
        return scheduler.scheduleRecursiveWithRelative(0, function(self) {
          hasResult && observer.onNext(result);
          try {
            if (first) {
              first = false;
            } else {
              state = iterate(state);
            }
            hasResult = condition(state);
            if (hasResult) {
              result = resultSelector(state);
              time = timeSelector(state);
            }
          } catch (e) {
            observer.onError(e);
            return ;
          }
          if (hasResult) {
            self(time);
          } else {
            observer.onCompleted();
          }
        });
      });
    };
    observableProto.delaySubscription = function(dueTime, scheduler) {
      return this.delayWithSelector(observableTimer(dueTime, isScheduler(scheduler) ? scheduler : timeoutScheduler), observableEmpty);
    };
    observableProto.delayWithSelector = function(subscriptionDelay, delayDurationSelector) {
      var source = this,
          subDelay,
          selector;
      if (typeof subscriptionDelay === 'function') {
        selector = subscriptionDelay;
      } else {
        subDelay = subscriptionDelay;
        selector = delayDurationSelector;
      }
      return new AnonymousObservable(function(observer) {
        var delays = new CompositeDisposable(),
            atEnd = false,
            done = function() {
              if (atEnd && delays.length === 0) {
                observer.onCompleted();
              }
            },
            subscription = new SerialDisposable(),
            start = function() {
              subscription.setDisposable(source.subscribe(function(x) {
                var delay;
                try {
                  delay = selector(x);
                } catch (error) {
                  observer.onError(error);
                  return ;
                }
                var d = new SingleAssignmentDisposable();
                delays.add(d);
                d.setDisposable(delay.subscribe(function() {
                  observer.onNext(x);
                  delays.remove(d);
                  done();
                }, observer.onError.bind(observer), function() {
                  observer.onNext(x);
                  delays.remove(d);
                  done();
                }));
              }, observer.onError.bind(observer), function() {
                atEnd = true;
                subscription.dispose();
                done();
              }));
            };
        if (!subDelay) {
          start();
        } else {
          subscription.setDisposable(subDelay.subscribe(start, observer.onError.bind(observer), start));
        }
        return new CompositeDisposable(subscription, delays);
      }, this);
    };
    observableProto.timeoutWithSelector = function(firstTimeout, timeoutdurationSelector, other) {
      if (arguments.length === 1) {
        timeoutdurationSelector = firstTimeout;
        firstTimeout = observableNever();
      }
      other || (other = observableThrow(new Error('Timeout')));
      var source = this;
      return new AnonymousObservable(function(observer) {
        var subscription = new SerialDisposable(),
            timer = new SerialDisposable(),
            original = new SingleAssignmentDisposable();
        subscription.setDisposable(original);
        var id = 0,
            switched = false;
        function setTimer(timeout) {
          var myId = id;
          function timerWins() {
            return id === myId;
          }
          var d = new SingleAssignmentDisposable();
          timer.setDisposable(d);
          d.setDisposable(timeout.subscribe(function() {
            timerWins() && subscription.setDisposable(other.subscribe(observer));
            d.dispose();
          }, function(e) {
            timerWins() && observer.onError(e);
          }, function() {
            timerWins() && subscription.setDisposable(other.subscribe(observer));
          }));
        }
        ;
        setTimer(firstTimeout);
        function observerWins() {
          var res = !switched;
          if (res) {
            id++;
          }
          return res;
        }
        original.setDisposable(source.subscribe(function(x) {
          if (observerWins()) {
            observer.onNext(x);
            var timeout;
            try {
              timeout = timeoutdurationSelector(x);
            } catch (e) {
              observer.onError(e);
              return ;
            }
            setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
          }
        }, function(e) {
          observerWins() && observer.onError(e);
        }, function() {
          observerWins() && observer.onCompleted();
        }));
        return new CompositeDisposable(subscription, timer);
      }, source);
    };
    observableProto.debounceWithSelector = function(durationSelector) {
      var source = this;
      return new AnonymousObservable(function(observer) {
        var value,
            hasValue = false,
            cancelable = new SerialDisposable(),
            id = 0;
        var subscription = source.subscribe(function(x) {
          var throttle;
          try {
            throttle = durationSelector(x);
          } catch (e) {
            observer.onError(e);
            return ;
          }
          isPromise(throttle) && (throttle = observableFromPromise(throttle));
          hasValue = true;
          value = x;
          id++;
          var currentid = id,
              d = new SingleAssignmentDisposable();
          cancelable.setDisposable(d);
          d.setDisposable(throttle.subscribe(function() {
            hasValue && id === currentid && observer.onNext(value);
            hasValue = false;
            d.dispose();
          }, observer.onError.bind(observer), function() {
            hasValue && id === currentid && observer.onNext(value);
            hasValue = false;
            d.dispose();
          }));
        }, function(e) {
          cancelable.dispose();
          observer.onError(e);
          hasValue = false;
          id++;
        }, function() {
          cancelable.dispose();
          hasValue && observer.onNext(value);
          observer.onCompleted();
          hasValue = false;
          id++;
        });
        return new CompositeDisposable(subscription, cancelable);
      }, source);
    };
    observableProto.throttleWithSelector = function(durationSelector) {
      return this.debounceWithSelector(durationSelector);
    };
    observableProto.skipLastWithTime = function(duration, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this;
      return new AnonymousObservable(function(o) {
        var q = [];
        return source.subscribe(function(x) {
          var now = scheduler.now();
          q.push({
            interval: now,
            value: x
          });
          while (q.length > 0 && now - q[0].interval >= duration) {
            o.onNext(q.shift().value);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          var now = scheduler.now();
          while (q.length > 0 && now - q[0].interval >= duration) {
            o.onNext(q.shift().value);
          }
          o.onCompleted();
        });
      }, source);
    };
    observableProto.takeLastWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(o) {
        var q = [];
        return source.subscribe(function(x) {
          var now = scheduler.now();
          q.push({
            interval: now,
            value: x
          });
          while (q.length > 0 && now - q[0].interval >= duration) {
            q.shift();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          var now = scheduler.now();
          while (q.length > 0) {
            var next = q.shift();
            if (now - next.interval <= duration) {
              o.onNext(next.value);
            }
          }
          o.onCompleted();
        });
      }, source);
    };
    observableProto.takeLastBufferWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(o) {
        var q = [];
        return source.subscribe(function(x) {
          var now = scheduler.now();
          q.push({
            interval: now,
            value: x
          });
          while (q.length > 0 && now - q[0].interval >= duration) {
            q.shift();
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          var now = scheduler.now(),
              res = [];
          while (q.length > 0) {
            var next = q.shift();
            now - next.interval <= duration && res.push(next.value);
          }
          o.onNext(res);
          o.onCompleted();
        });
      }, source);
    };
    observableProto.takeWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(o) {
        return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function() {
          o.onCompleted();
        }), source.subscribe(o));
      }, source);
    };
    observableProto.skipWithTime = function(duration, scheduler) {
      var source = this;
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      return new AnonymousObservable(function(observer) {
        var open = false;
        return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function() {
          open = true;
        }), source.subscribe(function(x) {
          open && observer.onNext(x);
        }, observer.onError.bind(observer), observer.onCompleted.bind(observer)));
      }, source);
    };
    observableProto.skipUntilWithTime = function(startTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this,
          schedulerMethod = startTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
      return new AnonymousObservable(function(o) {
        var open = false;
        return new CompositeDisposable(scheduler[schedulerMethod](startTime, function() {
          open = true;
        }), source.subscribe(function(x) {
          open && o.onNext(x);
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onCompleted();
        }));
      }, source);
    };
    observableProto.takeUntilWithTime = function(endTime, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var source = this,
          schedulerMethod = endTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
      return new AnonymousObservable(function(o) {
        return new CompositeDisposable(scheduler[schedulerMethod](endTime, function() {
          o.onCompleted();
        }), source.subscribe(o));
      }, source);
    };
    observableProto.throttleFirst = function(windowDuration, scheduler) {
      isScheduler(scheduler) || (scheduler = timeoutScheduler);
      var duration = +windowDuration || 0;
      if (duration <= 0) {
        throw new RangeError('windowDuration cannot be less or equal zero.');
      }
      var source = this;
      return new AnonymousObservable(function(o) {
        var lastOnNext = 0;
        return source.subscribe(function(x) {
          var now = scheduler.now();
          if (lastOnNext === 0 || now - lastOnNext >= duration) {
            lastOnNext = now;
            o.onNext(x);
          }
        }, function(e) {
          o.onError(e);
        }, function() {
          o.onCompleted();
        });
      }, source);
    };
    return Rx;
  }));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/promise_pipe", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  var PromisePipe = (function() {
    function PromisePipe(_ref) {
      this._ref = _ref;
      this._latestValue = null;
      this._latestReturnedValue = null;
    }
    PromisePipe.prototype.supports = function(promise) {
      return lang_1.isPromise(promise);
    };
    PromisePipe.prototype.onDestroy = function() {
      if (lang_1.isPresent(this._sourcePromise)) {
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._sourcePromise = null;
      }
    };
    PromisePipe.prototype.transform = function(promise) {
      var _this = this;
      if (lang_1.isBlank(this._sourcePromise)) {
        this._sourcePromise = promise;
        promise.then(function(val) {
          if (_this._sourcePromise === promise) {
            _this._updateLatestValue(val);
          }
        });
        return null;
      }
      if (promise !== this._sourcePromise) {
        this._sourcePromise = null;
        return this.transform(promise);
      }
      if (this._latestValue === this._latestReturnedValue) {
        return this._latestReturnedValue;
      } else {
        this._latestReturnedValue = this._latestValue;
        return pipe_1.WrappedValue.wrap(this._latestValue);
      }
    };
    PromisePipe.prototype._updateLatestValue = function(value) {
      this._latestValue = value;
      this._ref.requestCheck();
    };
    return PromisePipe;
  })();
  exports.PromisePipe = PromisePipe;
  var PromisePipeFactory = (function() {
    function PromisePipeFactory() {}
    PromisePipeFactory.prototype.supports = function(promise) {
      return lang_1.isPromise(promise);
    };
    PromisePipeFactory.prototype.create = function(cdRef) {
      return new PromisePipe(cdRef);
    };
    return PromisePipeFactory;
  })();
  exports.PromisePipeFactory = PromisePipeFactory;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/uppercase_pipe", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var UpperCasePipe = (function() {
    function UpperCasePipe() {
      this._latestValue = null;
    }
    UpperCasePipe.prototype.supports = function(str) {
      return lang_1.isString(str);
    };
    UpperCasePipe.prototype.onDestroy = function() {
      this._latestValue = null;
    };
    UpperCasePipe.prototype.transform = function(value) {
      if (this._latestValue !== value) {
        this._latestValue = value;
        return lang_1.StringWrapper.toUpperCase(value);
      } else {
        return this._latestValue;
      }
    };
    return UpperCasePipe;
  })();
  exports.UpperCasePipe = UpperCasePipe;
  var UpperCaseFactory = (function() {
    function UpperCaseFactory() {}
    UpperCaseFactory.prototype.supports = function(str) {
      return lang_1.isString(str);
    };
    UpperCaseFactory.prototype.create = function() {
      return new UpperCasePipe();
    };
    return UpperCaseFactory;
  })();
  exports.UpperCaseFactory = UpperCaseFactory;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/lowercase_pipe", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var LowerCasePipe = (function() {
    function LowerCasePipe() {
      this._latestValue = null;
    }
    LowerCasePipe.prototype.supports = function(str) {
      return lang_1.isString(str);
    };
    LowerCasePipe.prototype.onDestroy = function() {
      this._latestValue = null;
    };
    LowerCasePipe.prototype.transform = function(value) {
      if (this._latestValue !== value) {
        this._latestValue = value;
        return lang_1.StringWrapper.toLowerCase(value);
      } else {
        return this._latestValue;
      }
    };
    return LowerCasePipe;
  })();
  exports.LowerCasePipe = LowerCasePipe;
  var LowerCaseFactory = (function() {
    function LowerCaseFactory() {}
    LowerCaseFactory.prototype.supports = function(str) {
      return lang_1.isString(str);
    };
    LowerCaseFactory.prototype.create = function() {
      return new LowerCasePipe();
    };
    return LowerCaseFactory;
  })();
  exports.LowerCaseFactory = LowerCaseFactory;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/json_pipe", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  var JsonPipe = (function(_super) {
    __extends(JsonPipe, _super);
    function JsonPipe() {
      _super.apply(this, arguments);
    }
    JsonPipe.prototype.transform = function(value) {
      return lang_1.Json.stringify(value);
    };
    JsonPipe.prototype.create = function(cdRef) {
      return this;
    };
    return JsonPipe;
  })(pipe_1.BasePipe);
  exports.JsonPipe = JsonPipe;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/forward_ref", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  function forwardRef(forwardRefFn) {
    forwardRefFn.__forward_ref__ = forwardRef;
    forwardRefFn.toString = function() {
      return lang_1.stringify(this());
    };
    return forwardRefFn;
  }
  exports.forwardRef = forwardRef;
  function resolveForwardRef(type) {
    if (lang_1.isFunction(type) && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
      return type();
    } else {
      return type;
    }
  }
  exports.resolveForwardRef = resolveForwardRef;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/type_literal", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var TypeLiteral = (function() {
    function TypeLiteral() {}
    Object.defineProperty(TypeLiteral.prototype, "type", {
      get: function() {
        throw new Error("Type literals are only supported in Dart");
      },
      enumerable: true,
      configurable: true
    });
    return TypeLiteral;
  })();
  exports.TypeLiteral = TypeLiteral;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/exceptions", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  function findFirstClosedCycle(keys) {
    var res = [];
    for (var i = 0; i < keys.length; ++i) {
      if (collection_1.ListWrapper.contains(res, keys[i])) {
        res.push(keys[i]);
        return res;
      } else {
        res.push(keys[i]);
      }
    }
    return res;
  }
  function constructResolvingPath(keys) {
    if (keys.length > 1) {
      var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
      var tokenStrs = collection_1.ListWrapper.map(reversed, function(k) {
        return lang_1.stringify(k.token);
      });
      return " (" + tokenStrs.join(' -> ') + ")";
    } else {
      return "";
    }
  }
  var AbstractBindingError = (function(_super) {
    __extends(AbstractBindingError, _super);
    function AbstractBindingError(key, constructResolvingMessage) {
      _super.call(this);
      this.keys = [key];
      this.constructResolvingMessage = constructResolvingMessage;
      this.message = this.constructResolvingMessage(this.keys);
    }
    AbstractBindingError.prototype.addKey = function(key) {
      this.keys.push(key);
      this.message = this.constructResolvingMessage(this.keys);
    };
    AbstractBindingError.prototype.toString = function() {
      return this.message;
    };
    return AbstractBindingError;
  })(lang_1.BaseException);
  exports.AbstractBindingError = AbstractBindingError;
  var NoBindingError = (function(_super) {
    __extends(NoBindingError, _super);
    function NoBindingError(key) {
      _super.call(this, key, function(keys) {
        var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
        return "No provider for " + first + "!" + constructResolvingPath(keys);
      });
    }
    return NoBindingError;
  })(AbstractBindingError);
  exports.NoBindingError = NoBindingError;
  var AsyncBindingError = (function(_super) {
    __extends(AsyncBindingError, _super);
    function AsyncBindingError(key) {
      _super.call(this, key, function(keys) {
        var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
        return "Cannot instantiate " + first + " synchronously. It is provided as a promise!" + constructResolvingPath(keys);
      });
    }
    return AsyncBindingError;
  })(AbstractBindingError);
  exports.AsyncBindingError = AsyncBindingError;
  var CyclicDependencyError = (function(_super) {
    __extends(CyclicDependencyError, _super);
    function CyclicDependencyError(key) {
      _super.call(this, key, function(keys) {
        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
      });
    }
    return CyclicDependencyError;
  })(AbstractBindingError);
  exports.CyclicDependencyError = CyclicDependencyError;
  var InstantiationError = (function(_super) {
    __extends(InstantiationError, _super);
    function InstantiationError(cause, key) {
      _super.call(this, key, function(keys) {
        var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
        return "Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ". ORIGINAL ERROR: " + cause;
      });
      this.cause = cause;
      this.causeKey = key;
    }
    return InstantiationError;
  })(AbstractBindingError);
  exports.InstantiationError = InstantiationError;
  var InvalidBindingError = (function(_super) {
    __extends(InvalidBindingError, _super);
    function InvalidBindingError(binding) {
      _super.call(this);
      this.message = "Invalid binding - only instances of Binding and Type are allowed, got: " + binding.toString();
    }
    InvalidBindingError.prototype.toString = function() {
      return this.message;
    };
    return InvalidBindingError;
  })(lang_1.BaseException);
  exports.InvalidBindingError = InvalidBindingError;
  var NoAnnotationError = (function(_super) {
    __extends(NoAnnotationError, _super);
    function NoAnnotationError(typeOrFunc, params) {
      _super.call(this);
      var signature = [];
      for (var i = 0,
          ii = params.length; i < ii; i++) {
        var parameter = params[i];
        if (lang_1.isBlank(parameter) || parameter.length == 0) {
          signature.push('?');
        } else {
          signature.push(collection_1.ListWrapper.map(parameter, lang_1.stringify).join(' '));
        }
      }
      this.message = "Cannot resolve all parameters for " + lang_1.stringify(typeOrFunc) + "(" + signature.join(', ') + "). " + 'Make sure they all have valid type or annotations.';
    }
    NoAnnotationError.prototype.toString = function() {
      return this.message;
    };
    return NoAnnotationError;
  })(lang_1.BaseException);
  exports.NoAnnotationError = NoAnnotationError;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/opaque_token", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var OpaqueToken = (function() {
    function OpaqueToken(desc) {
      this._desc = 'Token(' + desc + ')';
    }
    OpaqueToken.prototype.toString = function() {
      return this._desc;
    };
    OpaqueToken = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [String])], OpaqueToken);
    return OpaqueToken;
  })();
  exports.OpaqueToken = OpaqueToken;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/visibility", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/di/annotations_impl"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var annotations_impl_1 = require("npm:angular2@2.0.0-alpha.28/src/di/annotations_impl");
  var Visibility = (function(_super) {
    __extends(Visibility, _super);
    function Visibility(depth, crossComponentBoundaries, _includeSelf) {
      _super.call(this);
      this.depth = depth;
      this.crossComponentBoundaries = crossComponentBoundaries;
      this._includeSelf = _includeSelf;
    }
    Object.defineProperty(Visibility.prototype, "includeSelf", {
      get: function() {
        return lang_1.isBlank(this._includeSelf) ? false : this._includeSelf;
      },
      enumerable: true,
      configurable: true
    });
    Visibility.prototype.toString = function() {
      return "@Visibility(depth: " + this.depth + ", crossComponentBoundaries: " + this.crossComponentBoundaries + ", includeSelf: " + this.includeSelf + "})";
    };
    Visibility = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Number, Boolean, Boolean])], Visibility);
    return Visibility;
  })(annotations_impl_1.DependencyAnnotation);
  exports.Visibility = Visibility;
  var Self = (function(_super) {
    __extends(Self, _super);
    function Self() {
      _super.call(this, 0, false, true);
    }
    Self.prototype.toString = function() {
      return "@Self()";
    };
    Self = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], Self);
    return Self;
  })(Visibility);
  exports.Self = Self;
  exports.self = new Self();
  var Parent = (function(_super) {
    __extends(Parent, _super);
    function Parent(_a) {
      var self = (_a === void 0 ? {} : _a).self;
      _super.call(this, 1, false, self);
    }
    Parent.prototype.toString = function() {
      return "@Parent(self: " + this.includeSelf + "})";
    };
    Parent = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], Parent);
    return Parent;
  })(Visibility);
  exports.Parent = Parent;
  var Ancestor = (function(_super) {
    __extends(Ancestor, _super);
    function Ancestor(_a) {
      var self = (_a === void 0 ? {} : _a).self;
      _super.call(this, 999999, false, self);
    }
    Ancestor.prototype.toString = function() {
      return "@Ancestor(self: " + this.includeSelf + "})";
    };
    Ancestor = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], Ancestor);
    return Ancestor;
  })(Visibility);
  exports.Ancestor = Ancestor;
  var Unbounded = (function(_super) {
    __extends(Unbounded, _super);
    function Unbounded(_a) {
      var self = (_a === void 0 ? {} : _a).self;
      _super.call(this, 999999, true, self);
    }
    Unbounded.prototype.toString = function() {
      return "@Unbounded(self: " + this.includeSelf + "})";
    };
    Unbounded = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], Unbounded);
    return Unbounded;
  })(Visibility);
  exports.Unbounded = Unbounded;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/view", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var View = (function() {
    function View(_a) {
      var _b = _a === void 0 ? {} : _a,
          templateUrl = _b.templateUrl,
          template = _b.template,
          directives = _b.directives,
          renderer = _b.renderer,
          styles = _b.styles,
          styleUrls = _b.styleUrls;
      this.templateUrl = templateUrl;
      this.template = template;
      this.styleUrls = styleUrls;
      this.styles = styles;
      this.directives = directives;
      this.renderer = renderer;
    }
    View = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], View);
    return View;
  })();
  exports.View = View;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  exports.DOM;
  function setRootDomAdapter(adapter) {
    if (lang_1.isBlank(exports.DOM)) {
      exports.DOM = adapter;
    }
  }
  exports.setRootDomAdapter = setRootDomAdapter;
  function _abstract() {
    return new lang_1.BaseException('This method is abstract');
  }
  var DomAdapter = (function() {
    function DomAdapter() {}
    DomAdapter.prototype.hasProperty = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.setProperty = function(el, name, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getProperty = function(el, name) {
      throw _abstract();
    };
    DomAdapter.prototype.invoke = function(el, methodName, args) {
      throw _abstract();
    };
    DomAdapter.prototype.logError = function(error) {
      throw _abstract();
    };
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
      get: function() {
        throw _abstract();
      },
      enumerable: true,
      configurable: true
    });
    DomAdapter.prototype.parse = function(templateHtml) {
      throw _abstract();
    };
    DomAdapter.prototype.query = function(selector) {
      throw _abstract();
    };
    DomAdapter.prototype.querySelector = function(el, selector) {
      throw _abstract();
    };
    DomAdapter.prototype.querySelectorAll = function(el, selector) {
      throw _abstract();
    };
    DomAdapter.prototype.on = function(el, evt, listener) {
      throw _abstract();
    };
    DomAdapter.prototype.onAndCancel = function(el, evt, listener) {
      throw _abstract();
    };
    DomAdapter.prototype.dispatchEvent = function(el, evt) {
      throw _abstract();
    };
    DomAdapter.prototype.createMouseEvent = function(eventType) {
      throw _abstract();
    };
    DomAdapter.prototype.createEvent = function(eventType) {
      throw _abstract();
    };
    DomAdapter.prototype.preventDefault = function(evt) {
      throw _abstract();
    };
    DomAdapter.prototype.getInnerHTML = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getOuterHTML = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.nodeName = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.nodeValue = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.type = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.content = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.firstChild = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.nextSibling = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.parentElement = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.childNodes = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.childNodesAsList = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.clearNodes = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.appendChild = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.removeChild = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.replaceChild = function(el, newNode, oldNode) {
      throw _abstract();
    };
    DomAdapter.prototype.remove = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.insertBefore = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.insertAllBefore = function(el, nodes) {
      throw _abstract();
    };
    DomAdapter.prototype.insertAfter = function(el, node) {
      throw _abstract();
    };
    DomAdapter.prototype.setInnerHTML = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getText = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.setText = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getValue = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.setValue = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getChecked = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.setChecked = function(el, value) {
      throw _abstract();
    };
    DomAdapter.prototype.createTemplate = function(html) {
      throw _abstract();
    };
    DomAdapter.prototype.createElement = function(tagName, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createTextNode = function(text, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createStyleElement = function(css, doc) {
      if (doc === void 0) {
        doc = null;
      }
      throw _abstract();
    };
    DomAdapter.prototype.createShadowRoot = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getShadowRoot = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getHost = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getDistributedNodes = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.clone = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.getElementsByClassName = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.getElementsByTagName = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.classList = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.addClass = function(element, classname) {
      throw _abstract();
    };
    DomAdapter.prototype.removeClass = function(element, classname) {
      throw _abstract();
    };
    DomAdapter.prototype.hasClass = function(element, classname) {
      throw _abstract();
    };
    DomAdapter.prototype.setStyle = function(element, stylename, stylevalue) {
      throw _abstract();
    };
    DomAdapter.prototype.removeStyle = function(element, stylename) {
      throw _abstract();
    };
    DomAdapter.prototype.getStyle = function(element, stylename) {
      throw _abstract();
    };
    DomAdapter.prototype.tagName = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.attributeMap = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.hasAttribute = function(element, attribute) {
      throw _abstract();
    };
    DomAdapter.prototype.getAttribute = function(element, attribute) {
      throw _abstract();
    };
    DomAdapter.prototype.setAttribute = function(element, name, value) {
      throw _abstract();
    };
    DomAdapter.prototype.removeAttribute = function(element, attribute) {
      throw _abstract();
    };
    DomAdapter.prototype.templateAwareRoot = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.createHtmlDocument = function() {
      throw _abstract();
    };
    DomAdapter.prototype.defaultDoc = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getBoundingClientRect = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.getTitle = function() {
      throw _abstract();
    };
    DomAdapter.prototype.setTitle = function(newTitle) {
      throw _abstract();
    };
    DomAdapter.prototype.elementMatches = function(n, selector) {
      throw _abstract();
    };
    DomAdapter.prototype.isTemplateElement = function(el) {
      throw _abstract();
    };
    DomAdapter.prototype.isTextNode = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isCommentNode = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isElementNode = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.hasShadowRoot = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isShadowRoot = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.importIntoDoc = function(node) {
      throw _abstract();
    };
    DomAdapter.prototype.isPageRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.isStyleRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.isMediaRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.isKeyframesRule = function(rule) {
      throw _abstract();
    };
    DomAdapter.prototype.getHref = function(element) {
      throw _abstract();
    };
    DomAdapter.prototype.getEventKey = function(event) {
      throw _abstract();
    };
    DomAdapter.prototype.resolveAndSetHref = function(element, baseUrl, href) {
      throw _abstract();
    };
    DomAdapter.prototype.cssToRules = function(css) {
      throw _abstract();
    };
    DomAdapter.prototype.supportsDOMEvents = function() {
      throw _abstract();
    };
    DomAdapter.prototype.supportsNativeShadowDOM = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getGlobalEventTarget = function(target) {
      throw _abstract();
    };
    DomAdapter.prototype.getHistory = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getLocation = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getBaseHref = function() {
      throw _abstract();
    };
    DomAdapter.prototype.getUserAgent = function() {
      throw _abstract();
    };
    DomAdapter.prototype.setData = function(element, name, value) {
      throw _abstract();
    };
    DomAdapter.prototype.getData = function(element, name) {
      throw _abstract();
    };
    DomAdapter.prototype.setGlobalVar = function(name, value) {
      throw _abstract();
    };
    return DomAdapter;
  })();
  exports.DomAdapter = DomAdapter;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/dom/generic_browser_adapter", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var GenericBrowserDomAdapter = (function(_super) {
    __extends(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
      _super.apply(this, arguments);
    }
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function(el) {
      return el.getDistributedNodes();
    };
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function(el, baseUrl, href) {
      el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    GenericBrowserDomAdapter.prototype.cssToRules = function(css) {
      var style = this.createStyleElement(css);
      this.appendChild(this.defaultDoc().head, style);
      var rules = [];
      if (lang_1.isPresent(style.sheet)) {
        try {
          var rawRules = style.sheet.cssRules;
          rules = collection_1.ListWrapper.createFixedSize(rawRules.length);
          for (var i = 0; i < rawRules.length; i++) {
            rules[i] = rawRules[i];
          }
        } catch (e) {}
      } else {}
      this.remove(style);
      return rules;
    };
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function() {
      return true;
    };
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function() {
      return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
    };
    return GenericBrowserDomAdapter;
  })(dom_adapter_1.DomAdapter);
  exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/annotations", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/di/annotations_impl", "npm:angular2@2.0.0-alpha.28/change_detection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var annotations_impl_1 = require("npm:angular2@2.0.0-alpha.28/src/di/annotations_impl");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
  var Directive = (function(_super) {
    __extends(Directive, _super);
    function Directive(_a) {
      var _b = _a === void 0 ? {} : _a,
          selector = _b.selector,
          properties = _b.properties,
          events = _b.events,
          host = _b.host,
          lifecycle = _b.lifecycle,
          hostInjector = _b.hostInjector,
          exportAs = _b.exportAs,
          _c = _b.compileChildren,
          compileChildren = _c === void 0 ? true : _c;
      _super.call(this);
      this.selector = selector;
      this.properties = properties;
      this.events = events;
      this.host = host;
      this.exportAs = exportAs;
      this.lifecycle = lifecycle;
      this.compileChildren = compileChildren;
      this.hostInjector = hostInjector;
    }
    Directive = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], Directive);
    return Directive;
  })(annotations_impl_1.Injectable);
  exports.Directive = Directive;
  var Component = (function(_super) {
    __extends(Component, _super);
    function Component(_a) {
      var _b = _a === void 0 ? {} : _a,
          selector = _b.selector,
          properties = _b.properties,
          events = _b.events,
          host = _b.host,
          exportAs = _b.exportAs,
          appInjector = _b.appInjector,
          lifecycle = _b.lifecycle,
          hostInjector = _b.hostInjector,
          viewInjector = _b.viewInjector,
          _c = _b.changeDetection,
          changeDetection = _c === void 0 ? change_detection_1.DEFAULT : _c,
          _d = _b.compileChildren,
          compileChildren = _d === void 0 ? true : _d;
      _super.call(this, {
        selector: selector,
        properties: properties,
        events: events,
        host: host,
        exportAs: exportAs,
        hostInjector: hostInjector,
        lifecycle: lifecycle,
        compileChildren: compileChildren
      });
      this.changeDetection = changeDetection;
      this.appInjector = appInjector;
      this.viewInjector = viewInjector;
    }
    Component = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object])], Component);
    return Component;
  })(Directive);
  exports.Component = Component;
  var LifecycleEvent = (function() {
    function LifecycleEvent(name) {
      this.name = name;
    }
    LifecycleEvent = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [String])], LifecycleEvent);
    return LifecycleEvent;
  })();
  exports.LifecycleEvent = LifecycleEvent;
  exports.onDestroy = lang_1.CONST_EXPR(new LifecycleEvent("onDestroy"));
  exports.onChange = lang_1.CONST_EXPR(new LifecycleEvent("onChange"));
  exports.onCheck = lang_1.CONST_EXPR(new LifecycleEvent("onCheck"));
  exports.onInit = lang_1.CONST_EXPR(new LifecycleEvent("onInit"));
  exports.onAllChangesDone = lang_1.CONST_EXPR(new LifecycleEvent("onAllChangesDone"));
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  function internalView(viewRef) {
    return viewRef._view;
  }
  exports.internalView = internalView;
  function internalProtoView(protoViewRef) {
    return lang_1.isPresent(protoViewRef) ? protoViewRef._protoView : null;
  }
  exports.internalProtoView = internalProtoView;
  var ViewRef = (function() {
    function ViewRef(_view) {
      this._view = _view;
    }
    Object.defineProperty(ViewRef.prototype, "render", {
      get: function() {
        return this._view.render;
      },
      enumerable: true,
      configurable: true
    });
    ViewRef.prototype.setLocal = function(contextName, value) {
      this._view.setLocal(contextName, value);
    };
    return ViewRef;
  })();
  exports.ViewRef = ViewRef;
  var ProtoViewRef = (function() {
    function ProtoViewRef(_protoView) {
      this._protoView = _protoView;
    }
    return ProtoViewRef;
  })();
  exports.ProtoViewRef = ProtoViewRef;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/di", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/di/annotations_impl", "npm:angular2@2.0.0-alpha.28/di"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var annotations_impl_1 = require("npm:angular2@2.0.0-alpha.28/src/di/annotations_impl");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var Attribute = (function(_super) {
    __extends(Attribute, _super);
    function Attribute(attributeName) {
      _super.call(this);
      this.attributeName = attributeName;
    }
    Object.defineProperty(Attribute.prototype, "token", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Attribute.prototype.toString = function() {
      return "@Attribute(" + lang_1.stringify(this.attributeName) + ")";
    };
    Attribute = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [String])], Attribute);
    return Attribute;
  })(annotations_impl_1.DependencyAnnotation);
  exports.Attribute = Attribute;
  var Query = (function(_super) {
    __extends(Query, _super);
    function Query(_selector, _a) {
      var _b = (_a === void 0 ? {} : _a).descendants,
          descendants = _b === void 0 ? false : _b;
      _super.call(this);
      this._selector = _selector;
      this.descendants = descendants;
    }
    Object.defineProperty(Query.prototype, "selector", {
      get: function() {
        return di_1.resolveForwardRef(this._selector);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Query.prototype, "isVarBindingQuery", {
      get: function() {
        return lang_1.isString(this.selector);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Query.prototype, "varBindings", {
      get: function() {
        return lang_1.StringWrapper.split(this.selector, new RegExp(","));
      },
      enumerable: true,
      configurable: true
    });
    Query.prototype.toString = function() {
      return "@Query(" + lang_1.stringify(this.selector) + ")";
    };
    Query = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object, Object])], Query);
    return Query;
  })(annotations_impl_1.DependencyAnnotation);
  exports.Query = Query;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/api", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var EventBinding = (function() {
    function EventBinding(fullName, source) {
      this.fullName = fullName;
      this.source = source;
    }
    return EventBinding;
  })();
  exports.EventBinding = EventBinding;
  (function(PropertyBindingType) {
    PropertyBindingType[PropertyBindingType["PROPERTY"] = 0] = "PROPERTY";
    PropertyBindingType[PropertyBindingType["ATTRIBUTE"] = 1] = "ATTRIBUTE";
    PropertyBindingType[PropertyBindingType["CLASS"] = 2] = "CLASS";
    PropertyBindingType[PropertyBindingType["STYLE"] = 3] = "STYLE";
  })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
  var PropertyBindingType = exports.PropertyBindingType;
  var ElementPropertyBinding = (function() {
    function ElementPropertyBinding(type, astWithSource, property, unit) {
      if (unit === void 0) {
        unit = null;
      }
      this.type = type;
      this.astWithSource = astWithSource;
      this.property = property;
      this.unit = unit;
    }
    return ElementPropertyBinding;
  })();
  exports.ElementPropertyBinding = ElementPropertyBinding;
  var ElementBinder = (function() {
    function ElementBinder(_a) {
      var _b = _a === void 0 ? {} : _a,
          index = _b.index,
          parentIndex = _b.parentIndex,
          distanceToParent = _b.distanceToParent,
          directives = _b.directives,
          nestedProtoView = _b.nestedProtoView,
          propertyBindings = _b.propertyBindings,
          variableBindings = _b.variableBindings,
          eventBindings = _b.eventBindings,
          textBindings = _b.textBindings,
          readAttributes = _b.readAttributes;
      this.index = index;
      this.parentIndex = parentIndex;
      this.distanceToParent = distanceToParent;
      this.directives = directives;
      this.nestedProtoView = nestedProtoView;
      this.propertyBindings = propertyBindings;
      this.variableBindings = variableBindings;
      this.eventBindings = eventBindings;
      this.textBindings = textBindings;
      this.readAttributes = readAttributes;
    }
    return ElementBinder;
  })();
  exports.ElementBinder = ElementBinder;
  var DirectiveBinder = (function() {
    function DirectiveBinder(_a) {
      var directiveIndex = _a.directiveIndex,
          propertyBindings = _a.propertyBindings,
          eventBindings = _a.eventBindings,
          hostPropertyBindings = _a.hostPropertyBindings;
      this.directiveIndex = directiveIndex;
      this.propertyBindings = propertyBindings;
      this.eventBindings = eventBindings;
      this.hostPropertyBindings = hostPropertyBindings;
    }
    return DirectiveBinder;
  })();
  exports.DirectiveBinder = DirectiveBinder;
  (function(ViewType) {
    ViewType[ViewType["HOST"] = 0] = "HOST";
    ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
    ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
  })(exports.ViewType || (exports.ViewType = {}));
  var ViewType = exports.ViewType;
  var ProtoViewDto = (function() {
    function ProtoViewDto(_a) {
      var render = _a.render,
          elementBinders = _a.elementBinders,
          variableBindings = _a.variableBindings,
          type = _a.type;
      this.render = render;
      this.elementBinders = elementBinders;
      this.variableBindings = variableBindings;
      this.type = type;
    }
    return ProtoViewDto;
  })();
  exports.ProtoViewDto = ProtoViewDto;
  var hostRegExp = lang_1.RegExpWrapper.create('^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\))|(?:@(.+)))$');
  var DirectiveMetadata = (function() {
    function DirectiveMetadata(_a) {
      var id = _a.id,
          selector = _a.selector,
          compileChildren = _a.compileChildren,
          events = _a.events,
          hostListeners = _a.hostListeners,
          hostProperties = _a.hostProperties,
          hostAttributes = _a.hostAttributes,
          hostActions = _a.hostActions,
          properties = _a.properties,
          readAttributes = _a.readAttributes,
          type = _a.type,
          callOnDestroy = _a.callOnDestroy,
          callOnChange = _a.callOnChange,
          callOnCheck = _a.callOnCheck,
          callOnInit = _a.callOnInit,
          callOnAllChangesDone = _a.callOnAllChangesDone,
          changeDetection = _a.changeDetection,
          exportAs = _a.exportAs;
      this.id = id;
      this.selector = selector;
      this.compileChildren = lang_1.isPresent(compileChildren) ? compileChildren : true;
      this.events = events;
      this.hostListeners = hostListeners;
      this.hostAttributes = hostAttributes;
      this.hostProperties = hostProperties;
      this.hostActions = hostActions;
      this.properties = properties;
      this.readAttributes = readAttributes;
      this.type = type;
      this.callOnDestroy = callOnDestroy;
      this.callOnChange = callOnChange;
      this.callOnCheck = callOnCheck;
      this.callOnInit = callOnInit;
      this.callOnAllChangesDone = callOnAllChangesDone;
      this.changeDetection = changeDetection;
      this.exportAs = exportAs;
    }
    Object.defineProperty(DirectiveMetadata, "DIRECTIVE_TYPE", {
      get: function() {
        return 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveMetadata, "COMPONENT_TYPE", {
      get: function() {
        return 1;
      },
      enumerable: true,
      configurable: true
    });
    DirectiveMetadata.create = function(_a) {
      var id = _a.id,
          selector = _a.selector,
          compileChildren = _a.compileChildren,
          events = _a.events,
          host = _a.host,
          properties = _a.properties,
          readAttributes = _a.readAttributes,
          type = _a.type,
          callOnDestroy = _a.callOnDestroy,
          callOnChange = _a.callOnChange,
          callOnCheck = _a.callOnCheck,
          callOnInit = _a.callOnInit,
          callOnAllChangesDone = _a.callOnAllChangesDone,
          changeDetection = _a.changeDetection,
          exportAs = _a.exportAs;
      var hostListeners = new collection_1.Map();
      var hostProperties = new collection_1.Map();
      var hostAttributes = new collection_1.Map();
      var hostActions = new collection_1.Map();
      if (lang_1.isPresent(host)) {
        collection_1.MapWrapper.forEach(host, function(value, key) {
          var matches = lang_1.RegExpWrapper.firstMatch(hostRegExp, key);
          if (lang_1.isBlank(matches)) {
            hostAttributes.set(key, value);
          } else if (lang_1.isPresent(matches[1])) {
            hostProperties.set(matches[1], value);
          } else if (lang_1.isPresent(matches[2])) {
            hostListeners.set(matches[2], value);
          } else if (lang_1.isPresent(matches[3])) {
            hostActions.set(matches[3], value);
          }
        });
      }
      return new DirectiveMetadata({
        id: id,
        selector: selector,
        compileChildren: compileChildren,
        events: events,
        hostListeners: hostListeners,
        hostProperties: hostProperties,
        hostAttributes: hostAttributes,
        hostActions: hostActions,
        properties: properties,
        readAttributes: readAttributes,
        type: type,
        callOnDestroy: callOnDestroy,
        callOnChange: callOnChange,
        callOnCheck: callOnCheck,
        callOnInit: callOnInit,
        callOnAllChangesDone: callOnAllChangesDone,
        changeDetection: changeDetection,
        exportAs: exportAs
      });
    };
    return DirectiveMetadata;
  })();
  exports.DirectiveMetadata = DirectiveMetadata;
  var RenderProtoViewRef = (function() {
    function RenderProtoViewRef() {}
    return RenderProtoViewRef;
  })();
  exports.RenderProtoViewRef = RenderProtoViewRef;
  var RenderViewRef = (function() {
    function RenderViewRef() {}
    return RenderViewRef;
  })();
  exports.RenderViewRef = RenderViewRef;
  var ViewDefinition = (function() {
    function ViewDefinition(_a) {
      var componentId = _a.componentId,
          templateAbsUrl = _a.templateAbsUrl,
          template = _a.template,
          styleAbsUrls = _a.styleAbsUrls,
          styles = _a.styles,
          directives = _a.directives;
      this.componentId = componentId;
      this.templateAbsUrl = templateAbsUrl;
      this.template = template;
      this.styleAbsUrls = styleAbsUrls;
      this.styles = styles;
      this.directives = directives;
    }
    return ViewDefinition;
  })();
  exports.ViewDefinition = ViewDefinition;
  var RenderCompiler = (function() {
    function RenderCompiler() {}
    RenderCompiler.prototype.compileHost = function(directiveMetadata) {
      return null;
    };
    RenderCompiler.prototype.compile = function(view) {
      return null;
    };
    return RenderCompiler;
  })();
  exports.RenderCompiler = RenderCompiler;
  var Renderer = (function() {
    function Renderer() {}
    Renderer.prototype.createRootHostView = function(hostProtoViewRef, hostElementSelector) {
      return null;
    };
    Renderer.prototype.createView = function(protoViewRef) {
      return null;
    };
    Renderer.prototype.destroyView = function(viewRef) {};
    Renderer.prototype.attachComponentView = function(location, componentViewRef) {};
    Renderer.prototype.detachComponentView = function(location, componentViewRef) {};
    Renderer.prototype.attachViewInContainer = function(location, atIndex, viewRef) {};
    Renderer.prototype.detachViewInContainer = function(location, atIndex, viewRef) {};
    Renderer.prototype.hydrateView = function(viewRef) {};
    Renderer.prototype.dehydrateView = function(viewRef) {};
    Renderer.prototype.getNativeElementSync = function(location) {
      return null;
    };
    Renderer.prototype.setElementProperty = function(location, propertyName, propertyValue) {};
    Renderer.prototype.setElementAttribute = function(location, attributeName, attributeValue) {};
    Renderer.prototype.setElementClass = function(location, className, isAdd) {};
    Renderer.prototype.setElementStyle = function(location, styleName, styleValue) {};
    Renderer.prototype.invokeElementMethod = function(location, methodName, args) {};
    Renderer.prototype.setText = function(viewRef, textNodeIndex, text) {};
    Renderer.prototype.setEventDispatcher = function(viewRef, dispatcher) {};
    return Renderer;
  })();
  exports.Renderer = Renderer;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_binder", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var ElementBinder = (function() {
    function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective) {
      this.index = index;
      this.parent = parent;
      this.distanceToParent = distanceToParent;
      this.protoElementInjector = protoElementInjector;
      this.componentDirective = componentDirective;
      this.nestedProtoView = null;
      this.hostListeners = null;
      if (lang_1.isBlank(index)) {
        throw new lang_1.BaseException('null index not allowed.');
      }
    }
    ElementBinder.prototype.hasStaticComponent = function() {
      return lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
    };
    ElementBinder.prototype.hasEmbeddedProtoView = function() {
      return !lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
    };
    return ElementBinder;
  })();
  exports.ElementBinder = ElementBinder;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_ref", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var ElementRef = (function() {
    function ElementRef(parentView, boundElementIndex, _renderer) {
      this.parentView = parentView;
      this.boundElementIndex = boundElementIndex;
      this._renderer = _renderer;
    }
    Object.defineProperty(ElementRef.prototype, "renderView", {
      get: function() {
        return this.parentView.render;
      },
      set: function(viewRef) {
        throw new lang_1.BaseException('Abstract setter');
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ElementRef.prototype, "nativeElement", {
      get: function() {
        return this._renderer.getNativeElementSync(this);
      },
      enumerable: true,
      configurable: true
    });
    return ElementRef;
  })();
  exports.ElementRef = ElementRef;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_pool", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  exports.APP_VIEW_POOL_CAPACITY = lang_1.CONST_EXPR(new di_1.OpaqueToken('AppViewPool.viewPoolCapacity'));
  var AppViewPool = (function() {
    function AppViewPool(poolCapacityPerProtoView) {
      this._pooledViewsPerProtoView = new collection_1.Map();
      this._poolCapacityPerProtoView = poolCapacityPerProtoView;
    }
    AppViewPool.prototype.getView = function(protoView) {
      var pooledViews = this._pooledViewsPerProtoView.get(protoView);
      if (lang_1.isPresent(pooledViews) && pooledViews.length > 0) {
        return collection_1.ListWrapper.removeLast(pooledViews);
      }
      return null;
    };
    AppViewPool.prototype.returnView = function(view) {
      var protoView = view.proto;
      var pooledViews = this._pooledViewsPerProtoView.get(protoView);
      if (lang_1.isBlank(pooledViews)) {
        pooledViews = [];
        this._pooledViewsPerProtoView.set(protoView, pooledViews);
      }
      var haveRemainingCapacity = pooledViews.length < this._poolCapacityPerProtoView;
      if (haveRemainingCapacity) {
        pooledViews.push(view);
      }
      return haveRemainingCapacity;
    };
    AppViewPool = __decorate([di_1.Injectable(), __param(0, di_1.Inject(exports.APP_VIEW_POOL_CAPACITY)), __metadata('design:paramtypes', [Object])], AppViewPool);
    return AppViewPool;
  })();
  exports.AppViewPool = AppViewPool;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_listener", ["npm:angular2@2.0.0-alpha.28/di"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var AppViewListener = (function() {
    function AppViewListener() {}
    AppViewListener.prototype.viewCreated = function(view) {};
    AppViewListener.prototype.viewDestroyed = function(view) {};
    AppViewListener = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], AppViewListener);
    return AppViewListener;
  })();
  exports.AppViewListener = AppViewListener;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_container_ref", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref");
  var ViewContainerRef = (function() {
    function ViewContainerRef(viewManager, element) {
      this.viewManager = viewManager;
      this.element = element;
    }
    ViewContainerRef.prototype._getViews = function() {
      var vc = view_ref_1.internalView(this.element.parentView).viewContainers[this.element.boundElementIndex];
      return lang_1.isPresent(vc) ? vc.views : [];
    };
    ViewContainerRef.prototype.clear = function() {
      for (var i = this.length - 1; i >= 0; i--) {
        this.remove(i);
      }
    };
    ViewContainerRef.prototype.get = function(index) {
      return this._getViews()[index].ref;
    };
    Object.defineProperty(ViewContainerRef.prototype, "length", {
      get: function() {
        return this._getViews().length;
      },
      enumerable: true,
      configurable: true
    });
    ViewContainerRef.prototype.create = function(protoViewRef, atIndex, context, injector) {
      if (protoViewRef === void 0) {
        protoViewRef = null;
      }
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (context === void 0) {
        context = null;
      }
      if (injector === void 0) {
        injector = null;
      }
      if (atIndex == -1)
        atIndex = this.length;
      return this.viewManager.createViewInContainer(this.element, atIndex, protoViewRef, context, injector);
    };
    ViewContainerRef.prototype.insert = function(viewRef, atIndex) {
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (atIndex == -1)
        atIndex = this.length;
      return this.viewManager.attachViewInContainer(this.element, atIndex, viewRef);
    };
    ViewContainerRef.prototype.indexOf = function(viewRef) {
      return collection_1.ListWrapper.indexOf(this._getViews(), view_ref_1.internalView(viewRef));
    };
    ViewContainerRef.prototype.remove = function(atIndex) {
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (atIndex == -1)
        atIndex = this.length - 1;
      this.viewManager.destroyViewInContainer(this.element, atIndex);
    };
    ViewContainerRef.prototype.detach = function(atIndex) {
      if (atIndex === void 0) {
        atIndex = -1;
      }
      if (atIndex == -1)
        atIndex = this.length - 1;
      return this.viewManager.detachViewInContainer(this.element, atIndex);
    };
    return ViewContainerRef;
  })();
  exports.ViewContainerRef = ViewContainerRef;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_lifecycle_reflector", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  function hasLifecycleHook(e, type, annotation) {
    if (lang_1.isPresent(annotation.lifecycle)) {
      return annotation.lifecycle.indexOf(e) !== -1;
    } else {
      if (!(type instanceof lang_1.Type))
        return false;
      return e.name in type.prototype;
    }
  }
  exports.hasLifecycleHook = hasLifecycleHook;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/base_query_list", ["npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var BaseQueryList = (function() {
    function BaseQueryList() {
      this._results = [];
      this._callbacks = [];
      this._dirty = false;
    }
    BaseQueryList.prototype[Symbol.iterator] = function() {
      return this._results[Symbol.iterator]();
    };
    BaseQueryList.prototype.reset = function(newList) {
      this._results = newList;
      this._dirty = true;
    };
    BaseQueryList.prototype.add = function(obj) {
      this._results.push(obj);
      this._dirty = true;
    };
    BaseQueryList.prototype.fireCallbacks = function() {
      if (this._dirty) {
        collection_1.ListWrapper.forEach(this._callbacks, function(c) {
          return c();
        });
        this._dirty = false;
      }
    };
    BaseQueryList.prototype.onChange = function(callback) {
      this._callbacks.push(callback);
    };
    BaseQueryList.prototype.removeCallback = function(callback) {
      collection_1.ListWrapper.remove(this._callbacks, callback);
    };
    Object.defineProperty(BaseQueryList.prototype, "length", {
      get: function() {
        return this._results.length;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseQueryList.prototype, "first", {
      get: function() {
        return collection_1.ListWrapper.first(this._results);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseQueryList.prototype, "last", {
      get: function() {
        return collection_1.ListWrapper.last(this._results);
      },
      enumerable: true,
      configurable: true
    });
    return BaseQueryList;
  })();
  exports.BaseQueryList = BaseQueryList;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_resolver", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/view", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var view_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/view");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection");
  var ViewResolver = (function() {
    function ViewResolver() {
      this._cache = new collection_1.Map();
    }
    ViewResolver.prototype.resolve = function(component) {
      var view = this._cache.get(component);
      if (lang_1.isBlank(view)) {
        view = this._resolve(component);
        this._cache.set(component, view);
      }
      return view;
    };
    ViewResolver.prototype._resolve = function(component) {
      var annotations = reflection_1.reflector.annotations(component);
      for (var i = 0; i < annotations.length; i++) {
        var annotation = annotations[i];
        if (annotation instanceof view_1.View) {
          return annotation;
        }
      }
      throw new lang_1.BaseException("No View annotation found on component " + lang_1.stringify(component));
    };
    ViewResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], ViewResolver);
    return ViewResolver;
  })();
  exports.ViewResolver = ViewResolver;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/component_url_mapper", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var ComponentUrlMapper = (function() {
    function ComponentUrlMapper() {}
    ComponentUrlMapper.prototype.getUrl = function(component) {
      return './';
    };
    ComponentUrlMapper = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], ComponentUrlMapper);
    return ComponentUrlMapper;
  })();
  exports.ComponentUrlMapper = ComponentUrlMapper;
  var RuntimeComponentUrlMapper = (function(_super) {
    __extends(RuntimeComponentUrlMapper, _super);
    function RuntimeComponentUrlMapper() {
      _super.call(this);
      this._componentUrls = new collection_1.Map();
    }
    RuntimeComponentUrlMapper.prototype.setComponentUrl = function(component, url) {
      this._componentUrls.set(component, url);
    };
    RuntimeComponentUrlMapper.prototype.getUrl = function(component) {
      var url = this._componentUrls.get(component);
      if (lang_1.isPresent(url))
        return url;
      return _super.prototype.getUrl.call(this, component);
    };
    return RuntimeComponentUrlMapper;
  })(ComponentUrlMapper);
  exports.RuntimeComponentUrlMapper = RuntimeComponentUrlMapper;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/proto_view_factory", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection", "npm:angular2@2.0.0-alpha.28/change_detection", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view", "npm:angular2@2.0.0-alpha.28/src/core/compiler/element_injector"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
  var renderApi = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var view_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view");
  var element_injector_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_injector");
  var BindingRecordsCreator = (function() {
    function BindingRecordsCreator() {
      this._directiveRecordsMap = new Map();
      this._textNodeIndex = 0;
    }
    BindingRecordsCreator.prototype.getBindingRecords = function(elementBinders, allDirectiveMetadatas) {
      var bindings = [];
      for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; boundElementIndex++) {
        var renderElementBinder = elementBinders[boundElementIndex];
        this._createTextNodeRecords(bindings, renderElementBinder);
        this._createElementPropertyRecords(bindings, boundElementIndex, renderElementBinder);
        this._createDirectiveRecords(bindings, boundElementIndex, renderElementBinder.directives, allDirectiveMetadatas);
      }
      return bindings;
    };
    BindingRecordsCreator.prototype.getDirectiveRecords = function(elementBinders, allDirectiveMetadatas) {
      var directiveRecords = [];
      for (var elementIndex = 0; elementIndex < elementBinders.length; ++elementIndex) {
        var dirs = elementBinders[elementIndex].directives;
        for (var dirIndex = 0; dirIndex < dirs.length; ++dirIndex) {
          directiveRecords.push(this._getDirectiveRecord(elementIndex, dirIndex, allDirectiveMetadatas[dirs[dirIndex].directiveIndex]));
        }
      }
      return directiveRecords;
    };
    BindingRecordsCreator.prototype._createTextNodeRecords = function(bindings, renderElementBinder) {
      var _this = this;
      if (lang_1.isBlank(renderElementBinder.textBindings))
        return ;
      collection_1.ListWrapper.forEach(renderElementBinder.textBindings, function(b) {
        bindings.push(change_detection_1.BindingRecord.createForTextNode(b, _this._textNodeIndex++));
      });
    };
    BindingRecordsCreator.prototype._createElementPropertyRecords = function(bindings, boundElementIndex, renderElementBinder) {
      collection_1.ListWrapper.forEach(renderElementBinder.propertyBindings, function(binding) {
        if (binding.type === renderApi.PropertyBindingType.PROPERTY) {
          bindings.push(change_detection_1.BindingRecord.createForElementProperty(binding.astWithSource, boundElementIndex, binding.property));
        } else if (binding.type === renderApi.PropertyBindingType.ATTRIBUTE) {
          bindings.push(change_detection_1.BindingRecord.createForElementAttribute(binding.astWithSource, boundElementIndex, binding.property));
        } else if (binding.type === renderApi.PropertyBindingType.CLASS) {
          bindings.push(change_detection_1.BindingRecord.createForElementClass(binding.astWithSource, boundElementIndex, binding.property));
        } else if (binding.type === renderApi.PropertyBindingType.STYLE) {
          bindings.push(change_detection_1.BindingRecord.createForElementStyle(binding.astWithSource, boundElementIndex, binding.property, binding.unit));
        }
      });
    };
    BindingRecordsCreator.prototype._createDirectiveRecords = function(bindings, boundElementIndex, directiveBinders, allDirectiveMetadatas) {
      for (var i = 0; i < directiveBinders.length; i++) {
        var directiveBinder = directiveBinders[i];
        var directiveMetadata = allDirectiveMetadatas[directiveBinder.directiveIndex];
        var directiveRecord = this._getDirectiveRecord(boundElementIndex, i, directiveMetadata);
        collection_1.MapWrapper.forEach(directiveBinder.propertyBindings, function(astWithSource, propertyName) {
          var setter = reflection_1.reflector.setter(propertyName);
          bindings.push(change_detection_1.BindingRecord.createForDirective(astWithSource, propertyName, setter, directiveRecord));
        });
        if (directiveRecord.callOnChange) {
          bindings.push(change_detection_1.BindingRecord.createDirectiveOnChange(directiveRecord));
        }
        if (directiveRecord.callOnInit) {
          bindings.push(change_detection_1.BindingRecord.createDirectiveOnInit(directiveRecord));
        }
        if (directiveRecord.callOnCheck) {
          bindings.push(change_detection_1.BindingRecord.createDirectiveOnCheck(directiveRecord));
        }
      }
      for (var i = 0; i < directiveBinders.length; i++) {
        var directiveBinder = directiveBinders[i];
        collection_1.ListWrapper.forEach(directiveBinder.hostPropertyBindings, function(binding) {
          var dirIndex = new change_detection_1.DirectiveIndex(boundElementIndex, i);
          if (binding.type === renderApi.PropertyBindingType.PROPERTY) {
            bindings.push(change_detection_1.BindingRecord.createForHostProperty(dirIndex, binding.astWithSource, binding.property));
          } else if (binding.type === renderApi.PropertyBindingType.ATTRIBUTE) {
            bindings.push(change_detection_1.BindingRecord.createForHostAttribute(dirIndex, binding.astWithSource, binding.property));
          } else if (binding.type === renderApi.PropertyBindingType.CLASS) {
            bindings.push(change_detection_1.BindingRecord.createForHostClass(dirIndex, binding.astWithSource, binding.property));
          } else if (binding.type === renderApi.PropertyBindingType.STYLE) {
            bindings.push(change_detection_1.BindingRecord.createForHostStyle(dirIndex, binding.astWithSource, binding.property, binding.unit));
          }
        });
      }
    };
    BindingRecordsCreator.prototype._getDirectiveRecord = function(boundElementIndex, directiveIndex, directiveMetadata) {
      var id = boundElementIndex * 100 + directiveIndex;
      if (!this._directiveRecordsMap.has(id)) {
        this._directiveRecordsMap.set(id, new change_detection_1.DirectiveRecord({
          directiveIndex: new change_detection_1.DirectiveIndex(boundElementIndex, directiveIndex),
          callOnAllChangesDone: directiveMetadata.callOnAllChangesDone,
          callOnChange: directiveMetadata.callOnChange,
          callOnCheck: directiveMetadata.callOnCheck,
          callOnInit: directiveMetadata.callOnInit,
          changeDetection: directiveMetadata.changeDetection
        }));
      }
      return this._directiveRecordsMap.get(id);
    };
    return BindingRecordsCreator;
  })();
  var ProtoViewFactory = (function() {
    function ProtoViewFactory(_changeDetection) {
      this._changeDetection = _changeDetection;
    }
    ProtoViewFactory.prototype.createAppProtoViews = function(hostComponentBinding, rootRenderProtoView, allDirectives) {
      var _this = this;
      var allRenderDirectiveMetadata = collection_1.ListWrapper.map(allDirectives, function(directiveBinding) {
        return directiveBinding.metadata;
      });
      var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
      var nestedPvVariableBindings = _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex);
      var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex);
      var changeDetectorDefs = _getChangeDetectorDefinitions(hostComponentBinding.metadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
      var protoChangeDetectors = collection_1.ListWrapper.map(changeDetectorDefs, function(changeDetectorDef) {
        return _this._changeDetection.createProtoChangeDetector(changeDetectorDef);
      });
      var appProtoViews = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
      collection_1.ListWrapper.forEach(nestedPvsWithIndex, function(pvWithIndex) {
        var appProtoView = _createAppProtoView(pvWithIndex.renderProtoView, protoChangeDetectors[pvWithIndex.index], nestedPvVariableBindings[pvWithIndex.index], allDirectives);
        if (lang_1.isPresent(pvWithIndex.parentIndex)) {
          var parentView = appProtoViews[pvWithIndex.parentIndex];
          parentView.elementBinders[pvWithIndex.boundElementIndex].nestedProtoView = appProtoView;
        }
        appProtoViews[pvWithIndex.index] = appProtoView;
      });
      return appProtoViews;
    };
    ProtoViewFactory = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [change_detection_1.ChangeDetection])], ProtoViewFactory);
    return ProtoViewFactory;
  })();
  exports.ProtoViewFactory = ProtoViewFactory;
  function getChangeDetectorDefinitions(hostComponentMetadata, rootRenderProtoView, allRenderDirectiveMetadata) {
    var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
    var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex);
    return _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
  }
  exports.getChangeDetectorDefinitions = getChangeDetectorDefinitions;
  function _collectNestedProtoViews(renderProtoView, parentIndex, boundElementIndex, result) {
    if (parentIndex === void 0) {
      parentIndex = null;
    }
    if (boundElementIndex === void 0) {
      boundElementIndex = null;
    }
    if (result === void 0) {
      result = null;
    }
    if (lang_1.isBlank(result)) {
      result = [];
    }
    result.push(new RenderProtoViewWithIndex(renderProtoView, result.length, parentIndex, boundElementIndex));
    var currentIndex = result.length - 1;
    var childBoundElementIndex = 0;
    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function(elementBinder) {
      if (lang_1.isPresent(elementBinder.nestedProtoView)) {
        _collectNestedProtoViews(elementBinder.nestedProtoView, currentIndex, childBoundElementIndex, result);
      }
      childBoundElementIndex++;
    });
    return result;
  }
  function _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata) {
    return collection_1.ListWrapper.map(nestedPvsWithIndex, function(pvWithIndex) {
      var elementBinders = pvWithIndex.renderProtoView.elementBinders;
      var bindingRecordsCreator = new BindingRecordsCreator();
      var bindingRecords = bindingRecordsCreator.getBindingRecords(elementBinders, allRenderDirectiveMetadata);
      var directiveRecords = bindingRecordsCreator.getDirectiveRecords(elementBinders, allRenderDirectiveMetadata);
      var strategyName = change_detection_1.DEFAULT;
      var typeString;
      if (pvWithIndex.renderProtoView.type === renderApi.ViewType.COMPONENT) {
        strategyName = hostComponentMetadata.changeDetection;
        typeString = 'comp';
      } else if (pvWithIndex.renderProtoView.type === renderApi.ViewType.HOST) {
        typeString = 'host';
      } else {
        typeString = 'embedded';
      }
      var id = hostComponentMetadata.id + "_" + typeString + "_" + pvWithIndex.index;
      var variableNames = nestedPvVariableNames[pvWithIndex.index];
      return new change_detection_1.ChangeDetectorDefinition(id, strategyName, variableNames, bindingRecords, directiveRecords);
    });
  }
  function _createAppProtoView(renderProtoView, protoChangeDetector, variableBindings, allDirectives) {
    var elementBinders = renderProtoView.elementBinders;
    var protoView = new view_1.AppProtoView(renderProtoView.render, protoChangeDetector, variableBindings, createVariableLocations(elementBinders));
    _createElementBinders(protoView, elementBinders, allDirectives);
    _bindDirectiveEvents(protoView, elementBinders);
    return protoView;
  }
  function _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex) {
    return collection_1.ListWrapper.map(nestedPvsWithIndex, function(pvWithIndex) {
      return _createVariableBindings(pvWithIndex.renderProtoView);
    });
  }
  function _createVariableBindings(renderProtoView) {
    var variableBindings = new Map();
    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function(mappedName, varName) {
      variableBindings.set(varName, mappedName);
    });
    return variableBindings;
  }
  function _collectNestedProtoViewsVariableNames(nestedPvsWithIndex) {
    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
    collection_1.ListWrapper.forEach(nestedPvsWithIndex, function(pvWithIndex) {
      var parentVariableNames = lang_1.isPresent(pvWithIndex.parentIndex) ? nestedPvVariableNames[pvWithIndex.parentIndex] : null;
      nestedPvVariableNames[pvWithIndex.index] = _createVariableNames(parentVariableNames, pvWithIndex.renderProtoView);
    });
    return nestedPvVariableNames;
  }
  function _createVariableNames(parentVariableNames, renderProtoView) {
    var res = lang_1.isBlank(parentVariableNames) ? [] : collection_1.ListWrapper.clone(parentVariableNames);
    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function(mappedName, varName) {
      res.push(mappedName);
    });
    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function(binder) {
      collection_1.MapWrapper.forEach(binder.variableBindings, function(mappedName, varName) {
        res.push(mappedName);
      });
    });
    return res;
  }
  function createVariableLocations(elementBinders) {
    var variableLocations = new Map();
    for (var i = 0; i < elementBinders.length; i++) {
      var binder = elementBinders[i];
      collection_1.MapWrapper.forEach(binder.variableBindings, function(mappedName, varName) {
        variableLocations.set(mappedName, i);
      });
    }
    return variableLocations;
  }
  exports.createVariableLocations = createVariableLocations;
  function _createElementBinders(protoView, elementBinders, allDirectiveBindings) {
    for (var i = 0; i < elementBinders.length; i++) {
      var renderElementBinder = elementBinders[i];
      var dirs = elementBinders[i].directives;
      var parentPeiWithDistance = _findParentProtoElementInjectorWithDistance(i, protoView.elementBinders, elementBinders);
      var directiveBindings = collection_1.ListWrapper.map(dirs, function(dir) {
        return allDirectiveBindings[dir.directiveIndex];
      });
      var componentDirectiveBinding = null;
      if (directiveBindings.length > 0) {
        if (directiveBindings[0].metadata.type === renderApi.DirectiveMetadata.COMPONENT_TYPE) {
          componentDirectiveBinding = directiveBindings[0];
        }
      }
      var protoElementInjector = _createProtoElementInjector(i, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings);
      _createElementBinder(protoView, i, renderElementBinder, protoElementInjector, componentDirectiveBinding, directiveBindings);
    }
  }
  function _findParentProtoElementInjectorWithDistance(binderIndex, elementBinders, renderElementBinders) {
    var distance = 0;
    do {
      var renderElementBinder = renderElementBinders[binderIndex];
      binderIndex = renderElementBinder.parentIndex;
      if (binderIndex !== -1) {
        distance += renderElementBinder.distanceToParent;
        var elementBinder = elementBinders[binderIndex];
        if (lang_1.isPresent(elementBinder.protoElementInjector)) {
          return new ParentProtoElementInjectorWithDistance(elementBinder.protoElementInjector, distance);
        }
      }
    } while (binderIndex !== -1);
    return new ParentProtoElementInjectorWithDistance(null, -1);
  }
  function _createProtoElementInjector(binderIndex, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings) {
    var protoElementInjector = null;
    var hasVariables = collection_1.MapWrapper.size(renderElementBinder.variableBindings) > 0;
    if (directiveBindings.length > 0 || hasVariables) {
      var directiveVariableBindings = createDirectiveVariableBindings(renderElementBinder, directiveBindings);
      protoElementInjector = element_injector_1.ProtoElementInjector.create(parentPeiWithDistance.protoElementInjector, binderIndex, directiveBindings, lang_1.isPresent(componentDirectiveBinding), parentPeiWithDistance.distance, directiveVariableBindings);
      protoElementInjector.attributes = renderElementBinder.readAttributes;
    }
    return protoElementInjector;
  }
  function _createElementBinder(protoView, boundElementIndex, renderElementBinder, protoElementInjector, componentDirectiveBinding, directiveBindings) {
    var parent = null;
    if (renderElementBinder.parentIndex !== -1) {
      parent = protoView.elementBinders[renderElementBinder.parentIndex];
    }
    var elBinder = protoView.bindElement(parent, renderElementBinder.distanceToParent, protoElementInjector, componentDirectiveBinding);
    protoView.bindEvent(renderElementBinder.eventBindings, boundElementIndex, -1);
    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function(mappedName, varName) {
      protoView.protoLocals.set(mappedName, null);
    });
    return elBinder;
  }
  function createDirectiveVariableBindings(renderElementBinder, directiveBindings) {
    var directiveVariableBindings = new Map();
    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function(templateName, exportAs) {
      var dirIndex = _findDirectiveIndexByExportAs(renderElementBinder, directiveBindings, exportAs);
      directiveVariableBindings.set(templateName, dirIndex);
    });
    return directiveVariableBindings;
  }
  exports.createDirectiveVariableBindings = createDirectiveVariableBindings;
  function _findDirectiveIndexByExportAs(renderElementBinder, directiveBindings, exportAs) {
    var matchedDirectiveIndex = null;
    var matchedDirective;
    for (var i = 0; i < directiveBindings.length; ++i) {
      var directive = directiveBindings[i];
      if (_directiveExportAs(directive) == exportAs) {
        if (lang_1.isPresent(matchedDirective)) {
          throw new lang_1.BaseException("More than one directive have exportAs = '" + exportAs + "'. Directives: [" + matchedDirective.displayName + ", " + directive.displayName + "]");
        }
        matchedDirectiveIndex = i;
        matchedDirective = directive;
      }
    }
    if (lang_1.isBlank(matchedDirective) && exportAs !== "$implicit") {
      throw new lang_1.BaseException("Cannot find directive with exportAs = '" + exportAs + "'");
    }
    return matchedDirectiveIndex;
  }
  function _directiveExportAs(directive) {
    var directiveExportAs = directive.metadata.exportAs;
    if (lang_1.isBlank(directiveExportAs) && directive.metadata.type === renderApi.DirectiveMetadata.COMPONENT_TYPE) {
      return "$implicit";
    } else {
      return directiveExportAs;
    }
  }
  function _bindDirectiveEvents(protoView, elementBinders) {
    for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; ++boundElementIndex) {
      var dirs = elementBinders[boundElementIndex].directives;
      for (var i = 0; i < dirs.length; i++) {
        var directiveBinder = dirs[i];
        protoView.bindEvent(directiveBinder.eventBindings, boundElementIndex, i);
      }
    }
  }
  var RenderProtoViewWithIndex = (function() {
    function RenderProtoViewWithIndex(renderProtoView, index, parentIndex, boundElementIndex) {
      this.renderProtoView = renderProtoView;
      this.index = index;
      this.parentIndex = parentIndex;
      this.boundElementIndex = boundElementIndex;
    }
    return RenderProtoViewWithIndex;
  })();
  var ParentProtoElementInjectorWithDistance = (function() {
    function ParentProtoElementInjectorWithDistance(protoElementInjector, distance) {
      this.protoElementInjector = protoElementInjector;
      this.distance = distance;
    }
    return ParentProtoElementInjectorWithDistance;
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/services/url_resolver", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var UrlResolver = (function() {
    function UrlResolver() {}
    UrlResolver.prototype.resolve = function(baseUrl, url) {
      return _resolveUrl(baseUrl, url);
    };
    UrlResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], UrlResolver);
    return UrlResolver;
  })();
  exports.UrlResolver = UrlResolver;
  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
    var out = [];
    if (lang_1.isPresent(opt_scheme)) {
      out.push(opt_scheme + ':');
    }
    if (lang_1.isPresent(opt_domain)) {
      out.push('//');
      if (lang_1.isPresent(opt_userInfo)) {
        out.push(opt_userInfo + '@');
      }
      out.push(opt_domain);
      if (lang_1.isPresent(opt_port)) {
        out.push(':' + opt_port);
      }
    }
    if (lang_1.isPresent(opt_path)) {
      out.push(opt_path);
    }
    if (lang_1.isPresent(opt_queryData)) {
      out.push('?' + opt_queryData);
    }
    if (lang_1.isPresent(opt_fragment)) {
      out.push('#' + opt_fragment);
    }
    return out.join('');
  }
  var _splitRe = lang_1.RegExpWrapper.create('^' + '(?:' + '([^:/?#.]+)' + ':)?' + '(?://' + '(?:([^/?#]*)@)?' + '([\\w\\d\\-\\u0100-\\uffff.%]*)' + '(?::([0-9]+))?' + ')?' + '([^?#]+)?' + '(?:\\?([^#]*))?' + '(?:#(.*))?' + '$');
  var _ComponentIndex;
  (function(_ComponentIndex) {
    _ComponentIndex[_ComponentIndex["SCHEME"] = 1] = "SCHEME";
    _ComponentIndex[_ComponentIndex["USER_INFO"] = 2] = "USER_INFO";
    _ComponentIndex[_ComponentIndex["DOMAIN"] = 3] = "DOMAIN";
    _ComponentIndex[_ComponentIndex["PORT"] = 4] = "PORT";
    _ComponentIndex[_ComponentIndex["PATH"] = 5] = "PATH";
    _ComponentIndex[_ComponentIndex["QUERY_DATA"] = 6] = "QUERY_DATA";
    _ComponentIndex[_ComponentIndex["FRAGMENT"] = 7] = "FRAGMENT";
  })(_ComponentIndex || (_ComponentIndex = {}));
  function _split(uri) {
    return lang_1.RegExpWrapper.firstMatch(_splitRe, uri);
  }
  function _removeDotSegments(path) {
    if (path == '/')
      return '/';
    var leadingSlash = path[0] == '/' ? '/' : '';
    var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
    var segments = path.split('/');
    var out = [];
    var up = 0;
    for (var pos = 0; pos < segments.length; pos++) {
      var segment = segments[pos];
      switch (segment) {
        case '':
        case '.':
          break;
        case '..':
          if (out.length > 0) {
            collection_1.ListWrapper.removeAt(out, out.length - 1);
          } else {
            up++;
          }
          break;
        default:
          out.push(segment);
      }
    }
    if (leadingSlash == '') {
      while (up-- > 0) {
        collection_1.ListWrapper.insert(out, 0, '..');
      }
      if (out.length === 0)
        out.push('.');
    }
    return leadingSlash + out.join('/') + trailingSlash;
  }
  function _joinAndCanonicalizePath(parts) {
    var path = parts[_ComponentIndex.PATH];
    path = lang_1.isBlank(path) ? '' : _removeDotSegments(path);
    parts[_ComponentIndex.PATH] = path;
    return _buildFromEncodedParts(parts[_ComponentIndex.SCHEME], parts[_ComponentIndex.USER_INFO], parts[_ComponentIndex.DOMAIN], parts[_ComponentIndex.PORT], path, parts[_ComponentIndex.QUERY_DATA], parts[_ComponentIndex.FRAGMENT]);
  }
  function _resolveUrl(base, url) {
    var parts = _split(url);
    var baseParts = _split(base);
    if (lang_1.isPresent(parts[_ComponentIndex.SCHEME])) {
      return _joinAndCanonicalizePath(parts);
    } else {
      parts[_ComponentIndex.SCHEME] = baseParts[_ComponentIndex.SCHEME];
    }
    for (var i = _ComponentIndex.SCHEME; i <= _ComponentIndex.PORT; i++) {
      if (lang_1.isBlank(parts[i])) {
        parts[i] = baseParts[i];
      }
    }
    if (parts[_ComponentIndex.PATH][0] == '/') {
      return _joinAndCanonicalizePath(parts);
    }
    var path = baseParts[_ComponentIndex.PATH];
    if (lang_1.isBlank(path))
      path = '/';
    var index = path.lastIndexOf('/');
    path = path.substring(0, index + 1) + parts[_ComponentIndex.PATH];
    parts[_ComponentIndex.PATH] = path;
    return _joinAndCanonicalizePath(parts);
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/services/app_root_url", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var AppRootUrl = (function() {
    function AppRootUrl() {}
    Object.defineProperty(AppRootUrl.prototype, "value", {
      get: function() {
        if (lang_1.isBlank(this._value)) {
          var a = dom_adapter_1.DOM.createElement('a');
          dom_adapter_1.DOM.resolveAndSetHref(a, './', null);
          this._value = dom_adapter_1.DOM.getHref(a);
        }
        return this._value;
      },
      enumerable: true,
      configurable: true
    });
    AppRootUrl = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], AppRootUrl);
    return AppRootUrl;
  })();
  exports.AppRootUrl = AppRootUrl;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/exception_handler", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var ExceptionHandler = (function() {
    function ExceptionHandler() {}
    ExceptionHandler.prototype.call = function(error, stackTrace, reason) {
      if (stackTrace === void 0) {
        stackTrace = null;
      }
      if (reason === void 0) {
        reason = null;
      }
      var longStackTrace = collection_1.isListLikeIterable(stackTrace) ? collection_1.ListWrapper.join(stackTrace, "\n\n") : stackTrace;
      var reasonStr = lang_1.isPresent(reason) ? "\n" + reason : '';
      dom_adapter_1.DOM.logError("" + error + reasonStr + "\nSTACKTRACE:\n" + longStackTrace);
    };
    ExceptionHandler = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], ExceptionHandler);
    return ExceptionHandler;
  })();
  exports.ExceptionHandler = ExceptionHandler;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/xhr", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var XHR = (function() {
    function XHR() {}
    XHR.prototype.get = function(url) {
      return null;
    };
    return XHR;
  })();
  exports.XHR = XHR;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_url_resolver", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/services/url_resolver"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var url_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/services/url_resolver");
  var StyleUrlResolver = (function() {
    function StyleUrlResolver(_resolver) {
      this._resolver = _resolver;
    }
    StyleUrlResolver.prototype.resolveUrls = function(cssText, baseUrl) {
      cssText = this._replaceUrls(cssText, _cssUrlRe, baseUrl);
      cssText = this._replaceUrls(cssText, _cssImportRe, baseUrl);
      return cssText;
    };
    StyleUrlResolver.prototype._replaceUrls = function(cssText, re, baseUrl) {
      var _this = this;
      return lang_1.StringWrapper.replaceAllMapped(cssText, re, function(m) {
        var pre = m[1];
        var url = lang_1.StringWrapper.replaceAll(m[2], _quoteRe, '');
        var post = m[3];
        var resolvedUrl = _this._resolver.resolve(baseUrl, url);
        return pre + "'" + resolvedUrl + "'" + post;
      });
    };
    StyleUrlResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [url_resolver_1.UrlResolver])], StyleUrlResolver);
    return StyleUrlResolver;
  })();
  exports.StyleUrlResolver = StyleUrlResolver;
  var _cssUrlRe = lang_1.RegExpWrapper.create('(url\\()([^)]*)(\\))');
  var _cssImportRe = lang_1.RegExpWrapper.create('(@import[\\s]+(?!url\\())[\'"]([^\'"]*)[\'"](.*;)');
  var _quoteRe = lang_1.RegExpWrapper.create('[\'"]');
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/zone/ng_zone", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var NgZone = (function() {
    function NgZone(_a) {
      var enableLongStackTrace = _a.enableLongStackTrace;
      this._inVmTurnDone = false;
      this._onTurnStart = null;
      this._onTurnDone = null;
      this._onErrorHandler = null;
      this._pendingMicrotasks = 0;
      this._hasExecutedCodeInInnerZone = false;
      this._nestedRun = 0;
      if (lang_1.global.zone) {
        this._disabled = false;
        this._mountZone = lang_1.global.zone;
        this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
      } else {
        this._disabled = true;
        this._mountZone = null;
      }
    }
    NgZone.prototype.initCallbacks = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onTurnStart = _b.onTurnStart,
          onTurnDone = _b.onTurnDone,
          onErrorHandler = _b.onErrorHandler;
      this._onTurnStart = lang_1.normalizeBlank(onTurnStart);
      this._onTurnDone = lang_1.normalizeBlank(onTurnDone);
      this._onErrorHandler = lang_1.normalizeBlank(onErrorHandler);
    };
    NgZone.prototype.run = function(fn) {
      if (this._disabled) {
        return fn();
      } else {
        return this._innerZone.run(fn);
      }
    };
    NgZone.prototype.runOutsideAngular = function(fn) {
      if (this._disabled) {
        return fn();
      } else {
        return this._mountZone.run(fn);
      }
    };
    NgZone.prototype._createInnerZone = function(zone, enableLongStackTrace) {
      var ngZone = this;
      var errorHandling;
      if (enableLongStackTrace) {
        errorHandling = collection_1.StringMapWrapper.merge(Zone.longStackTraceZone, {onError: function(e) {
            ngZone._onError(this, e);
          }});
      } else {
        errorHandling = {onError: function(e) {
            ngZone._onError(this, e);
          }};
      }
      return zone.fork(errorHandling).fork({
        '$run': function(parentRun) {
          return function() {
            try {
              ngZone._nestedRun++;
              if (!ngZone._hasExecutedCodeInInnerZone) {
                ngZone._hasExecutedCodeInInnerZone = true;
                if (ngZone._onTurnStart) {
                  parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
                }
              }
              return parentRun.apply(this, arguments);
            } finally {
              ngZone._nestedRun--;
              if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0 && !this._inVmTurnDone) {
                if (ngZone._onTurnDone && ngZone._hasExecutedCodeInInnerZone) {
                  try {
                    this._inVmTurnDone = true;
                    parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
                  } finally {
                    this._inVmTurnDone = false;
                    ngZone._hasExecutedCodeInInnerZone = false;
                  }
                }
              }
            }
          };
        },
        '$scheduleMicrotask': function(parentScheduleMicrotask) {
          return function(fn) {
            ngZone._pendingMicrotasks++;
            var microtask = function() {
              try {
                fn();
              } finally {
                ngZone._pendingMicrotasks--;
              }
            };
            parentScheduleMicrotask.call(this, microtask);
          };
        },
        _innerZone: true
      });
    };
    NgZone.prototype._onError = function(zone, e) {
      if (lang_1.isPresent(this._onErrorHandler)) {
        var trace = [lang_1.normalizeBlank(e.stack)];
        while (zone && zone.constructedAtException) {
          trace.push(zone.constructedAtException.get());
          zone = zone.parent;
        }
        this._onErrorHandler(e, trace);
      } else {
        console.log('## _onError ##');
        console.log(e.stack);
        throw e;
      }
    };
    return NgZone;
  })();
  exports.NgZone = NgZone;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/life_cycle/life_cycle", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/core/exception_handler", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        return Reflect.decorate(decorators, target, key, desc);
      switch (arguments.length) {
        case 2:
          return decorators.reduceRight(function(o, d) {
            return (d && d(o)) || o;
          }, target);
        case 3:
          return decorators.reduceRight(function(o, d) {
            return (d && d(target, key)), void 0;
          }, void 0);
        case 4:
          return decorators.reduceRight(function(o, d) {
            return (d && d(target, key, o)) || o;
          }, desc);
      }
    };
    var __metadata = (this && this.__metadata) || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(k, v);
    };
    var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
    var exception_handler_1 = require("npm:angular2@2.0.0-alpha.28/src/core/exception_handler");
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var LifeCycle = (function() {
      function LifeCycle(exceptionHandler, changeDetector, enforceNoNewChanges) {
        if (changeDetector === void 0) {
          changeDetector = null;
        }
        if (enforceNoNewChanges === void 0) {
          enforceNoNewChanges = false;
        }
        this._runningTick = false;
        this._errorHandler = function(exception, stackTrace) {
          exceptionHandler.call(exception, stackTrace);
          throw exception;
        };
        this._changeDetector = changeDetector;
        this._enforceNoNewChanges = enforceNoNewChanges;
      }
      LifeCycle.prototype.registerWith = function(zone, changeDetector) {
        var _this = this;
        if (changeDetector === void 0) {
          changeDetector = null;
        }
        if (lang_1.isPresent(changeDetector)) {
          this._changeDetector = changeDetector;
        }
        zone.initCallbacks({
          onErrorHandler: this._errorHandler,
          onTurnDone: function() {
            return _this.tick();
          }
        });
      };
      LifeCycle.prototype.tick = function() {
        if (this._runningTick) {
          throw new lang_1.BaseException("LifeCycle.tick is called recursively");
        }
        try {
          this._runningTick = true;
          this._changeDetector.detectChanges();
          if (this._enforceNoNewChanges) {
            this._changeDetector.checkNoChanges();
          }
        } finally {
          this._runningTick = false;
        }
      };
      LifeCycle = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [exception_handler_1.ExceptionHandler, Object, Boolean])], LifeCycle);
      return LifeCycle;
    })();
    exports.LifeCycle = LifeCycle;
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ShadowDomStrategy = (function() {
    function ShadowDomStrategy() {}
    ShadowDomStrategy.prototype.hasNativeContentElement = function() {
      return true;
    };
    ShadowDomStrategy.prototype.prepareShadowRoot = function(el) {
      return null;
    };
    ShadowDomStrategy.prototype.constructLightDom = function(lightDomView, el) {
      return null;
    };
    ShadowDomStrategy.prototype.processStyleElement = function(hostComponentId, templateUrl, styleElement) {};
    ShadowDomStrategy.prototype.processElement = function(hostComponentId, elementComponentId, element) {};
    return ShadowDomStrategy;
  })();
  exports.ShadowDomStrategy = ShadowDomStrategy;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/light_dom", ["npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var DestinationLightDom = (function() {
    function DestinationLightDom() {}
    return DestinationLightDom;
  })();
  exports.DestinationLightDom = DestinationLightDom;
  var _Root = (function() {
    function _Root(node, boundElement) {
      this.node = node;
      this.boundElement = boundElement;
    }
    return _Root;
  })();
  var LightDom = (function() {
    function LightDom(lightDomView, element) {
      this.shadowDomView = null;
      this._roots = null;
      this.lightDomView = lightDomView;
      this.nodes = dom_adapter_1.DOM.childNodesAsList(element);
    }
    LightDom.prototype.attachShadowDomView = function(shadowDomView) {
      this.shadowDomView = shadowDomView;
    };
    LightDom.prototype.detachShadowDomView = function() {
      this.shadowDomView = null;
    };
    LightDom.prototype.redistribute = function() {
      redistributeNodes(this.contentTags(), this.expandedDomNodes());
    };
    LightDom.prototype.contentTags = function() {
      if (lang_1.isPresent(this.shadowDomView)) {
        return this._collectAllContentTags(this.shadowDomView, []);
      } else {
        return [];
      }
    };
    LightDom.prototype._collectAllContentTags = function(view, acc) {
      var _this = this;
      if (view.proto.transitiveContentTagCount === 0) {
        return acc;
      }
      var els = view.boundElements;
      for (var i = 0; i < els.length; i++) {
        var el = els[i];
        if (lang_1.isPresent(el.contentTag)) {
          acc.push(el.contentTag);
        }
        if (lang_1.isPresent(el.viewContainer)) {
          collection_1.ListWrapper.forEach(el.viewContainer.contentTagContainers(), function(view) {
            _this._collectAllContentTags(view, acc);
          });
        }
      }
      return acc;
    };
    LightDom.prototype.expandedDomNodes = function() {
      var res = [];
      var roots = this._findRoots();
      for (var i = 0; i < roots.length; ++i) {
        var root = roots[i];
        if (lang_1.isPresent(root.boundElement)) {
          var vc = root.boundElement.viewContainer;
          var content = root.boundElement.contentTag;
          if (lang_1.isPresent(vc)) {
            res = collection_1.ListWrapper.concat(res, vc.nodes());
          } else if (lang_1.isPresent(content)) {
            res = collection_1.ListWrapper.concat(res, content.nodes());
          } else {
            res.push(root.node);
          }
        } else {
          res.push(root.node);
        }
      }
      return res;
    };
    LightDom.prototype._findRoots = function() {
      if (lang_1.isPresent(this._roots))
        return this._roots;
      var boundElements = this.lightDomView.boundElements;
      this._roots = collection_1.ListWrapper.map(this.nodes, function(n) {
        var boundElement = null;
        for (var i = 0; i < boundElements.length; i++) {
          var boundEl = boundElements[i];
          if (lang_1.isPresent(boundEl) && boundEl.element === n) {
            boundElement = boundEl;
            break;
          }
        }
        return new _Root(n, boundElement);
      });
      return this._roots;
    };
    return LightDom;
  })();
  exports.LightDom = LightDom;
  function redistributeNodes(contents, nodes) {
    for (var i = 0; i < contents.length; ++i) {
      var content = contents[i];
      var select = content.select;
      if (select.length === 0) {
        content.insert(collection_1.ListWrapper.clone(nodes));
        collection_1.ListWrapper.clear(nodes);
      } else {
        var matchSelector = function(n) {
          return dom_adapter_1.DOM.elementMatches(n, select);
        };
        var matchingNodes = collection_1.ListWrapper.filter(nodes, matchSelector);
        content.insert(matchingNodes);
        collection_1.ListWrapper.removeAll(nodes, matchingNodes);
      }
    }
    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];
      if (lang_1.isPresent(node.parentNode)) {
        dom_adapter_1.DOM.remove(nodes[i]);
      }
    }
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_css", ["npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
    var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var ShadowCss = (function() {
      function ShadowCss() {
        this.strictStyling = true;
      }
      ShadowCss.prototype.shimStyle = function(style, selector, hostSelector) {
        if (hostSelector === void 0) {
          hostSelector = '';
        }
        var cssText = dom_adapter_1.DOM.getText(style);
        return this.shimCssText(cssText, selector, hostSelector);
      };
      ShadowCss.prototype.shimCssText = function(cssText, selector, hostSelector) {
        if (hostSelector === void 0) {
          hostSelector = '';
        }
        cssText = this._insertDirectives(cssText);
        return this._scopeCssText(cssText, selector, hostSelector);
      };
      ShadowCss.prototype._insertDirectives = function(cssText) {
        cssText = this._insertPolyfillDirectivesInCssText(cssText);
        return this._insertPolyfillRulesInCssText(cssText);
      };
      ShadowCss.prototype._insertPolyfillDirectivesInCssText = function(cssText) {
        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function(m) {
          return m[1] + '{';
        });
      };
      ShadowCss.prototype._insertPolyfillRulesInCssText = function(cssText) {
        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function(m) {
          var rule = m[0];
          rule = lang_1.StringWrapper.replace(rule, m[1], '');
          rule = lang_1.StringWrapper.replace(rule, m[2], '');
          return m[3] + rule;
        });
      };
      ShadowCss.prototype._scopeCssText = function(cssText, scopeSelector, hostSelector) {
        var _this = this;
        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
        cssText = this._insertPolyfillHostInCssText(cssText);
        cssText = this._convertColonHost(cssText);
        cssText = this._convertColonHostContext(cssText);
        cssText = this._convertShadowDOMSelectors(cssText);
        if (lang_1.isPresent(scopeSelector)) {
          _withCssRules(cssText, function(rules) {
            cssText = _this._scopeRules(rules, scopeSelector, hostSelector);
          });
        }
        cssText = cssText + '\n' + unscoped;
        return cssText.trim();
      };
      ShadowCss.prototype._extractUnscopedRulesFromCssText = function(cssText) {
        var r = '',
            m;
        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
          var rule = m[0];
          rule = lang_1.StringWrapper.replace(rule, m[2], '');
          rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
          r = rule + '\n\n';
        }
        return r;
      };
      ShadowCss.prototype._convertColonHost = function(cssText) {
        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
      };
      ShadowCss.prototype._convertColonHostContext = function(cssText) {
        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
      };
      ShadowCss.prototype._convertColonRule = function(cssText, regExp, partReplacer) {
        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function(m) {
          if (lang_1.isPresent(m[2])) {
            var parts = m[2].split(','),
                r = [];
            for (var i = 0; i < parts.length; i++) {
              var p = parts[i];
              if (lang_1.isBlank(p))
                break;
              p = p.trim();
              r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
            }
            return r.join(',');
          } else {
            return _polyfillHostNoCombinator + m[3];
          }
        });
      };
      ShadowCss.prototype._colonHostContextPartReplacer = function(host, part, suffix) {
        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
          return this._colonHostPartReplacer(host, part, suffix);
        } else {
          return host + part + suffix + ', ' + part + ' ' + host + suffix;
        }
      };
      ShadowCss.prototype._colonHostPartReplacer = function(host, part, suffix) {
        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
      };
      ShadowCss.prototype._convertShadowDOMSelectors = function(cssText) {
        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
          cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
        }
        return cssText;
      };
      ShadowCss.prototype._scopeRules = function(cssRules, scopeSelector, hostSelector) {
        var cssText = '';
        if (lang_1.isPresent(cssRules)) {
          for (var i = 0; i < cssRules.length; i++) {
            var rule = cssRules[i];
            if (dom_adapter_1.DOM.isStyleRule(rule) || dom_adapter_1.DOM.isPageRule(rule)) {
              cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) + ' {\n';
              cssText += this._propertiesFromRule(rule) + '\n}\n\n';
            } else if (dom_adapter_1.DOM.isMediaRule(rule)) {
              cssText += '@media ' + rule.media.mediaText + ' {\n';
              cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
              cssText += '\n}\n\n';
            } else {
              try {
                if (lang_1.isPresent(rule.cssText)) {
                  cssText += rule.cssText + '\n\n';
                }
              } catch (x) {
                if (dom_adapter_1.DOM.isKeyframesRule(rule) && lang_1.isPresent(rule.cssRules)) {
                  cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
                }
              }
            }
          }
        }
        return cssText;
      };
      ShadowCss.prototype._ieSafeCssTextFromKeyFrameRule = function(rule) {
        var cssText = '@keyframes ' + rule.name + ' {';
        for (var i = 0; i < rule.cssRules.length; i++) {
          var r = rule.cssRules[i];
          cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
        }
        cssText += ' }';
        return cssText;
      };
      ShadowCss.prototype._scopeSelector = function(selector, scopeSelector, hostSelector, strict) {
        var r = [],
            parts = selector.split(',');
        for (var i = 0; i < parts.length; i++) {
          var p = parts[i];
          p = p.trim();
          if (this._selectorNeedsScoping(p, scopeSelector)) {
            p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(p, scopeSelector) : this._applySelectorScope(p, scopeSelector, hostSelector);
          }
          r.push(p);
        }
        return r.join(', ');
      };
      ShadowCss.prototype._selectorNeedsScoping = function(selector, scopeSelector) {
        var re = this._makeScopeMatcher(scopeSelector);
        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
      };
      ShadowCss.prototype._makeScopeMatcher = function(scopeSelector) {
        var lre = lang_1.RegExpWrapper.create('\\[');
        var rre = lang_1.RegExpWrapper.create('\\]');
        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
      };
      ShadowCss.prototype._applySelectorScope = function(selector, scopeSelector, hostSelector) {
        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
      };
      ShadowCss.prototype._applySimpleSelectorScope = function(selector, scopeSelector, hostSelector) {
        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
          var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
          selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
          return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
        } else {
          return scopeSelector + ' ' + selector;
        }
      };
      ShadowCss.prototype._applyStrictSelectorScope = function(selector, scopeSelector) {
        var isRe = lang_1.RegExpWrapper.create('\\[is=([^\\]]*)\\]');
        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function(m) {
          return m[1];
        });
        var splits = [' ', '>', '+', '~'],
            scoped = selector,
            attrName = '[' + scopeSelector + ']';
        for (var i = 0; i < splits.length; i++) {
          var sep = splits[i];
          var parts = scoped.split(sep);
          scoped = collection_1.ListWrapper.map(parts, function(p) {
            var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
            if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) && !lang_1.StringWrapper.contains(t, attrName)) {
              var re = lang_1.RegExpWrapper.create('([^:]*)(:*)(.*)');
              var m = lang_1.RegExpWrapper.firstMatch(re, t);
              if (lang_1.isPresent(m)) {
                p = m[1] + attrName + m[2] + m[3];
              }
            }
            return p;
          }).join(sep);
        }
        return scoped;
      };
      ShadowCss.prototype._insertPolyfillHostInCssText = function(selector) {
        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
        return selector;
      };
      ShadowCss.prototype._propertiesFromRule = function(rule) {
        var cssText = rule.style.cssText;
        var attrRe = lang_1.RegExpWrapper.create('[\'"]+|attr');
        if (rule.style.content.length > 0 && !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
          var contentRe = lang_1.RegExpWrapper.create('content:[^;]*;');
          cssText = lang_1.StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
        }
        return cssText;
      };
      return ShadowCss;
    })();
    exports.ShadowCss = ShadowCss;
    var _cssContentNextSelectorRe = lang_1.RegExpWrapper.create('polyfill-next-selector[^}]*content:[\\s]*?[\'"](.*?)[\'"][;\\s]*}([^{]*?){', 'im');
    var _cssContentRuleRe = lang_1.RegExpWrapper.create('(polyfill-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
    var _cssContentUnscopedRuleRe = lang_1.RegExpWrapper.create('(polyfill-unscoped-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
    var _polyfillHost = '-shadowcsshost';
    var _polyfillHostContext = '-shadowcsscontext';
    var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
    var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
    var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
    var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
    var _shadowDOMSelectorsRe = [lang_1.RegExpWrapper.create('>>>'), lang_1.RegExpWrapper.create('::shadow'), lang_1.RegExpWrapper.create('::content'), lang_1.RegExpWrapper.create('/deep/'), lang_1.RegExpWrapper.create('/shadow-deep/'), lang_1.RegExpWrapper.create('/shadow/')];
    var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
    var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
    var _colonHostRe = lang_1.RegExpWrapper.create(':host', 'im');
    var _colonHostContextRe = lang_1.RegExpWrapper.create(':host-context', 'im');
    function _cssToRules(cssText) {
      return dom_adapter_1.DOM.cssToRules(cssText);
    }
    function _withCssRules(cssText, callback) {
      if (lang_1.isBlank(callback))
        return ;
      var rules = _cssToRules(cssText);
      callback(rules);
    }
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/xhr_impl", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/render/xhr"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var xhr_1 = require("npm:angular2@2.0.0-alpha.28/src/render/xhr");
  var XHRImpl = (function(_super) {
    __extends(XHRImpl, _super);
    function XHRImpl() {
      _super.apply(this, arguments);
    }
    XHRImpl.prototype.get = function(url) {
      var completer = async_1.PromiseWrapper.completer();
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, true);
      xhr.responseType = 'text';
      xhr.onload = function() {
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;
        var status = xhr.status === 1223 ? 204 : xhr.status;
        if (status === 0) {
          status = response ? 200 : 0;
        }
        if (200 <= status && status <= 300) {
          completer.resolve(response);
        } else {
          completer.reject("Failed to load " + url, null);
        }
      };
      xhr.onerror = function() {
        completer.reject("Failed to load " + url, null);
      };
      xhr.send();
      return completer.promise;
    };
    XHRImpl = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], XHRImpl);
    return XHRImpl;
  })(xhr_1.XHR);
  exports.XHRImpl = XHRImpl;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var BUBBLE_SYMBOL = '^';
  var EventManager = (function() {
    function EventManager(_plugins, _zone) {
      this._plugins = _plugins;
      this._zone = _zone;
      for (var i = 0; i < _plugins.length; i++) {
        _plugins[i].manager = this;
      }
    }
    EventManager.prototype.addEventListener = function(element, eventName, handler) {
      var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
      var plugin = this._findPluginFor(withoutBubbleSymbol);
      plugin.addEventListener(element, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
    };
    EventManager.prototype.addGlobalEventListener = function(target, eventName, handler) {
      var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
      var plugin = this._findPluginFor(withoutBubbleSymbol);
      return plugin.addGlobalEventListener(target, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
    };
    EventManager.prototype.getZone = function() {
      return this._zone;
    };
    EventManager.prototype._findPluginFor = function(eventName) {
      var plugins = this._plugins;
      for (var i = 0; i < plugins.length; i++) {
        var plugin = plugins[i];
        if (plugin.supports(eventName)) {
          return plugin;
        }
      }
      throw new lang_1.BaseException("No event manager plugin found for event " + eventName);
    };
    EventManager.prototype._removeBubbleSymbol = function(eventName) {
      return eventName[0] == BUBBLE_SYMBOL ? lang_1.StringWrapper.substring(eventName, 1) : eventName;
    };
    return EventManager;
  })();
  exports.EventManager = EventManager;
  var EventManagerPlugin = (function() {
    function EventManagerPlugin() {}
    EventManagerPlugin.prototype.supports = function(eventName) {
      return false;
    };
    EventManagerPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
      throw "not implemented";
    };
    EventManagerPlugin.prototype.addGlobalEventListener = function(element, eventName, handler, shouldSupportBubble) {
      throw "not implemented";
    };
    return EventManagerPlugin;
  })();
  exports.EventManagerPlugin = EventManagerPlugin;
  var DomEventsPlugin = (function(_super) {
    __extends(DomEventsPlugin, _super);
    function DomEventsPlugin() {
      _super.apply(this, arguments);
    }
    DomEventsPlugin.prototype.supports = function(eventName) {
      return true;
    };
    DomEventsPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
      var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
      this.manager._zone.runOutsideAngular(function() {
        dom_adapter_1.DOM.on(element, eventName, outsideHandler);
      });
    };
    DomEventsPlugin.prototype.addGlobalEventListener = function(target, eventName, handler, shouldSupportBubble) {
      var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
      var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
      return this.manager._zone.runOutsideAngular(function() {
        return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler);
      });
    };
    DomEventsPlugin.prototype._getOutsideHandler = function(shouldSupportBubble, element, handler, zone) {
      return shouldSupportBubble ? DomEventsPlugin.bubbleCallback(element, handler, zone) : DomEventsPlugin.sameElementCallback(element, handler, zone);
    };
    DomEventsPlugin.sameElementCallback = function(element, handler, zone) {
      return function(event) {
        if (event.target === element) {
          zone.run(function() {
            return handler(event);
          });
        }
      };
    };
    DomEventsPlugin.bubbleCallback = function(element, handler, zone) {
      return function(event) {
        return zone.run(function() {
          return handler(event);
        });
      };
    };
    return DomEventsPlugin;
  })(EventManagerPlugin);
  exports.DomEventsPlugin = DomEventsPlugin;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/events/key_events", ["npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var __extends = (this && this.__extends) || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
      function __() {
        this.constructor = d;
      }
      __.prototype = b.prototype;
      d.prototype = new __();
    };
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
    var event_manager_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager");
    var modifierKeys = ['alt', 'control', 'meta', 'shift'];
    var modifierKeyGetters = {
      'alt': function(event) {
        return event.altKey;
      },
      'control': function(event) {
        return event.ctrlKey;
      },
      'meta': function(event) {
        return event.metaKey;
      },
      'shift': function(event) {
        return event.shiftKey;
      }
    };
    var KeyEventsPlugin = (function(_super) {
      __extends(KeyEventsPlugin, _super);
      function KeyEventsPlugin() {
        _super.call(this);
      }
      KeyEventsPlugin.prototype.supports = function(eventName) {
        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
      };
      KeyEventsPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
        var outsideHandler = KeyEventsPlugin.eventCallback(element, shouldSupportBubble, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
        this.manager.getZone().runOutsideAngular(function() {
          dom_adapter_1.DOM.on(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
        });
      };
      KeyEventsPlugin.parseEventName = function(eventName) {
        var parts = eventName.toLowerCase().split('.');
        var domEventName = collection_1.ListWrapper.removeAt(parts, 0);
        if ((parts.length === 0) || !(lang_1.StringWrapper.equals(domEventName, 'keydown') || lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
          return null;
        }
        var key = KeyEventsPlugin._normalizeKey(collection_1.ListWrapper.removeLast(parts));
        var fullKey = '';
        collection_1.ListWrapper.forEach(modifierKeys, function(modifierName) {
          if (collection_1.ListWrapper.contains(parts, modifierName)) {
            collection_1.ListWrapper.remove(parts, modifierName);
            fullKey += modifierName + '.';
          }
        });
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
          return null;
        }
        return {
          'domEventName': domEventName,
          'fullKey': fullKey
        };
      };
      KeyEventsPlugin.getEventFullKey = function(event) {
        var fullKey = '';
        var key = dom_adapter_1.DOM.getEventKey(event);
        key = key.toLowerCase();
        if (lang_1.StringWrapper.equals(key, ' ')) {
          key = 'space';
        } else if (lang_1.StringWrapper.equals(key, '.')) {
          key = 'dot';
        }
        collection_1.ListWrapper.forEach(modifierKeys, function(modifierName) {
          if (modifierName != key) {
            var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
            if (modifierGetter(event)) {
              fullKey += modifierName + '.';
            }
          }
        });
        fullKey += key;
        return fullKey;
      };
      KeyEventsPlugin.eventCallback = function(element, shouldSupportBubble, fullKey, handler, zone) {
        return function(event) {
          var correctElement = shouldSupportBubble || event.target === element;
          if (correctElement && lang_1.StringWrapper.equals(KeyEventsPlugin.getEventFullKey(event), fullKey)) {
            zone.run(function() {
              return handler(event);
            });
          }
        };
      };
      KeyEventsPlugin._normalizeKey = function(keyName) {
        switch (keyName) {
          case 'esc':
            return 'escape';
          default:
            return keyName;
        }
      };
      return KeyEventsPlugin;
    })(event_manager_1.EventManagerPlugin);
    exports.KeyEventsPlugin = KeyEventsPlugin;
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/events/hammer_common", ["npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var event_manager_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var _eventNames = {
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    'press': true,
    'pressup': true,
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    'tap': true
  };
  var HammerGesturesPluginCommon = (function(_super) {
    __extends(HammerGesturesPluginCommon, _super);
    function HammerGesturesPluginCommon() {
      _super.call(this);
    }
    HammerGesturesPluginCommon.prototype.supports = function(eventName) {
      eventName = eventName.toLowerCase();
      return collection_1.StringMapWrapper.contains(_eventNames, eventName);
    };
    return HammerGesturesPluginCommon;
  })(event_manager_1.EventManagerPlugin);
  exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/dynamic_component_loader", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/core/compiler/compiler", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var compiler_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/compiler");
  var view_manager_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager");
  var ComponentRef = (function() {
    function ComponentRef(location, instance, dispose) {
      this.location = location;
      this.instance = instance;
      this.dispose = dispose;
    }
    Object.defineProperty(ComponentRef.prototype, "hostView", {
      get: function() {
        return this.location.parentView;
      },
      enumerable: true,
      configurable: true
    });
    return ComponentRef;
  })();
  exports.ComponentRef = ComponentRef;
  var DynamicComponentLoader = (function() {
    function DynamicComponentLoader(_compiler, _viewManager) {
      this._compiler = _compiler;
      this._viewManager = _viewManager;
    }
    DynamicComponentLoader.prototype.loadAsRoot = function(typeOrBinding, overrideSelector, injector) {
      var _this = this;
      if (overrideSelector === void 0) {
        overrideSelector = null;
      }
      if (injector === void 0) {
        injector = null;
      }
      return this._compiler.compileInHost(typeOrBinding).then(function(hostProtoViewRef) {
        var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector);
        var newLocation = _this._viewManager.getHostElement(hostViewRef);
        var component = _this._viewManager.getComponent(newLocation);
        var dispose = function() {
          _this._viewManager.destroyRootHostView(hostViewRef);
        };
        return new ComponentRef(newLocation, component, dispose);
      });
    };
    DynamicComponentLoader.prototype.loadIntoLocation = function(typeOrBinding, hostLocation, anchorName, injector) {
      if (injector === void 0) {
        injector = null;
      }
      return this.loadNextToLocation(typeOrBinding, this._viewManager.getNamedElementInComponentView(hostLocation, anchorName), injector);
    };
    DynamicComponentLoader.prototype.loadNextToLocation = function(typeOrBinding, location, injector) {
      var _this = this;
      if (injector === void 0) {
        injector = null;
      }
      return this._compiler.compileInHost(typeOrBinding).then(function(hostProtoViewRef) {
        var viewContainer = _this._viewManager.getViewContainer(location);
        var hostViewRef = viewContainer.create(hostProtoViewRef, viewContainer.length, null, injector);
        var newLocation = _this._viewManager.getHostElement(hostViewRef);
        var component = _this._viewManager.getComponent(newLocation);
        var dispose = function() {
          var index = viewContainer.indexOf(hostViewRef);
          viewContainer.remove(index);
        };
        return new ComponentRef(newLocation, component, dispose);
      });
    };
    DynamicComponentLoader = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [compiler_1.Compiler, view_manager_1.AppViewManager])], DynamicComponentLoader);
    return DynamicComponentLoader;
  })();
  exports.DynamicComponentLoader = DynamicComponentLoader;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/testability/get_testability", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var PublicTestability = (function() {
    function PublicTestability(testability) {
      this._testability = testability;
    }
    PublicTestability.prototype.whenStable = function(callback) {
      this._testability.whenStable(callback);
    };
    PublicTestability.prototype.findBindings = function(using, binding, exactMatch) {
      return this._testability.findBindings(using, binding, exactMatch);
    };
    return PublicTestability;
  })();
  var GetTestability = (function() {
    function GetTestability() {}
    GetTestability.addToWindow = function(registry) {
      lang_1.global.getAngularTestability = function(elem) {
        var testability = registry.findTestabilityInTree(elem);
        if (testability == null) {
          throw new Error('Could not find testability for element.');
        }
        return new PublicTestability(testability);
      };
    };
    return GetTestability;
  })();
  exports.GetTestability = GetTestability;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/content_tag", ["npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var ContentStrategy = (function() {
    function ContentStrategy() {}
    ContentStrategy.prototype.insert = function(nodes) {};
    return ContentStrategy;
  })();
  var RenderedContent = (function(_super) {
    __extends(RenderedContent, _super);
    function RenderedContent(contentEl) {
      _super.call(this);
      this.beginScript = contentEl;
      this.endScript = dom_adapter_1.DOM.nextSibling(this.beginScript);
      this.nodes = [];
    }
    RenderedContent.prototype.insert = function(nodes) {
      this.nodes = nodes;
      dom_adapter_1.DOM.insertAllBefore(this.endScript, nodes);
      this._removeNodesUntil(collection_1.ListWrapper.isEmpty(nodes) ? this.endScript : nodes[0]);
    };
    RenderedContent.prototype._removeNodesUntil = function(node) {
      var p = dom_adapter_1.DOM.parentElement(this.beginScript);
      for (var next = dom_adapter_1.DOM.nextSibling(this.beginScript); next !== node; next = dom_adapter_1.DOM.nextSibling(this.beginScript)) {
        dom_adapter_1.DOM.removeChild(p, next);
      }
    };
    return RenderedContent;
  })(ContentStrategy);
  var IntermediateContent = (function(_super) {
    __extends(IntermediateContent, _super);
    function IntermediateContent(destinationLightDom) {
      _super.call(this);
      this.destinationLightDom = destinationLightDom;
      this.nodes = [];
    }
    IntermediateContent.prototype.insert = function(nodes) {
      this.nodes = nodes;
      this.destinationLightDom.redistribute();
    };
    return IntermediateContent;
  })(ContentStrategy);
  var Content = (function() {
    function Content(contentStartElement, select) {
      this.contentStartElement = contentStartElement;
      this.select = select;
      this._strategy = null;
    }
    Content.prototype.init = function(destinationLightDom) {
      this._strategy = lang_1.isPresent(destinationLightDom) ? new IntermediateContent(destinationLightDom) : new RenderedContent(this.contentStartElement);
    };
    Content.prototype.nodes = function() {
      return this._strategy.nodes;
    };
    Content.prototype.insert = function(nodes) {
      this._strategy.insert(nodes);
    };
    return Content;
  })();
  exports.Content = Content;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/util", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  exports.NG_BINDING_CLASS_SELECTOR = '.ng-binding';
  exports.NG_BINDING_CLASS = 'ng-binding';
  exports.EVENT_TARGET_SEPARATOR = ':';
  var CAMEL_CASE_REGEXP = lang_1.RegExpWrapper.create('([A-Z])');
  var DASH_CASE_REGEXP = lang_1.RegExpWrapper.create('-([a-z])');
  function camelCaseToDashCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function(m) {
      return '-' + m[1].toLowerCase();
    });
  }
  exports.camelCaseToDashCase = camelCaseToDashCase;
  function dashCaseToCamelCase(input) {
    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function(m) {
      return m[1].toUpperCase();
    });
  }
  exports.dashCaseToCamelCase = dashCaseToCamelCase;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/view/view", ["npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/render/dom/util"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/util");
  function resolveInternalDomView(viewRef) {
    return viewRef._view;
  }
  exports.resolveInternalDomView = resolveInternalDomView;
  var DomViewRef = (function(_super) {
    __extends(DomViewRef, _super);
    function DomViewRef(_view) {
      _super.call(this);
      this._view = _view;
    }
    return DomViewRef;
  })(api_1.RenderViewRef);
  exports.DomViewRef = DomViewRef;
  var DomView = (function() {
    function DomView(proto, rootNodes, boundTextNodes, boundElements) {
      this.proto = proto;
      this.rootNodes = rootNodes;
      this.boundTextNodes = boundTextNodes;
      this.boundElements = boundElements;
      this.hostLightDom = null;
      this.shadowRoot = null;
      this.hydrated = false;
      this.eventDispatcher = null;
      this.eventHandlerRemovers = [];
    }
    DomView.prototype.getDirectParentElement = function(boundElementIndex) {
      var binder = this.proto.elementBinders[boundElementIndex];
      var parent = null;
      if (binder.parentIndex !== -1 && binder.distanceToParent === 1) {
        parent = this.boundElements[binder.parentIndex];
      }
      return parent;
    };
    DomView.prototype.setElementProperty = function(elementIndex, propertyName, value) {
      dom_adapter_1.DOM.setProperty(this.boundElements[elementIndex].element, propertyName, value);
    };
    DomView.prototype.setElementAttribute = function(elementIndex, attributeName, value) {
      var element = this.boundElements[elementIndex].element;
      var dashCasedAttributeName = util_1.camelCaseToDashCase(attributeName);
      if (lang_1.isPresent(value)) {
        dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(value));
      } else {
        dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
      }
    };
    DomView.prototype.setElementClass = function(elementIndex, className, isAdd) {
      var element = this.boundElements[elementIndex].element;
      var dashCasedClassName = util_1.camelCaseToDashCase(className);
      if (isAdd) {
        dom_adapter_1.DOM.addClass(element, dashCasedClassName);
      } else {
        dom_adapter_1.DOM.removeClass(element, dashCasedClassName);
      }
    };
    DomView.prototype.setElementStyle = function(elementIndex, styleName, value) {
      var element = this.boundElements[elementIndex].element;
      var dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
      if (lang_1.isPresent(value)) {
        dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, lang_1.stringify(value));
      } else {
        dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
      }
    };
    DomView.prototype.invokeElementMethod = function(elementIndex, methodName, args) {
      var element = this.boundElements[elementIndex].element;
      dom_adapter_1.DOM.invoke(element, methodName, args);
    };
    DomView.prototype.setText = function(textIndex, value) {
      dom_adapter_1.DOM.setText(this.boundTextNodes[textIndex], value);
    };
    DomView.prototype.dispatchEvent = function(elementIndex, eventName, event) {
      var allowDefaultBehavior = true;
      if (lang_1.isPresent(this.eventDispatcher)) {
        var evalLocals = new collection_1.Map();
        evalLocals.set('$event', event);
        allowDefaultBehavior = this.eventDispatcher.dispatchEvent(elementIndex, eventName, evalLocals);
        if (!allowDefaultBehavior) {
          event.preventDefault();
        }
      }
      return allowDefaultBehavior;
    };
    return DomView;
  })();
  exports.DomView = DomView;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/view/element", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var DomElement = (function() {
    function DomElement(proto, element, contentTag) {
      this.proto = proto;
      this.element = element;
      this.contentTag = contentTag;
    }
    return DomElement;
  })();
  exports.DomElement = DomElement;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/view/view_container", ["npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var DomViewContainer = (function() {
    function DomViewContainer() {
      this.views = [];
    }
    DomViewContainer.prototype.contentTagContainers = function() {
      return this.views;
    };
    DomViewContainer.prototype.nodes = function() {
      var r = [];
      for (var i = 0; i < this.views.length; ++i) {
        r = collection_1.ListWrapper.concat(r, this.views[i].rootNodes);
      }
      return r;
    };
    return DomViewContainer;
  })();
  exports.DomViewContainer = DomViewContainer;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_element", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var CompileElement = (function() {
      function CompileElement(element, compilationUnit) {
        if (compilationUnit === void 0) {
          compilationUnit = '';
        }
        this.element = element;
        this._attrs = null;
        this._classList = null;
        this.isViewRoot = false;
        this.inheritedProtoView = null;
        this.distanceToInheritedBinder = 0;
        this.inheritedElementBinder = null;
        this.compileChildren = true;
        var tplDesc = lang_1.assertionsEnabled() ? getElementDescription(element) : null;
        if (compilationUnit !== '') {
          this.elementDescription = compilationUnit;
          if (lang_1.isPresent(tplDesc))
            this.elementDescription += ": " + tplDesc;
        } else {
          this.elementDescription = tplDesc;
        }
      }
      CompileElement.prototype.isBound = function() {
        return lang_1.isPresent(this.inheritedElementBinder) && this.distanceToInheritedBinder === 0;
      };
      CompileElement.prototype.bindElement = function() {
        if (!this.isBound()) {
          var parentBinder = this.inheritedElementBinder;
          this.inheritedElementBinder = this.inheritedProtoView.bindElement(this.element, this.elementDescription);
          if (lang_1.isPresent(parentBinder)) {
            this.inheritedElementBinder.setParent(parentBinder, this.distanceToInheritedBinder);
          }
          this.distanceToInheritedBinder = 0;
        }
        return this.inheritedElementBinder;
      };
      CompileElement.prototype.refreshAttrs = function() {
        this._attrs = null;
      };
      CompileElement.prototype.attrs = function() {
        if (lang_1.isBlank(this._attrs)) {
          this._attrs = dom_adapter_1.DOM.attributeMap(this.element);
        }
        return this._attrs;
      };
      CompileElement.prototype.refreshClassList = function() {
        this._classList = null;
      };
      CompileElement.prototype.classList = function() {
        if (lang_1.isBlank(this._classList)) {
          this._classList = [];
          var elClassList = dom_adapter_1.DOM.classList(this.element);
          for (var i = 0; i < elClassList.length; i++) {
            this._classList.push(elClassList[i]);
          }
        }
        return this._classList;
      };
      return CompileElement;
    })();
    exports.CompileElement = CompileElement;
    function getElementDescription(domElement) {
      var buf = new lang_1.StringJoiner();
      var atts = dom_adapter_1.DOM.attributeMap(domElement);
      buf.add("<");
      buf.add(dom_adapter_1.DOM.tagName(domElement).toLowerCase());
      addDescriptionAttribute(buf, "id", atts.get("id"));
      addDescriptionAttribute(buf, "class", atts.get("class"));
      collection_1.MapWrapper.forEach(atts, function(attValue, attName) {
        if (attName !== "id" && attName !== "class") {
          addDescriptionAttribute(buf, attName, attValue);
        }
      });
      buf.add(">");
      return buf.toString();
    }
    function addDescriptionAttribute(buffer, attName, attValue) {
      if (lang_1.isPresent(attValue)) {
        if (attValue.length === 0) {
          buffer.add(' ' + attName);
        } else {
          buffer.add(' ' + attName + '="' + attValue + '"');
        }
      }
    }
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_control", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var CompileControl = (function() {
      function CompileControl(_steps) {
        this._steps = _steps;
        this._currentStepIndex = 0;
        this._parent = null;
        this._results = null;
        this._additionalChildren = null;
      }
      CompileControl.prototype.internalProcess = function(results, startStepIndex, parent, current) {
        this._results = results;
        var previousStepIndex = this._currentStepIndex;
        var previousParent = this._parent;
        this._ignoreCurrentElement = false;
        for (var i = startStepIndex; i < this._steps.length && !this._ignoreCurrentElement; i++) {
          var step = this._steps[i];
          this._parent = parent;
          this._currentStepIndex = i;
          step.process(parent, current, this);
          parent = this._parent;
        }
        if (!this._ignoreCurrentElement) {
          results.push(current);
        }
        this._currentStepIndex = previousStepIndex;
        this._parent = previousParent;
        var localAdditionalChildren = this._additionalChildren;
        this._additionalChildren = null;
        return localAdditionalChildren;
      };
      CompileControl.prototype.addParent = function(newElement) {
        this.internalProcess(this._results, this._currentStepIndex + 1, this._parent, newElement);
        this._parent = newElement;
      };
      CompileControl.prototype.addChild = function(element) {
        if (lang_1.isBlank(this._additionalChildren)) {
          this._additionalChildren = [];
        }
        this._additionalChildren.push(element);
      };
      CompileControl.prototype.ignoreCurrentElement = function() {
        this._ignoreCurrentElement = true;
      };
      return CompileControl;
    })();
    exports.CompileControl = CompileControl;
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/view/element_binder", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ElementBinder = (function() {
    function ElementBinder(_a) {
      var _b = _a === void 0 ? {} : _a,
          textNodeIndices = _b.textNodeIndices,
          contentTagSelector = _b.contentTagSelector,
          nestedProtoView = _b.nestedProtoView,
          componentId = _b.componentId,
          eventLocals = _b.eventLocals,
          localEvents = _b.localEvents,
          globalEvents = _b.globalEvents,
          parentIndex = _b.parentIndex,
          distanceToParent = _b.distanceToParent,
          elementIsEmpty = _b.elementIsEmpty;
      this.textNodeIndices = textNodeIndices;
      this.contentTagSelector = contentTagSelector;
      this.nestedProtoView = nestedProtoView;
      this.componentId = componentId;
      this.eventLocals = eventLocals;
      this.localEvents = localEvents;
      this.globalEvents = globalEvents;
      this.parentIndex = parentIndex;
      this.distanceToParent = distanceToParent;
      this.elementIsEmpty = elementIsEmpty;
    }
    return ElementBinder;
  })();
  exports.ElementBinder = ElementBinder;
  var Event = (function() {
    function Event(name, target, fullName) {
      this.name = name;
      this.target = target;
      this.fullName = fullName;
    }
    return Event;
  })();
  exports.Event = Event;
  var HostAction = (function() {
    function HostAction(actionName, actionExpression, expression) {
      this.actionName = actionName;
      this.actionExpression = actionExpression;
      this.expression = expression;
    }
    return HostAction;
  })();
  exports.HostAction = HostAction;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/property_binding_parser", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/render/dom/util"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/util");
  var BIND_NAME_REGEXP = lang_1.RegExpWrapper.create('^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$');
  var PropertyBindingParser = (function() {
    function PropertyBindingParser(_parser) {
      this._parser = _parser;
    }
    PropertyBindingParser.prototype.process = function(parent, current, control) {
      var _this = this;
      var attrs = current.attrs();
      var newAttrs = new Map();
      collection_1.MapWrapper.forEach(attrs, function(attrValue, attrName) {
        var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
        if (lang_1.isPresent(bindParts)) {
          if (lang_1.isPresent(bindParts[1])) {
            _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[2])) {
            var identifier = bindParts[5];
            var value = attrValue == '' ? '\$implicit' : attrValue;
            _this._bindVariable(identifier, value, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[3])) {
            _this._bindEvent(bindParts[5], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[4])) {
            _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
            _this._bindAssignmentEvent(bindParts[5], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[6])) {
            _this._bindProperty(bindParts[6], attrValue, current, newAttrs);
            _this._bindAssignmentEvent(bindParts[6], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[7])) {
            _this._bindProperty(bindParts[7], attrValue, current, newAttrs);
          } else if (lang_1.isPresent(bindParts[8])) {
            _this._bindEvent(bindParts[8], attrValue, current, newAttrs);
          }
        } else {
          var expr = _this._parser.parseInterpolation(attrValue, current.elementDescription);
          if (lang_1.isPresent(expr)) {
            _this._bindPropertyAst(attrName, expr, current, newAttrs);
          }
        }
      });
      collection_1.MapWrapper.forEach(newAttrs, function(attrValue, attrName) {
        attrs.set(attrName, attrValue);
      });
    };
    PropertyBindingParser.prototype._bindVariable = function(identifier, value, current, newAttrs) {
      current.bindElement().bindVariable(util_1.dashCaseToCamelCase(identifier), value);
      newAttrs.set(identifier, value);
    };
    PropertyBindingParser.prototype._bindProperty = function(name, expression, current, newAttrs) {
      this._bindPropertyAst(name, this._parser.parseBinding(expression, current.elementDescription), current, newAttrs);
    };
    PropertyBindingParser.prototype._bindPropertyAst = function(name, ast, current, newAttrs) {
      var binder = current.bindElement();
      binder.bindProperty(util_1.dashCaseToCamelCase(name), ast);
      newAttrs.set(name, ast.source);
    };
    PropertyBindingParser.prototype._bindAssignmentEvent = function(name, expression, current, newAttrs) {
      this._bindEvent(name, expression + "=$event", current, newAttrs);
    };
    PropertyBindingParser.prototype._bindEvent = function(name, expression, current, newAttrs) {
      current.bindElement().bindEvent(util_1.dashCaseToCamelCase(name), this._parser.parseAction(expression, current.elementDescription));
    };
    return PropertyBindingParser;
  })();
  exports.PropertyBindingParser = PropertyBindingParser;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/text_interpolation_parser", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var TextInterpolationParser = (function() {
    function TextInterpolationParser(_parser) {
      this._parser = _parser;
    }
    TextInterpolationParser.prototype.process = function(parent, current, control) {
      if (!current.compileChildren) {
        return ;
      }
      var element = current.element;
      var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(element));
      for (var i = 0; i < childNodes.length; i++) {
        var node = childNodes[i];
        if (dom_adapter_1.DOM.isTextNode(node)) {
          var text = dom_adapter_1.DOM.nodeValue(node);
          var expr = this._parser.parseInterpolation(text, current.elementDescription);
          if (lang_1.isPresent(expr)) {
            dom_adapter_1.DOM.setText(node, ' ');
            current.bindElement().bindText(node, expr);
          }
        }
      }
    };
    return TextInterpolationParser;
  })();
  exports.TextInterpolationParser = TextInterpolationParser;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/selector", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var _EMPTY_ATTR_VALUE = '';
    var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(\\))|' + '(\\s*,\\s*)');
    var CssSelector = (function() {
      function CssSelector() {
        this.element = null;
        this.classNames = [];
        this.attrs = [];
        this.notSelectors = [];
      }
      CssSelector.parse = function(selector) {
        var results = [];
        var _addResult = function(res, cssSel) {
          if (cssSel.notSelectors.length > 0 && lang_1.isBlank(cssSel.element) && collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
            cssSel.element = "*";
          }
          res.push(cssSel);
        };
        var cssSelector = new CssSelector();
        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
        var match;
        var current = cssSelector;
        var inNot = false;
        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
          if (lang_1.isPresent(match[1])) {
            if (inNot) {
              throw new lang_1.BaseException('Nesting :not is not allowed in a selector');
            }
            inNot = true;
            current = new CssSelector();
            cssSelector.notSelectors.push(current);
          }
          if (lang_1.isPresent(match[2])) {
            current.setElement(match[2]);
          }
          if (lang_1.isPresent(match[3])) {
            current.addClassName(match[3]);
          }
          if (lang_1.isPresent(match[4])) {
            current.addAttribute(match[4], match[5]);
          }
          if (lang_1.isPresent(match[6])) {
            inNot = false;
            current = cssSelector;
          }
          if (lang_1.isPresent(match[7])) {
            if (inNot) {
              throw new lang_1.BaseException('Multiple selectors in :not are not supported');
            }
            _addResult(results, cssSelector);
            cssSelector = current = new CssSelector();
          }
        }
        _addResult(results, cssSelector);
        return results;
      };
      CssSelector.prototype.isElementSelector = function() {
        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) && collection_1.ListWrapper.isEmpty(this.attrs) && this.notSelectors.length === 0;
      };
      CssSelector.prototype.setElement = function(element) {
        if (element === void 0) {
          element = null;
        }
        if (lang_1.isPresent(element)) {
          element = element.toLowerCase();
        }
        this.element = element;
      };
      CssSelector.prototype.addAttribute = function(name, value) {
        if (value === void 0) {
          value = _EMPTY_ATTR_VALUE;
        }
        this.attrs.push(name.toLowerCase());
        if (lang_1.isPresent(value)) {
          value = value.toLowerCase();
        } else {
          value = _EMPTY_ATTR_VALUE;
        }
        this.attrs.push(value);
      };
      CssSelector.prototype.addClassName = function(name) {
        this.classNames.push(name.toLowerCase());
      };
      CssSelector.prototype.toString = function() {
        var res = '';
        if (lang_1.isPresent(this.element)) {
          res += this.element;
        }
        if (lang_1.isPresent(this.classNames)) {
          for (var i = 0; i < this.classNames.length; i++) {
            res += '.' + this.classNames[i];
          }
        }
        if (lang_1.isPresent(this.attrs)) {
          for (var i = 0; i < this.attrs.length; ) {
            var attrName = this.attrs[i++];
            var attrValue = this.attrs[i++];
            res += '[' + attrName;
            if (attrValue.length > 0) {
              res += '=' + attrValue;
            }
            res += ']';
          }
        }
        collection_1.ListWrapper.forEach(this.notSelectors, function(notSelector) {
          res += ":not(" + notSelector.toString() + ")";
        });
        return res;
      };
      return CssSelector;
    })();
    exports.CssSelector = CssSelector;
    var SelectorMatcher = (function() {
      function SelectorMatcher() {
        this._elementMap = new collection_1.Map();
        this._elementPartialMap = new collection_1.Map();
        this._classMap = new collection_1.Map();
        this._classPartialMap = new collection_1.Map();
        this._attrValueMap = new collection_1.Map();
        this._attrValuePartialMap = new collection_1.Map();
        this._listContexts = [];
      }
      SelectorMatcher.createNotMatcher = function(notSelectors) {
        var notMatcher = new SelectorMatcher();
        notMatcher.addSelectables(notSelectors, null);
        return notMatcher;
      };
      SelectorMatcher.prototype.addSelectables = function(cssSelectors, callbackCtxt) {
        var listContext = null;
        if (cssSelectors.length > 1) {
          listContext = new SelectorListContext(cssSelectors);
          this._listContexts.push(listContext);
        }
        for (var i = 0; i < cssSelectors.length; i++) {
          this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
        }
      };
      SelectorMatcher.prototype._addSelectable = function(cssSelector, callbackCtxt, listContext) {
        var matcher = this;
        var element = cssSelector.element;
        var classNames = cssSelector.classNames;
        var attrs = cssSelector.attrs;
        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
        if (lang_1.isPresent(element)) {
          var isTerminal = attrs.length === 0 && classNames.length === 0;
          if (isTerminal) {
            this._addTerminal(matcher._elementMap, element, selectable);
          } else {
            matcher = this._addPartial(matcher._elementPartialMap, element);
          }
        }
        if (lang_1.isPresent(classNames)) {
          for (var index = 0; index < classNames.length; index++) {
            var isTerminal = attrs.length === 0 && index === classNames.length - 1;
            var className = classNames[index];
            if (isTerminal) {
              this._addTerminal(matcher._classMap, className, selectable);
            } else {
              matcher = this._addPartial(matcher._classPartialMap, className);
            }
          }
        }
        if (lang_1.isPresent(attrs)) {
          for (var index = 0; index < attrs.length; ) {
            var isTerminal = index === attrs.length - 2;
            var attrName = attrs[index++];
            var attrValue = attrs[index++];
            if (isTerminal) {
              var terminalMap = matcher._attrValueMap;
              var terminalValuesMap = terminalMap.get(attrName);
              if (lang_1.isBlank(terminalValuesMap)) {
                terminalValuesMap = new collection_1.Map();
                terminalMap.set(attrName, terminalValuesMap);
              }
              this._addTerminal(terminalValuesMap, attrValue, selectable);
            } else {
              var parttialMap = matcher._attrValuePartialMap;
              var partialValuesMap = parttialMap.get(attrName);
              if (lang_1.isBlank(partialValuesMap)) {
                partialValuesMap = new collection_1.Map();
                parttialMap.set(attrName, partialValuesMap);
              }
              matcher = this._addPartial(partialValuesMap, attrValue);
            }
          }
        }
      };
      SelectorMatcher.prototype._addTerminal = function(map, name, selectable) {
        var terminalList = map.get(name);
        if (lang_1.isBlank(terminalList)) {
          terminalList = [];
          map.set(name, terminalList);
        }
        terminalList.push(selectable);
      };
      SelectorMatcher.prototype._addPartial = function(map, name) {
        var matcher = map.get(name);
        if (lang_1.isBlank(matcher)) {
          matcher = new SelectorMatcher();
          map.set(name, matcher);
        }
        return matcher;
      };
      SelectorMatcher.prototype.match = function(cssSelector, matchedCallback) {
        var result = false;
        var element = cssSelector.element;
        var classNames = cssSelector.classNames;
        var attrs = cssSelector.attrs;
        for (var i = 0; i < this._listContexts.length; i++) {
          this._listContexts[i].alreadyMatched = false;
        }
        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
        if (lang_1.isPresent(classNames)) {
          for (var index = 0; index < classNames.length; index++) {
            var className = classNames[index];
            result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
            result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
          }
        }
        if (lang_1.isPresent(attrs)) {
          for (var index = 0; index < attrs.length; ) {
            var attrName = attrs[index++];
            var attrValue = attrs[index++];
            var terminalValuesMap = this._attrValueMap.get(attrName);
            if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
              result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
            }
            result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
            var partialValuesMap = this._attrValuePartialMap.get(attrName);
            if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
              result = this._matchPartial(partialValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
            }
            result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
          }
        }
        return result;
      };
      SelectorMatcher.prototype._matchTerminal = function(map, name, cssSelector, matchedCallback) {
        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
          return false;
        }
        var selectables = map.get(name);
        var starSelectables = map.get("*");
        if (lang_1.isPresent(starSelectables)) {
          selectables = collection_1.ListWrapper.concat(selectables, starSelectables);
        }
        if (lang_1.isBlank(selectables)) {
          return false;
        }
        var selectable;
        var result = false;
        for (var index = 0; index < selectables.length; index++) {
          selectable = selectables[index];
          result = selectable.finalize(cssSelector, matchedCallback) || result;
        }
        return result;
      };
      SelectorMatcher.prototype._matchPartial = function(map, name, cssSelector, matchedCallback) {
        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
          return false;
        }
        var nestedSelector = map.get(name);
        if (lang_1.isBlank(nestedSelector)) {
          return false;
        }
        return nestedSelector.match(cssSelector, matchedCallback);
      };
      return SelectorMatcher;
    })();
    exports.SelectorMatcher = SelectorMatcher;
    var SelectorListContext = (function() {
      function SelectorListContext(selectors) {
        this.selectors = selectors;
        this.alreadyMatched = false;
      }
      return SelectorListContext;
    })();
    var SelectorContext = (function() {
      function SelectorContext(selector, cbContext, listContext) {
        this.selector = selector;
        this.cbContext = cbContext;
        this.listContext = listContext;
        this.notSelectors = selector.notSelectors;
      }
      SelectorContext.prototype.finalize = function(cssSelector, callback) {
        var result = true;
        if (this.notSelectors.length > 0 && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
          var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
          result = !notMatcher.match(cssSelector, null);
        }
        if (result && lang_1.isPresent(callback) && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
          if (lang_1.isPresent(this.listContext)) {
            this.listContext.alreadyMatched = true;
          }
          callback(this.selector, this.cbContext);
        }
        return result;
      };
      return SelectorContext;
    })();
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_splitter", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_element", "npm:angular2@2.0.0-alpha.28/src/render/dom/util"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var compile_element_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_element");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/util");
  var ViewSplitter = (function() {
    function ViewSplitter(_parser) {
      this._parser = _parser;
    }
    ViewSplitter.prototype.process = function(parent, current, control) {
      var attrs = current.attrs();
      var templateBindings = attrs.get('template');
      var hasTemplateBinding = lang_1.isPresent(templateBindings);
      collection_1.MapWrapper.forEach(attrs, function(attrValue, attrName) {
        if (lang_1.StringWrapper.startsWith(attrName, '*')) {
          var key = lang_1.StringWrapper.substring(attrName, 1);
          if (hasTemplateBinding) {
            throw new lang_1.BaseException("Only one template directive per element is allowed: " + (templateBindings + " and " + key + " cannot be used simultaneously ") + ("in " + current.elementDescription));
          } else {
            templateBindings = (attrValue.length == 0) ? key : key + ' ' + attrValue;
            hasTemplateBinding = true;
          }
        }
      });
      if (lang_1.isPresent(parent)) {
        if (dom_adapter_1.DOM.isTemplateElement(current.element)) {
          if (!current.isViewRoot) {
            var viewRoot = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
            viewRoot.inheritedProtoView = current.bindElement().bindNestedProtoView(viewRoot.element);
            viewRoot.elementDescription = current.elementDescription;
            viewRoot.isViewRoot = true;
            this._moveChildNodes(dom_adapter_1.DOM.content(current.element), dom_adapter_1.DOM.content(viewRoot.element));
            control.addChild(viewRoot);
          }
        }
        if (hasTemplateBinding) {
          var newParent = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
          newParent.inheritedProtoView = current.inheritedProtoView;
          newParent.inheritedElementBinder = current.inheritedElementBinder;
          newParent.distanceToInheritedBinder = current.distanceToInheritedBinder;
          newParent.elementDescription = current.elementDescription;
          current.inheritedProtoView = newParent.bindElement().bindNestedProtoView(current.element);
          current.inheritedElementBinder = null;
          current.distanceToInheritedBinder = 0;
          current.isViewRoot = true;
          this._parseTemplateBindings(templateBindings, newParent);
          this._addParentElement(current.element, newParent.element);
          control.addParent(newParent);
          dom_adapter_1.DOM.remove(current.element);
        }
      }
    };
    ViewSplitter.prototype._moveChildNodes = function(source, target) {
      var next = dom_adapter_1.DOM.firstChild(source);
      while (lang_1.isPresent(next)) {
        dom_adapter_1.DOM.appendChild(target, next);
        next = dom_adapter_1.DOM.firstChild(source);
      }
    };
    ViewSplitter.prototype._addParentElement = function(currentElement, newParentElement) {
      dom_adapter_1.DOM.insertBefore(currentElement, newParentElement);
      dom_adapter_1.DOM.appendChild(newParentElement, currentElement);
    };
    ViewSplitter.prototype._parseTemplateBindings = function(templateBindings, compileElement) {
      var bindings = this._parser.parseTemplateBindings(templateBindings, compileElement.elementDescription);
      for (var i = 0; i < bindings.length; i++) {
        var binding = bindings[i];
        if (binding.keyIsVar) {
          compileElement.bindElement().bindVariable(util_1.dashCaseToCamelCase(binding.key), binding.name);
          compileElement.attrs().set(binding.key, binding.name);
        } else if (lang_1.isPresent(binding.expression)) {
          compileElement.bindElement().bindProperty(util_1.dashCaseToCamelCase(binding.key), binding.expression);
          compileElement.attrs().set(binding.key, binding.expression.source);
        } else {
          dom_adapter_1.DOM.setAttribute(compileElement.element, binding.key, '');
        }
      }
    };
    return ViewSplitter;
  })();
  exports.ViewSplitter = ViewSplitter;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_compile_step", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
    var ShadowDomCompileStep = (function() {
      function ShadowDomCompileStep(_shadowDomStrategy, _view) {
        this._shadowDomStrategy = _shadowDomStrategy;
        this._view = _view;
      }
      ShadowDomCompileStep.prototype.process = function(parent, current, control) {
        var tagName = dom_adapter_1.DOM.tagName(current.element).toUpperCase();
        if (tagName == 'STYLE') {
          this._processStyleElement(current, control);
        } else if (tagName == 'CONTENT') {
          this._processContentElement(current);
        } else {
          var componentId = current.isBound() ? current.inheritedElementBinder.componentId : null;
          this._shadowDomStrategy.processElement(this._view.componentId, componentId, current.element);
        }
      };
      ShadowDomCompileStep.prototype._processStyleElement = function(current, control) {
        this._shadowDomStrategy.processStyleElement(this._view.componentId, this._view.templateAbsUrl, current.element);
        control.ignoreCurrentElement();
      };
      ShadowDomCompileStep.prototype._processContentElement = function(current) {
        if (this._shadowDomStrategy.hasNativeContentElement()) {
          return ;
        }
        var attrs = current.attrs();
        var selector = attrs.get('select');
        selector = lang_1.isPresent(selector) ? selector : '';
        var contentStart = dom_adapter_1.DOM.createScriptTag('type', 'ng/contentStart');
        if (lang_1.assertionsEnabled()) {
          dom_adapter_1.DOM.setAttribute(contentStart, 'select', selector);
        }
        var contentEnd = dom_adapter_1.DOM.createScriptTag('type', 'ng/contentEnd');
        dom_adapter_1.DOM.insertBefore(current.element, contentStart);
        dom_adapter_1.DOM.insertBefore(current.element, contentEnd);
        dom_adapter_1.DOM.remove(current.element);
        current.element = contentStart;
        current.bindElement().setContentTagSelector(selector);
      };
      return ShadowDomCompileStep;
    })();
    exports.ShadowDomCompileStep = ShadowDomCompileStep;
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/application_tokens", ["npm:angular2@2.0.0-alpha.28/di"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  exports.appComponentRefToken = new di_1.OpaqueToken('ComponentRef');
  exports.appComponentTypeToken = new di_1.OpaqueToken('RootComponent');
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations/di", ["npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/di"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var di_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/di");
  exports.QueryAnnotation = di_1.Query;
  exports.AttributeAnnotation = di_1.Attribute;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/interfaces", ["npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var __ignore_me = lang_1.global;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations/annotations", ["npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/annotations"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/annotations");
  exports.ComponentAnnotation = annotations_1.Component;
  exports.DirectiveAnnotation = annotations_1.Directive;
  exports.onDestroy = annotations_1.onDestroy;
  exports.onChange = annotations_1.onChange;
  exports.onCheck = annotations_1.onCheck;
  exports.onInit = annotations_1.onInit;
  exports.onAllChangesDone = annotations_1.onAllChangesDone;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations/decorators", ["npm:angular2@2.0.0-alpha.28/src/core/annotations/annotations", "npm:angular2@2.0.0-alpha.28/src/core/annotations/view", "npm:angular2@2.0.0-alpha.28/src/core/annotations/visibility", "npm:angular2@2.0.0-alpha.28/src/core/annotations/di", "npm:angular2@2.0.0-alpha.28/src/util/decorators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations/annotations");
  var view_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations/view");
  var visibility_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations/visibility");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations/di");
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/util/decorators");
  exports.Component = decorators_1.makeDecorator(annotations_1.ComponentAnnotation, function(fn) {
    return fn.View = exports.View;
  });
  exports.Directive = decorators_1.makeDecorator(annotations_1.DirectiveAnnotation);
  exports.View = decorators_1.makeDecorator(view_1.ViewAnnotation, function(fn) {
    return fn.View = exports.View;
  });
  exports.Self = decorators_1.makeParamDecorator(visibility_1.SelfAnnotation);
  exports.Parent = decorators_1.makeParamDecorator(visibility_1.ParentAnnotation);
  exports.Ancestor = decorators_1.makeParamDecorator(visibility_1.AncestorAnnotation);
  exports.Unbounded = decorators_1.makeParamDecorator(visibility_1.UnboundedAnnotation);
  exports.Attribute = decorators_1.makeParamDecorator(di_1.AttributeAnnotation);
  exports.Query = decorators_1.makeParamDecorator(di_1.QueryAnnotation);
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/directives/ng_for", ["npm:angular2@2.0.0-alpha.28/annotations", "npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/annotations");
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var NgFor = (function() {
    function NgFor(viewContainer, protoViewRef, pipes) {
      this.viewContainer = viewContainer;
      this.protoViewRef = protoViewRef;
      this.pipes = pipes;
    }
    Object.defineProperty(NgFor.prototype, "ngForOf", {
      set: function(value) {
        this._ngForOf = value;
        this._pipe = this.pipes.get("iterableDiff", value, null, this._pipe);
      },
      enumerable: true,
      configurable: true
    });
    NgFor.prototype.onCheck = function() {
      var diff = this._pipe.transform(this._ngForOf);
      if (lang_1.isPresent(diff))
        this._applyChanges(diff.wrapped);
    };
    NgFor.prototype._applyChanges = function(changes) {
      if (lang_1.isBlank(changes)) {
        this.viewContainer.clear();
        return ;
      }
      var recordViewTuples = [];
      changes.forEachRemovedItem(function(removedRecord) {
        return recordViewTuples.push(new RecordViewTuple(removedRecord, null));
      });
      changes.forEachMovedItem(function(movedRecord) {
        return recordViewTuples.push(new RecordViewTuple(movedRecord, null));
      });
      var insertTuples = NgFor.bulkRemove(recordViewTuples, this.viewContainer);
      changes.forEachAddedItem(function(addedRecord) {
        return insertTuples.push(new RecordViewTuple(addedRecord, null));
      });
      NgFor.bulkInsert(insertTuples, this.viewContainer, this.protoViewRef);
      for (var i = 0; i < insertTuples.length; i++) {
        this._perViewChange(insertTuples[i].view, insertTuples[i].record);
      }
    };
    NgFor.prototype._perViewChange = function(view, record) {
      view.setLocal('\$implicit', record.item);
      view.setLocal('index', record.currentIndex);
    };
    NgFor.bulkRemove = function(tuples, viewContainer) {
      tuples.sort(function(a, b) {
        return a.record.previousIndex - b.record.previousIndex;
      });
      var movedTuples = [];
      for (var i = tuples.length - 1; i >= 0; i--) {
        var tuple = tuples[i];
        if (lang_1.isPresent(tuple.record.currentIndex)) {
          tuple.view = viewContainer.detach(tuple.record.previousIndex);
          movedTuples.push(tuple);
        } else {
          viewContainer.remove(tuple.record.previousIndex);
        }
      }
      return movedTuples;
    };
    NgFor.bulkInsert = function(tuples, viewContainer, protoViewRef) {
      tuples.sort(function(a, b) {
        return a.record.currentIndex - b.record.currentIndex;
      });
      for (var i = 0; i < tuples.length; i++) {
        var tuple = tuples[i];
        if (lang_1.isPresent(tuple.view)) {
          viewContainer.insert(tuple.view, tuple.record.currentIndex);
        } else {
          tuple.view = viewContainer.create(protoViewRef, tuple.record.currentIndex);
        }
      }
      return tuples;
    };
    NgFor = __decorate([annotations_1.Directive({
      selector: '[ng-for][ng-for-of]',
      properties: ['ngForOf'],
      lifecycle: [angular2_1.onCheck]
    }), __metadata('design:paramtypes', [angular2_1.ViewContainerRef, angular2_1.ProtoViewRef, angular2_1.PipeRegistry])], NgFor);
    return NgFor;
  })();
  exports.NgFor = NgFor;
  var RecordViewTuple = (function() {
    function RecordViewTuple(record, view) {
      this.record = record;
      this.view = view;
    }
    return RecordViewTuple;
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/directives/ng_if", ["npm:angular2@2.0.0-alpha.28/annotations", "npm:angular2@2.0.0-alpha.28/core", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/annotations");
  var core_1 = require("npm:angular2@2.0.0-alpha.28/core");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var NgIf = (function() {
    function NgIf(viewContainer, protoViewRef) {
      this.viewContainer = viewContainer;
      this.prevCondition = null;
      this.protoViewRef = protoViewRef;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
      set: function(newCondition) {
        if (newCondition && (lang_1.isBlank(this.prevCondition) || !this.prevCondition)) {
          this.prevCondition = true;
          this.viewContainer.create(this.protoViewRef);
        } else if (!newCondition && (lang_1.isBlank(this.prevCondition) || this.prevCondition)) {
          this.prevCondition = false;
          this.viewContainer.clear();
        }
      },
      enumerable: true,
      configurable: true
    });
    NgIf = __decorate([annotations_1.Directive({
      selector: '[ng-if]',
      properties: ['ngIf']
    }), __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ProtoViewRef])], NgIf);
    return NgIf;
  })();
  exports.NgIf = NgIf;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/directives/ng_non_bindable", ["npm:angular2@2.0.0-alpha.28/annotations"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/annotations");
  var NgNonBindable = (function() {
    function NgNonBindable() {}
    NgNonBindable = __decorate([annotations_1.Directive({
      selector: '[ng-non-bindable]',
      compileChildren: false
    }), __metadata('design:paramtypes', [])], NgNonBindable);
    return NgNonBindable;
  })();
  exports.NgNonBindable = NgNonBindable;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/directives/ng_switch", ["npm:angular2@2.0.0-alpha.28/annotations", "npm:angular2@2.0.0-alpha.28/core", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/annotations");
  var core_1 = require("npm:angular2@2.0.0-alpha.28/core");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var SwitchView = (function() {
    function SwitchView(viewContainerRef, protoViewRef) {
      this._protoViewRef = protoViewRef;
      this._viewContainerRef = viewContainerRef;
    }
    SwitchView.prototype.create = function() {
      this._viewContainerRef.create(this._protoViewRef);
    };
    SwitchView.prototype.destroy = function() {
      this._viewContainerRef.clear();
    };
    return SwitchView;
  })();
  exports.SwitchView = SwitchView;
  var NgSwitch = (function() {
    function NgSwitch() {
      this._valueViews = new collection_1.Map();
      this._activeViews = [];
      this._useDefault = false;
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
      set: function(value) {
        this._emptyAllActiveViews();
        this._useDefault = false;
        var views = this._valueViews.get(value);
        if (lang_1.isBlank(views)) {
          this._useDefault = true;
          views = lang_1.normalizeBlank(this._valueViews.get(_whenDefault));
        }
        this._activateViews(views);
        this._switchValue = value;
      },
      enumerable: true,
      configurable: true
    });
    NgSwitch.prototype._onWhenValueChanged = function(oldWhen, newWhen, view) {
      this._deregisterView(oldWhen, view);
      this._registerView(newWhen, view);
      if (oldWhen === this._switchValue) {
        view.destroy();
        collection_1.ListWrapper.remove(this._activeViews, view);
      } else if (newWhen === this._switchValue) {
        if (this._useDefault) {
          this._useDefault = false;
          this._emptyAllActiveViews();
        }
        view.create();
        this._activeViews.push(view);
      }
      if (this._activeViews.length === 0 && !this._useDefault) {
        this._useDefault = true;
        this._activateViews(this._valueViews.get(_whenDefault));
      }
    };
    NgSwitch.prototype._emptyAllActiveViews = function() {
      var activeContainers = this._activeViews;
      for (var i = 0; i < activeContainers.length; i++) {
        activeContainers[i].destroy();
      }
      this._activeViews = [];
    };
    NgSwitch.prototype._activateViews = function(views) {
      if (lang_1.isPresent(views)) {
        for (var i = 0; i < views.length; i++) {
          views[i].create();
        }
        this._activeViews = views;
      }
    };
    NgSwitch.prototype._registerView = function(value, view) {
      var views = this._valueViews.get(value);
      if (lang_1.isBlank(views)) {
        views = [];
        this._valueViews.set(value, views);
      }
      views.push(view);
    };
    NgSwitch.prototype._deregisterView = function(value, view) {
      if (value == _whenDefault)
        return ;
      var views = this._valueViews.get(value);
      if (views.length == 1) {
        collection_1.MapWrapper.delete(this._valueViews, value);
      } else {
        collection_1.ListWrapper.remove(views, view);
      }
    };
    NgSwitch = __decorate([annotations_1.Directive({
      selector: '[ng-switch]',
      properties: ['ngSwitch']
    }), __metadata('design:paramtypes', [])], NgSwitch);
    return NgSwitch;
  })();
  exports.NgSwitch = NgSwitch;
  var NgSwitchWhen = (function() {
    function NgSwitchWhen(viewContainer, protoViewRef, sswitch) {
      this._value = _whenDefault;
      this._switch = sswitch;
      this._view = new SwitchView(viewContainer, protoViewRef);
    }
    NgSwitchWhen.prototype.onDestroy = function() {
      this._switch;
    };
    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
      set: function(value) {
        this._switch._onWhenValueChanged(this._value, value, this._view);
        this._value = value;
      },
      enumerable: true,
      configurable: true
    });
    NgSwitchWhen = __decorate([annotations_1.Directive({
      selector: '[ng-switch-when]',
      properties: ['ngSwitchWhen']
    }), __param(2, annotations_1.Parent()), __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ProtoViewRef, NgSwitch])], NgSwitchWhen);
    return NgSwitchWhen;
  })();
  exports.NgSwitchWhen = NgSwitchWhen;
  var NgSwitchDefault = (function() {
    function NgSwitchDefault(viewContainer, protoViewRef, sswitch) {
      sswitch._registerView(_whenDefault, new SwitchView(viewContainer, protoViewRef));
    }
    NgSwitchDefault = __decorate([annotations_1.Directive({selector: '[ng-switch-default]'}), __param(2, annotations_1.Parent()), __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ProtoViewRef, NgSwitch])], NgSwitchDefault);
    return NgSwitchDefault;
  })();
  exports.NgSwitchDefault = NgSwitchDefault;
  var _whenDefault = new Object();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/directives/class", ["npm:angular2@2.0.0-alpha.28/annotations", "npm:angular2@2.0.0-alpha.28/core", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe_registry", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/iterable_changes", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/annotations");
  var core_1 = require("npm:angular2@2.0.0-alpha.28/core");
  var pipe_registry_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe_registry");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var iterable_changes_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/iterable_changes");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var CSSClass = (function() {
    function CSSClass(_pipeRegistry, _ngEl, _renderer) {
      this._pipeRegistry = _pipeRegistry;
      this._ngEl = _ngEl;
      this._renderer = _renderer;
    }
    Object.defineProperty(CSSClass.prototype, "rawClass", {
      set: function(v) {
        this._cleanupClasses(this._rawClass);
        if (lang_1.isString(v)) {
          v = v.split(' ');
        }
        this._rawClass = v;
        this._pipe = this._pipeRegistry.get(collection_1.isListLikeIterable(v) ? 'iterableDiff' : 'keyValDiff', v);
      },
      enumerable: true,
      configurable: true
    });
    CSSClass.prototype.onCheck = function() {
      var diff = this._pipe.transform(this._rawClass);
      if (lang_1.isPresent(diff) && lang_1.isPresent(diff.wrapped)) {
        if (diff.wrapped instanceof iterable_changes_1.IterableChanges) {
          this._applyArrayChanges(diff.wrapped);
        } else {
          this._applyObjectChanges(diff.wrapped);
        }
      }
    };
    CSSClass.prototype._cleanupClasses = function(rawClassVal) {
      var _this = this;
      if (lang_1.isPresent(rawClassVal)) {
        if (collection_1.isListLikeIterable(rawClassVal)) {
          collection_1.ListWrapper.forEach(rawClassVal, function(className) {
            _this._toggleClass(className, false);
          });
        } else {
          collection_1.StringMapWrapper.forEach(rawClassVal, function(expVal, className) {
            if (expVal)
              _this._toggleClass(className, false);
          });
        }
      }
    };
    CSSClass.prototype._applyObjectChanges = function(diff) {
      var _this = this;
      diff.forEachAddedItem(function(record) {
        _this._toggleClass(record.key, record.currentValue);
      });
      diff.forEachChangedItem(function(record) {
        _this._toggleClass(record.key, record.currentValue);
      });
      diff.forEachRemovedItem(function(record) {
        if (record.previousValue) {
          _this._toggleClass(record.key, false);
        }
      });
    };
    CSSClass.prototype._applyArrayChanges = function(diff) {
      var _this = this;
      diff.forEachAddedItem(function(record) {
        _this._toggleClass(record.item, true);
      });
      diff.forEachRemovedItem(function(record) {
        _this._toggleClass(record.item, false);
      });
    };
    CSSClass.prototype._toggleClass = function(className, enabled) {
      this._renderer.setElementClass(this._ngEl, className, enabled);
    };
    CSSClass = __decorate([annotations_1.Directive({
      selector: '[class]',
      lifecycle: [annotations_1.onCheck],
      properties: ['rawClass: class']
    }), __metadata('design:paramtypes', [pipe_registry_1.PipeRegistry, core_1.ElementRef, api_1.Renderer])], CSSClass);
    return CSSClass;
  })();
  exports.CSSClass = CSSClass;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/validators", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var Validators = (function() {
    function Validators() {}
    Validators.required = function(c) {
      return lang_1.isBlank(c.value) || c.value == "" ? {"required": true} : null;
    };
    Validators.nullValidator = function(c) {
      return null;
    };
    Validators.compose = function(validators) {
      return function(c) {
        var res = collection_1.ListWrapper.reduce(validators, function(res, validator) {
          var errors = validator(c);
          return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
        }, {});
        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
      };
    };
    Validators.group = function(c) {
      var res = {};
      collection_1.StringMapWrapper.forEach(c.controls, function(control, name) {
        if (c.contains(name) && lang_1.isPresent(control.errors)) {
          Validators._mergeErrors(control, res);
        }
      });
      return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
    };
    Validators.array = function(c) {
      var res = {};
      collection_1.ListWrapper.forEach(c.controls, function(control) {
        if (lang_1.isPresent(control.errors)) {
          Validators._mergeErrors(control, res);
        }
      });
      return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
    };
    Validators._mergeErrors = function(control, res) {
      collection_1.StringMapWrapper.forEach(control.errors, function(value, error) {
        if (!collection_1.StringMapWrapper.contains(res, error)) {
          res[error] = [];
        }
        var current = res[error];
        current.push(control);
      });
    };
    return Validators;
  })();
  exports.Validators = Validators;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ControlContainer = (function() {
    function ControlContainer() {}
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    return ControlContainer;
  })();
  exports.ControlContainer = ControlContainer;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var NgControl = (function() {
    function NgControl() {
      this.name = null;
      this.valueAccessor = null;
    }
    Object.defineProperty(NgControl.prototype, "validator", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControl.prototype, "path", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControl.prototype, "control", {
      get: function() {
        return null;
      },
      enumerable: true,
      configurable: true
    });
    NgControl.prototype.viewToModelUpdate = function(newValue) {};
    return NgControl;
  })();
  exports.NgControl = NgControl;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/validators", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/src/forms/validators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/validators");
  var NgValidator = (function() {
    function NgValidator() {}
    Object.defineProperty(NgValidator.prototype, "validator", {
      get: function() {
        throw "Is not implemented";
      },
      enumerable: true,
      configurable: true
    });
    return NgValidator;
  })();
  exports.NgValidator = NgValidator;
  var requiredValidatorBinding = lang_1.CONST_EXPR(new di_1.Binding(NgValidator, {toAlias: di_1.forwardRef(function() {
      return NgRequiredValidator;
    })}));
  var NgRequiredValidator = (function(_super) {
    __extends(NgRequiredValidator, _super);
    function NgRequiredValidator() {
      _super.apply(this, arguments);
    }
    Object.defineProperty(NgRequiredValidator.prototype, "validator", {
      get: function() {
        return validators_1.Validators.required;
      },
      enumerable: true,
      configurable: true
    });
    NgRequiredValidator = __decorate([angular2_1.Directive({
      selector: '[required][ng-control],[required][ng-form-control],[required][ng-model]',
      hostInjector: [requiredValidatorBinding]
    }), __metadata('design:paramtypes', [])], NgRequiredValidator);
    return NgRequiredValidator;
  })(NgValidator);
  exports.NgRequiredValidator = NgRequiredValidator;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/forms/validators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/validators");
  function controlPath(name, parent) {
    var p = collection_1.ListWrapper.clone(parent.path);
    p.push(name);
    return p;
  }
  exports.controlPath = controlPath;
  function setUpControl(c, dir) {
    if (lang_1.isBlank(c))
      _throwError(dir, "Cannot find control");
    if (lang_1.isBlank(dir.valueAccessor))
      _throwError(dir, "No value accessor for");
    c.validator = validators_1.Validators.compose([c.validator, dir.validator]);
    dir.valueAccessor.writeValue(c.value);
    dir.valueAccessor.registerOnChange(function(newValue) {
      dir.viewToModelUpdate(newValue);
      c.updateValue(newValue);
      c.markAsDirty();
    });
    c.registerOnChange(function(newValue) {
      return dir.valueAccessor.writeValue(newValue);
    });
    dir.valueAccessor.registerOnTouched(function() {
      return c.markAsTouched();
    });
  }
  exports.setUpControl = setUpControl;
  function composeNgValidator(ngValidators) {
    if (lang_1.isBlank(ngValidators))
      return validators_1.Validators.nullValidator;
    return validators_1.Validators.compose(collection_1.iterableToList(ngValidators).map(function(v) {
      return v.validator;
    }));
  }
  exports.composeNgValidator = composeNgValidator;
  function _throwError(dir, message) {
    var path = collection_1.ListWrapper.join(dir.path, " -> ");
    throw new lang_1.BaseException(message + " '" + path + "'");
  }
  function setProperty(renderer, elementRef, propName, propValue) {
    renderer.setElementProperty(elementRef, propName, propValue);
  }
  exports.setProperty = setProperty;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_control", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/forms/directives/validators", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/validators");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var formControlBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, {toAlias: di_1.forwardRef(function() {
      return NgFormControl;
    })}));
  var NgFormControl = (function(_super) {
    __extends(NgFormControl, _super);
    function NgFormControl(ngValidators) {
      _super.call(this);
      this.update = new async_1.EventEmitter();
      this._added = false;
      this.ngValidators = ngValidators;
    }
    NgFormControl.prototype.onChange = function(c) {
      if (!this._added) {
        shared_1.setUpControl(this.form, this);
        this.form.updateValidity();
        this._added = true;
      }
      if (collection_1.StringMapWrapper.contains(c, "model")) {
        this.form.updateValue(this.model);
      }
    };
    Object.defineProperty(NgFormControl.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFormControl.prototype, "control", {
      get: function() {
        return this.form;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFormControl.prototype, "validator", {
      get: function() {
        return shared_1.composeNgValidator(this.ngValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgFormControl.prototype.viewToModelUpdate = function(newValue) {
      async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    NgFormControl = __decorate([angular2_1.Directive({
      selector: '[ng-form-control]',
      hostInjector: [formControlBinding],
      properties: ['form: ngFormControl', 'model: ngModel'],
      events: ['update: ngModel'],
      lifecycle: [angular2_1.onChange],
      exportAs: 'form'
    }), __param(0, angular2_1.Query(validators_1.NgValidator)), __metadata('design:paramtypes', [angular2_1.QueryList])], NgFormControl);
    return NgFormControl;
  })(ng_control_1.NgControl);
  exports.NgFormControl = NgFormControl;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_model", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/forms/model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/validators", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  var model_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/model");
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/validators");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var formControlBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, {toAlias: di_1.forwardRef(function() {
      return NgModel;
    })}));
  var NgModel = (function(_super) {
    __extends(NgModel, _super);
    function NgModel(ngValidators) {
      _super.call(this);
      this._control = new model_1.Control("");
      this._added = false;
      this.update = new async_1.EventEmitter();
      this.ngValidators = ngValidators;
    }
    NgModel.prototype.onChange = function(c) {
      if (!this._added) {
        shared_1.setUpControl(this._control, this);
        this._control.updateValidity();
        this._added = true;
      }
      if (collection_1.StringMapWrapper.contains(c, "model")) {
        this._control.updateValue(this.model);
      }
    };
    Object.defineProperty(NgModel.prototype, "control", {
      get: function() {
        return this._control;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
      get: function() {
        return shared_1.composeNgValidator(this.ngValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgModel.prototype.viewToModelUpdate = function(newValue) {
      async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    NgModel = __decorate([angular2_1.Directive({
      selector: '[ng-model]:not([ng-control]):not([ng-form-control])',
      hostInjector: [formControlBinding],
      properties: ['model: ngModel'],
      events: ['update: ngModel'],
      lifecycle: [angular2_1.onChange],
      exportAs: 'form'
    }), __param(0, angular2_1.Query(validators_1.NgValidator)), __metadata('design:paramtypes', [angular2_1.QueryList])], NgModel);
    return NgModel;
  })(ng_control_1.NgControl);
  exports.NgModel = NgModel;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_group", ["npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var controlGroupBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, {toAlias: di_1.forwardRef(function() {
      return NgControlGroup;
    })}));
  var NgControlGroup = (function(_super) {
    __extends(NgControlGroup, _super);
    function NgControlGroup(_parent) {
      _super.call(this);
      this._parent = _parent;
    }
    NgControlGroup.prototype.onInit = function() {
      this.formDirective.addControlGroup(this);
    };
    NgControlGroup.prototype.onDestroy = function() {
      this.formDirective.removeControlGroup(this);
    };
    Object.defineProperty(NgControlGroup.prototype, "path", {
      get: function() {
        return shared_1.controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlGroup.prototype, "formDirective", {
      get: function() {
        return this._parent.formDirective;
      },
      enumerable: true,
      configurable: true
    });
    NgControlGroup = __decorate([angular2_1.Directive({
      selector: '[ng-control-group]',
      hostInjector: [controlGroupBinding],
      properties: ['name: ng-control-group'],
      lifecycle: [angular2_1.onInit, angular2_1.onDestroy],
      exportAs: 'form'
    }), __param(0, angular2_1.Ancestor()), __metadata('design:paramtypes', [control_container_1.ControlContainer])], NgControlGroup);
    return NgControlGroup;
  })(control_container_1.ControlContainer);
  exports.NgControlGroup = NgControlGroup;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_model", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var formDirectiveBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, {toAlias: di_1.forwardRef(function() {
      return NgFormModel;
    })}));
  var NgFormModel = (function(_super) {
    __extends(NgFormModel, _super);
    function NgFormModel() {
      _super.apply(this, arguments);
      this.form = null;
      this.directives = [];
      this.ngSubmit = new async_1.EventEmitter();
    }
    NgFormModel.prototype.onChange = function(_) {
      this._updateDomValue();
    };
    Object.defineProperty(NgFormModel.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgFormModel.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    NgFormModel.prototype.addControl = function(dir) {
      var c = this.form.find(dir.path);
      shared_1.setUpControl(c, dir);
      c.updateValidity();
      this.directives.push(dir);
    };
    NgFormModel.prototype.getControl = function(dir) {
      return this.form.find(dir.path);
    };
    NgFormModel.prototype.removeControl = function(dir) {
      collection_1.ListWrapper.remove(this.directives, dir);
    };
    NgFormModel.prototype.addControlGroup = function(dir) {};
    NgFormModel.prototype.removeControlGroup = function(dir) {};
    NgFormModel.prototype.updateModel = function(dir, value) {
      var c = this.form.find(dir.path);
      c.updateValue(value);
    };
    NgFormModel.prototype.onSubmit = function() {
      async_1.ObservableWrapper.callNext(this.ngSubmit, null);
      return false;
    };
    NgFormModel.prototype._updateDomValue = function() {
      var _this = this;
      collection_1.ListWrapper.forEach(this.directives, function(dir) {
        var c = _this.form.find(dir.path);
        dir.valueAccessor.writeValue(c.value);
      });
    };
    NgFormModel = __decorate([angular2_1.Directive({
      selector: '[ng-form-model]',
      hostInjector: [formDirectiveBinding],
      properties: ['form: ng-form-model'],
      lifecycle: [angular2_1.onChange],
      host: {'(submit)': 'onSubmit()'},
      events: ['ngSubmit'],
      exportAs: 'form'
    }), __metadata('design:paramtypes', [])], NgFormModel);
    return NgFormModel;
  })(control_container_1.ControlContainer);
  exports.NgFormModel = NgFormModel;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form", ["npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/core/annotations/decorators", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container", "npm:angular2@2.0.0-alpha.28/src/forms/model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations/decorators");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container");
  var model_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/model");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var formDirectiveBinding = lang_1.CONST_EXPR(new di_1.Binding(control_container_1.ControlContainer, {toAlias: di_1.forwardRef(function() {
      return NgForm;
    })}));
  var NgForm = (function(_super) {
    __extends(NgForm, _super);
    function NgForm() {
      _super.call(this);
      this.ngSubmit = new async_1.EventEmitter();
      this.form = new model_1.ControlGroup({});
    }
    Object.defineProperty(NgForm.prototype, "formDirective", {
      get: function() {
        return this;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
      get: function() {
        return [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
      get: function() {
        return this.form.controls;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "value", {
      get: function() {
        return this.form.value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgForm.prototype, "errors", {
      get: function() {
        return this.form.errors;
      },
      enumerable: true,
      configurable: true
    });
    NgForm.prototype.addControl = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        var c = new model_1.Control("");
        shared_1.setUpControl(c, dir);
        container.addControl(dir.name, c);
        c.updateValidity();
      });
    };
    NgForm.prototype.getControl = function(dir) {
      return this.form.find(dir.path);
    };
    NgForm.prototype.removeControl = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        if (lang_1.isPresent(container)) {
          container.removeControl(dir.name);
          container.updateValidity();
        }
      });
    };
    NgForm.prototype.addControlGroup = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        var c = new model_1.ControlGroup({});
        container.addControl(dir.name, c);
        c.updateValidity();
      });
    };
    NgForm.prototype.removeControlGroup = function(dir) {
      var _this = this;
      this._later(function(_) {
        var container = _this._findContainer(dir.path);
        if (lang_1.isPresent(container)) {
          container.removeControl(dir.name);
          container.updateValidity();
        }
      });
    };
    NgForm.prototype.updateModel = function(dir, value) {
      var _this = this;
      this._later(function(_) {
        var c = _this.form.find(dir.path);
        c.updateValue(value);
      });
    };
    NgForm.prototype.onSubmit = function() {
      async_1.ObservableWrapper.callNext(this.ngSubmit, null);
      return false;
    };
    NgForm.prototype._findContainer = function(path) {
      collection_1.ListWrapper.removeLast(path);
      return collection_1.ListWrapper.isEmpty(path) ? this.form : this.form.find(path);
    };
    NgForm.prototype._later = function(fn) {
      var c = async_1.PromiseWrapper.completer();
      async_1.PromiseWrapper.then(c.promise, fn, function(_) {});
      c.resolve(null);
    };
    NgForm = __decorate([decorators_1.Directive({
      selector: 'form:not([ng-no-form]):not([ng-form-model]),ng-form,[ng-form]',
      hostInjector: [formDirectiveBinding],
      host: {'(submit)': 'onSubmit()'},
      events: ['ngSubmit'],
      exportAs: 'form'
    }), __metadata('design:paramtypes', [])], NgForm);
    return NgForm;
  })(control_container_1.ControlContainer);
  exports.NgForm = NgForm;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/default_value_accessor", ["npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var DefaultValueAccessor = (function() {
    function DefaultValueAccessor(cd, renderer, elementRef) {
      this.cd = cd;
      this.renderer = renderer;
      this.elementRef = elementRef;
      this.value = null;
      this.onChange = function(_) {};
      this.onTouched = function() {};
      cd.valueAccessor = this;
    }
    DefaultValueAccessor.prototype.writeValue = function(value) {
      this.value = lang_1.isBlank(value) ? '' : value;
      shared_1.setProperty(this.renderer, this.elementRef, 'value', this.value);
    };
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassUntouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassTouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassPristine", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassDirty", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassValid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DefaultValueAccessor.prototype, "ngClassInvalid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    DefaultValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    DefaultValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    DefaultValueAccessor = __decorate([angular2_1.Directive({
      selector: 'input:not([type=checkbox])[ng-control],textarea[ng-control],input:not([type=checkbox])[ng-form-control],textarea[ng-form-control],input:not([type=checkbox])[ng-model],textarea[ng-model]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()',
        '[value]': 'value',
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      }
    }), __metadata('design:paramtypes', [ng_control_1.NgControl, angular2_1.Renderer, angular2_1.ElementRef])], DefaultValueAccessor);
    return DefaultValueAccessor;
  })();
  exports.DefaultValueAccessor = DefaultValueAccessor;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/checkbox_value_accessor", ["npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var CheckboxControlValueAccessor = (function() {
    function CheckboxControlValueAccessor(cd, renderer, elementRef) {
      this.cd = cd;
      this.renderer = renderer;
      this.elementRef = elementRef;
      this.onChange = function(_) {};
      this.onTouched = function() {};
      cd.valueAccessor = this;
    }
    CheckboxControlValueAccessor.prototype.writeValue = function(value) {
      this.checked = value;
      shared_1.setProperty(this.renderer, this.elementRef, "checked", value);
    };
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassUntouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassTouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassPristine", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassDirty", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassValid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(CheckboxControlValueAccessor.prototype, "ngClassInvalid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    CheckboxControlValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    CheckboxControlValueAccessor = __decorate([angular2_1.Directive({
      selector: 'input[type=checkbox][ng-control],input[type=checkbox][ng-form-control],input[type=checkbox][ng-model]',
      host: {
        '(change)': 'onChange($event.target.checked)',
        '(blur)': 'onTouched()',
        '[checked]': 'checked',
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      }
    }), __metadata('design:paramtypes', [ng_control_1.NgControl, angular2_1.Renderer, angular2_1.ElementRef])], CheckboxControlValueAccessor);
    return CheckboxControlValueAccessor;
  })();
  exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/select_control_value_accessor", ["npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var NgSelectOption = (function() {
    function NgSelectOption() {}
    NgSelectOption = __decorate([angular2_1.Directive({selector: 'option'}), __metadata('design:paramtypes', [])], NgSelectOption);
    return NgSelectOption;
  })();
  exports.NgSelectOption = NgSelectOption;
  var SelectControlValueAccessor = (function() {
    function SelectControlValueAccessor(cd, renderer, elementRef, query) {
      this.cd = cd;
      this.renderer = renderer;
      this.elementRef = elementRef;
      this.value = '';
      this.onChange = function(_) {};
      this.onTouched = function() {};
      cd.valueAccessor = this;
      this._updateValueWhenListOfOptionsChanges(query);
    }
    SelectControlValueAccessor.prototype.writeValue = function(value) {
      this.value = value;
      shared_1.setProperty(this.renderer, this.elementRef, "value", value);
    };
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassUntouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.untouched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassTouched", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.touched : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassPristine", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.pristine : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassDirty", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.dirty : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassValid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(SelectControlValueAccessor.prototype, "ngClassInvalid", {
      get: function() {
        return lang_1.isPresent(this.cd.control) ? !this.cd.control.valid : false;
      },
      enumerable: true,
      configurable: true
    });
    SelectControlValueAccessor.prototype.registerOnChange = function(fn) {
      this.onChange = fn;
    };
    SelectControlValueAccessor.prototype.registerOnTouched = function(fn) {
      this.onTouched = fn;
    };
    SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function(query) {
      var _this = this;
      query.onChange(function() {
        return _this.writeValue(_this.value);
      });
    };
    SelectControlValueAccessor = __decorate([angular2_1.Directive({
      selector: 'select[ng-control],select[ng-form-control],select[ng-model]',
      host: {
        '(change)': 'onChange($event.target.value)',
        '(input)': 'onChange($event.target.value)',
        '(blur)': 'onTouched()',
        '[value]': 'value',
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid'
      }
    }), __param(3, angular2_1.Query(NgSelectOption, {descendants: true})), __metadata('design:paramtypes', [ng_control_1.NgControl, angular2_1.Renderer, angular2_1.ElementRef, angular2_1.QueryList])], SelectControlValueAccessor);
    return SelectControlValueAccessor;
  })();
  exports.SelectControlValueAccessor = SelectControlValueAccessor;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_name", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_control", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_group", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form", "npm:angular2@2.0.0-alpha.28/src/forms/directives/default_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/checkbox_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/select_control_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/validators", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_name", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_control", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_group", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form", "npm:angular2@2.0.0-alpha.28/src/forms/directives/default_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/checkbox_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/select_control_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/validators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var ng_control_name_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_name");
  var ng_form_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_control");
  var ng_model_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_model");
  var ng_control_group_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_group");
  var ng_form_model_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_model");
  var ng_form_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form");
  var default_value_accessor_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/default_value_accessor");
  var checkbox_value_accessor_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/checkbox_value_accessor");
  var select_control_value_accessor_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/select_control_value_accessor");
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/validators");
  var ng_control_name_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_name");
  exports.NgControlName = ng_control_name_2.NgControlName;
  var ng_form_control_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_control");
  exports.NgFormControl = ng_form_control_2.NgFormControl;
  var ng_model_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_model");
  exports.NgModel = ng_model_2.NgModel;
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  exports.NgControl = ng_control_1.NgControl;
  var ng_control_group_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_group");
  exports.NgControlGroup = ng_control_group_2.NgControlGroup;
  var ng_form_model_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_model");
  exports.NgFormModel = ng_form_model_2.NgFormModel;
  var ng_form_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form");
  exports.NgForm = ng_form_2.NgForm;
  var default_value_accessor_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/default_value_accessor");
  exports.DefaultValueAccessor = default_value_accessor_2.DefaultValueAccessor;
  var checkbox_value_accessor_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/checkbox_value_accessor");
  exports.CheckboxControlValueAccessor = checkbox_value_accessor_2.CheckboxControlValueAccessor;
  var select_control_value_accessor_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/select_control_value_accessor");
  exports.SelectControlValueAccessor = select_control_value_accessor_2.SelectControlValueAccessor;
  var validators_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/validators");
  exports.NgValidator = validators_2.NgValidator;
  exports.NgRequiredValidator = validators_2.NgRequiredValidator;
  exports.formDirectives = lang_1.CONST_EXPR([ng_control_name_1.NgControlName, ng_control_group_1.NgControlGroup, ng_form_control_1.NgFormControl, ng_model_1.NgModel, ng_form_model_1.NgFormModel, ng_form_1.NgForm, select_control_value_accessor_1.NgSelectOption, default_value_accessor_1.DefaultValueAccessor, checkbox_value_accessor_1.CheckboxControlValueAccessor, select_control_value_accessor_1.SelectControlValueAccessor, validators_1.NgRequiredValidator]);
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/form_builder", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/forms/model"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var modelModule = require("npm:angular2@2.0.0-alpha.28/src/forms/model");
  var FormBuilder = (function() {
    function FormBuilder() {}
    FormBuilder.prototype.group = function(controlsConfig, extra) {
      if (extra === void 0) {
        extra = null;
      }
      var controls = this._reduceControls(controlsConfig);
      var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "optionals") : null;
      var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, "validator") : null;
      if (lang_1.isPresent(validator)) {
        return new modelModule.ControlGroup(controls, optionals, validator);
      } else {
        return new modelModule.ControlGroup(controls, optionals);
      }
    };
    FormBuilder.prototype.control = function(value, validator) {
      if (validator === void 0) {
        validator = null;
      }
      if (lang_1.isPresent(validator)) {
        return new modelModule.Control(value, validator);
      } else {
        return new modelModule.Control(value);
      }
    };
    FormBuilder.prototype.array = function(controlsConfig, validator) {
      var _this = this;
      if (validator === void 0) {
        validator = null;
      }
      var controls = collection_1.ListWrapper.map(controlsConfig, function(c) {
        return _this._createControl(c);
      });
      if (lang_1.isPresent(validator)) {
        return new modelModule.ControlArray(controls, validator);
      } else {
        return new modelModule.ControlArray(controls);
      }
    };
    FormBuilder.prototype._reduceControls = function(controlsConfig) {
      var _this = this;
      var controls = {};
      collection_1.StringMapWrapper.forEach(controlsConfig, function(controlConfig, controlName) {
        controls[controlName] = _this._createControl(controlConfig);
      });
      return controls;
    };
    FormBuilder.prototype._createControl = function(controlConfig) {
      if (controlConfig instanceof modelModule.Control || controlConfig instanceof modelModule.ControlGroup || controlConfig instanceof modelModule.ControlArray) {
        return controlConfig;
      } else if (lang_1.isArray(controlConfig)) {
        var value = collection_1.ListWrapper.get(controlConfig, 0);
        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
        return this.control(value, validator);
      } else {
        return this.control(controlConfig);
      }
    };
    return FormBuilder;
  })();
  exports.FormBuilder = FormBuilder;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/enums", [], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  (function(RequestModesOpts) {
    RequestModesOpts[RequestModesOpts["Cors"] = 0] = "Cors";
    RequestModesOpts[RequestModesOpts["NoCors"] = 1] = "NoCors";
    RequestModesOpts[RequestModesOpts["SameOrigin"] = 2] = "SameOrigin";
  })(exports.RequestModesOpts || (exports.RequestModesOpts = {}));
  var RequestModesOpts = exports.RequestModesOpts;
  (function(RequestCacheOpts) {
    RequestCacheOpts[RequestCacheOpts["Default"] = 0] = "Default";
    RequestCacheOpts[RequestCacheOpts["NoStore"] = 1] = "NoStore";
    RequestCacheOpts[RequestCacheOpts["Reload"] = 2] = "Reload";
    RequestCacheOpts[RequestCacheOpts["NoCache"] = 3] = "NoCache";
    RequestCacheOpts[RequestCacheOpts["ForceCache"] = 4] = "ForceCache";
    RequestCacheOpts[RequestCacheOpts["OnlyIfCached"] = 5] = "OnlyIfCached";
  })(exports.RequestCacheOpts || (exports.RequestCacheOpts = {}));
  var RequestCacheOpts = exports.RequestCacheOpts;
  (function(RequestCredentialsOpts) {
    RequestCredentialsOpts[RequestCredentialsOpts["Omit"] = 0] = "Omit";
    RequestCredentialsOpts[RequestCredentialsOpts["SameOrigin"] = 1] = "SameOrigin";
    RequestCredentialsOpts[RequestCredentialsOpts["Include"] = 2] = "Include";
  })(exports.RequestCredentialsOpts || (exports.RequestCredentialsOpts = {}));
  var RequestCredentialsOpts = exports.RequestCredentialsOpts;
  (function(RequestMethods) {
    RequestMethods[RequestMethods["GET"] = 0] = "GET";
    RequestMethods[RequestMethods["POST"] = 1] = "POST";
    RequestMethods[RequestMethods["PUT"] = 2] = "PUT";
    RequestMethods[RequestMethods["DELETE"] = 3] = "DELETE";
    RequestMethods[RequestMethods["OPTIONS"] = 4] = "OPTIONS";
    RequestMethods[RequestMethods["HEAD"] = 5] = "HEAD";
    RequestMethods[RequestMethods["PATCH"] = 6] = "PATCH";
  })(exports.RequestMethods || (exports.RequestMethods = {}));
  var RequestMethods = exports.RequestMethods;
  (function(ReadyStates) {
    ReadyStates[ReadyStates["UNSENT"] = 0] = "UNSENT";
    ReadyStates[ReadyStates["OPEN"] = 1] = "OPEN";
    ReadyStates[ReadyStates["HEADERS_RECEIVED"] = 2] = "HEADERS_RECEIVED";
    ReadyStates[ReadyStates["LOADING"] = 3] = "LOADING";
    ReadyStates[ReadyStates["DONE"] = 4] = "DONE";
    ReadyStates[ReadyStates["CANCELLED"] = 5] = "CANCELLED";
  })(exports.ReadyStates || (exports.ReadyStates = {}));
  var ReadyStates = exports.ReadyStates;
  (function(ResponseTypes) {
    ResponseTypes[ResponseTypes["Basic"] = 0] = "Basic";
    ResponseTypes[ResponseTypes["Cors"] = 1] = "Cors";
    ResponseTypes[ResponseTypes["Default"] = 2] = "Default";
    ResponseTypes[ResponseTypes["Error"] = 3] = "Error";
    ResponseTypes[ResponseTypes["Opaque"] = 4] = "Opaque";
  })(exports.ResponseTypes || (exports.ResponseTypes = {}));
  var ResponseTypes = exports.ResponseTypes;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/headers", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var Headers = (function() {
    function Headers(headers) {
      var _this = this;
      if (lang_1.isBlank(headers)) {
        this._headersMap = new collection_1.Map();
        return ;
      }
      if (lang_1.isPresent(headers._headersMap)) {
        this._headersMap = headers._headersMap;
      } else if (lang_1.isJsObject(headers)) {
        this._headersMap = collection_1.MapWrapper.createFromStringMap(headers);
        collection_1.MapWrapper.forEach(this._headersMap, function(v, k) {
          if (!collection_1.isListLikeIterable(v)) {
            var list = [];
            list.push(v);
            _this._headersMap.set(k, list);
          }
        });
      }
    }
    Headers.prototype.append = function(name, value) {
      var list = this._headersMap.get(name) || [];
      list.push(value);
      this._headersMap.set(name, list);
    };
    Headers.prototype.delete = function(name) {
      collection_1.MapWrapper.delete(this._headersMap, name);
    };
    Headers.prototype.forEach = function(fn) {
      return collection_1.MapWrapper.forEach(this._headersMap, fn);
    };
    Headers.prototype.get = function(header) {
      return collection_1.ListWrapper.first(this._headersMap.get(header));
    };
    Headers.prototype.has = function(header) {
      return this._headersMap.has(header);
    };
    Headers.prototype.keys = function() {
      return collection_1.MapWrapper.keys(this._headersMap);
    };
    Headers.prototype.set = function(header, value) {
      var list = [];
      if (!collection_1.isListLikeIterable(value)) {
        list.push(value);
      } else {
        list.push(collection_1.ListWrapper.toString(value));
      }
      this._headersMap.set(header, list);
    };
    Headers.prototype.values = function() {
      return collection_1.MapWrapper.values(this._headersMap);
    };
    Headers.prototype.getAll = function(header) {
      return this._headersMap.get(header) || [];
    };
    Headers.prototype.entries = function() {
      throw new lang_1.BaseException('"entries" method is not implemented on Headers class');
    };
    return Headers;
  })();
  exports.Headers = Headers;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/base_response_options", ["npm:angular2@2.0.0-alpha.28/src/http/headers", "npm:angular2@2.0.0-alpha.28/src/http/enums"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var headers_1 = require("npm:angular2@2.0.0-alpha.28/src/http/headers");
  var enums_1 = require("npm:angular2@2.0.0-alpha.28/src/http/enums");
  var BaseResponseOptions = (function() {
    function BaseResponseOptions(_a) {
      var _b = _a === void 0 ? {} : _a,
          _c = _b.status,
          status = _c === void 0 ? 200 : _c,
          _d = _b.statusText,
          statusText = _d === void 0 ? 'Ok' : _d,
          _e = _b.type,
          type = _e === void 0 ? enums_1.ResponseTypes.Default : _e,
          _f = _b.headers,
          headers = _f === void 0 ? new headers_1.Headers() : _f,
          _g = _b.url,
          url = _g === void 0 ? '' : _g;
      this.status = status;
      this.statusText = statusText;
      this.type = type;
      this.headers = headers;
      this.url = url;
    }
    return BaseResponseOptions;
  })();
  exports.BaseResponseOptions = BaseResponseOptions;
  ;
  exports.baseResponseOptions = Object.freeze(new BaseResponseOptions());
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/backends/browser_xhr", ["npm:angular2@2.0.0-alpha.28/di"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var BrowserXHR = (function() {
    function BrowserXHR() {
      return (new window.XMLHttpRequest());
    }
    BrowserXHR = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], BrowserXHR);
    return BrowserXHR;
  })();
  exports.BrowserXHR = BrowserXHR;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/base_request_options", ["npm:angular2@2.0.0-alpha.28/src/http/enums", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var enums_1 = require("npm:angular2@2.0.0-alpha.28/src/http/enums");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var RequestOptions = (function() {
    function RequestOptions(_a) {
      var _b = _a === void 0 ? {
        method: enums_1.RequestMethods.GET,
        mode: enums_1.RequestModesOpts.Cors
      } : _a,
          method = _b.method,
          headers = _b.headers,
          body = _b.body,
          mode = _b.mode,
          credentials = _b.credentials,
          cache = _b.cache;
      this.method = enums_1.RequestMethods.GET;
      this.mode = enums_1.RequestModesOpts.Cors;
      this.method = method;
      this.headers = headers;
      this.body = body;
      this.mode = mode;
      this.credentials = credentials;
      this.cache = cache;
    }
    RequestOptions.prototype.merge = function(opts) {
      if (opts === void 0) {
        opts = {};
      }
      return new RequestOptions(collection_1.StringMapWrapper.merge(this, opts));
    };
    return RequestOptions;
  })();
  exports.RequestOptions = RequestOptions;
  var BaseRequestOptions = (function(_super) {
    __extends(BaseRequestOptions, _super);
    function BaseRequestOptions() {
      _super.call(this);
    }
    BaseRequestOptions = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], BaseRequestOptions);
    return BaseRequestOptions;
  })(RequestOptions);
  exports.BaseRequestOptions = BaseRequestOptions;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/backends/mock_backend", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/http/static_request", "npm:angular2@2.0.0-alpha.28/src/http/enums", "npm:rx@2.5.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var static_request_1 = require("npm:angular2@2.0.0-alpha.28/src/http/static_request");
  var enums_1 = require("npm:angular2@2.0.0-alpha.28/src/http/enums");
  var Rx = require("npm:rx@2.5.1");
  var MockConnection = (function() {
    function MockConnection(req) {
      if (Rx.hasOwnProperty('default')) {
        this.response = new (Rx.default.Rx.Subject)();
      } else {
        this.response = new Rx.Subject();
      }
      this.readyState = enums_1.ReadyStates.OPEN;
      this.request = req;
      this.dispose = this.dispose.bind(this);
    }
    MockConnection.prototype.dispose = function() {
      if (this.readyState !== enums_1.ReadyStates.DONE) {
        this.readyState = enums_1.ReadyStates.CANCELLED;
      }
    };
    MockConnection.prototype.mockRespond = function(res) {
      if (this.readyState >= enums_1.ReadyStates.DONE) {
        throw new Error('Connection has already been resolved');
      }
      this.readyState = enums_1.ReadyStates.DONE;
      this.response.onNext(res);
      this.response.onCompleted();
    };
    MockConnection.prototype.mockDownload = function(res) {};
    MockConnection.prototype.mockError = function(err) {
      this.readyState = enums_1.ReadyStates.DONE;
      this.response.onError(err);
      this.response.onCompleted();
    };
    return MockConnection;
  })();
  exports.MockConnection = MockConnection;
  var MockBackend = (function() {
    function MockBackend() {
      var _this = this;
      var Observable;
      this.connectionsArray = [];
      if (Rx.hasOwnProperty('default')) {
        this.connections = new Rx.default.Rx.Subject();
        Observable = Rx.default.Rx.Observable;
      } else {
        this.connections = new Rx.Subject();
        Observable = Rx.Observable;
      }
      this.connections.subscribe(function(connection) {
        return _this.connectionsArray.push(connection);
      });
      this.pendingConnections = Observable.fromArray(this.connectionsArray).filter(function(c) {
        return c.readyState < enums_1.ReadyStates.DONE;
      });
    }
    MockBackend.prototype.verifyNoPendingRequests = function() {
      var pending = 0;
      this.pendingConnections.subscribe(function(c) {
        return pending++;
      });
      if (pending > 0)
        throw new Error(pending + " pending connections to be resolved");
    };
    MockBackend.prototype.resolveAllConnections = function() {
      this.connections.subscribe(function(c) {
        return c.readyState = 4;
      });
    };
    MockBackend.prototype.createConnection = function(req) {
      if (!req || !(req instanceof static_request_1.Request)) {
        throw new Error("createConnection requires an instance of Request, got " + req);
      }
      var connection = new MockConnection(req);
      this.connections.onNext(connection);
      return connection;
    };
    MockBackend = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], MockBackend);
    return MockBackend;
  })();
  exports.MockBackend = MockBackend;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/url_search_params", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  function paramParser(rawParams) {
    var map = new collection_1.Map();
    var params = lang_1.StringWrapper.split(rawParams, '&');
    collection_1.ListWrapper.forEach(params, function(param) {
      var split = lang_1.StringWrapper.split(param, '=');
      var key = collection_1.ListWrapper.get(split, 0);
      var val = collection_1.ListWrapper.get(split, 1);
      var list = map.get(key) || [];
      list.push(val);
      map.set(key, list);
    });
    return map;
  }
  var URLSearchParams = (function() {
    function URLSearchParams(rawParams) {
      this.rawParams = rawParams;
      this.paramsMap = paramParser(rawParams);
    }
    URLSearchParams.prototype.has = function(param) {
      return this.paramsMap.has(param);
    };
    URLSearchParams.prototype.get = function(param) {
      return collection_1.ListWrapper.first(this.paramsMap.get(param));
    };
    URLSearchParams.prototype.getAll = function(param) {
      return this.paramsMap.get(param) || [];
    };
    URLSearchParams.prototype.append = function(param, val) {
      var list = this.paramsMap.get(param) || [];
      list.push(val);
      this.paramsMap.set(param, list);
    };
    URLSearchParams.prototype.toString = function() {
      var paramsList = [];
      collection_1.MapWrapper.forEach(this.paramsMap, function(values, k) {
        collection_1.ListWrapper.forEach(values, function(v) {
          paramsList.push(k + '=' + v);
        });
      });
      return collection_1.ListWrapper.join(paramsList, '&');
    };
    URLSearchParams.prototype.delete = function(param) {
      collection_1.MapWrapper.delete(this.paramsMap, param);
    };
    return URLSearchParams;
  })();
  exports.URLSearchParams = URLSearchParams;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/ast", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var AST = (function() {
    function AST() {}
    AST.prototype.eval = function(context, locals) {
      throw new lang_1.BaseException("Not supported");
    };
    Object.defineProperty(AST.prototype, "isAssignable", {
      get: function() {
        return false;
      },
      enumerable: true,
      configurable: true
    });
    AST.prototype.assign = function(context, locals, value) {
      throw new lang_1.BaseException("Not supported");
    };
    AST.prototype.visit = function(visitor) {
      return null;
    };
    AST.prototype.toString = function() {
      return "AST";
    };
    return AST;
  })();
  exports.AST = AST;
  var EmptyExpr = (function(_super) {
    __extends(EmptyExpr, _super);
    function EmptyExpr() {
      _super.apply(this, arguments);
    }
    EmptyExpr.prototype.eval = function(context, locals) {
      return null;
    };
    EmptyExpr.prototype.visit = function(visitor) {};
    return EmptyExpr;
  })(AST);
  exports.EmptyExpr = EmptyExpr;
  var ImplicitReceiver = (function(_super) {
    __extends(ImplicitReceiver, _super);
    function ImplicitReceiver() {
      _super.apply(this, arguments);
    }
    ImplicitReceiver.prototype.eval = function(context, locals) {
      return context;
    };
    ImplicitReceiver.prototype.visit = function(visitor) {
      return visitor.visitImplicitReceiver(this);
    };
    return ImplicitReceiver;
  })(AST);
  exports.ImplicitReceiver = ImplicitReceiver;
  var Chain = (function(_super) {
    __extends(Chain, _super);
    function Chain(expressions) {
      _super.call(this);
      this.expressions = expressions;
    }
    Chain.prototype.eval = function(context, locals) {
      var result;
      for (var i = 0; i < this.expressions.length; i++) {
        var last = this.expressions[i].eval(context, locals);
        if (lang_1.isPresent(last))
          result = last;
      }
      return result;
    };
    Chain.prototype.visit = function(visitor) {
      return visitor.visitChain(this);
    };
    return Chain;
  })(AST);
  exports.Chain = Chain;
  var Conditional = (function(_super) {
    __extends(Conditional, _super);
    function Conditional(condition, trueExp, falseExp) {
      _super.call(this);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    Conditional.prototype.eval = function(context, locals) {
      if (this.condition.eval(context, locals)) {
        return this.trueExp.eval(context, locals);
      } else {
        return this.falseExp.eval(context, locals);
      }
    };
    Conditional.prototype.visit = function(visitor) {
      return visitor.visitConditional(this);
    };
    return Conditional;
  })(AST);
  exports.Conditional = Conditional;
  var If = (function(_super) {
    __extends(If, _super);
    function If(condition, trueExp, falseExp) {
      _super.call(this);
      this.condition = condition;
      this.trueExp = trueExp;
      this.falseExp = falseExp;
    }
    If.prototype.eval = function(context, locals) {
      if (this.condition.eval(context, locals)) {
        this.trueExp.eval(context, locals);
      } else if (lang_1.isPresent(this.falseExp)) {
        this.falseExp.eval(context, locals);
      }
    };
    If.prototype.visit = function(visitor) {
      return visitor.visitIf(this);
    };
    return If;
  })(AST);
  exports.If = If;
  var AccessMember = (function(_super) {
    __extends(AccessMember, _super);
    function AccessMember(receiver, name, getter, setter) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.getter = getter;
      this.setter = setter;
    }
    AccessMember.prototype.eval = function(context, locals) {
      if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) && locals.contains(this.name)) {
        return locals.get(this.name);
      } else {
        var evaluatedReceiver = this.receiver.eval(context, locals);
        return this.getter(evaluatedReceiver);
      }
    };
    Object.defineProperty(AccessMember.prototype, "isAssignable", {
      get: function() {
        return true;
      },
      enumerable: true,
      configurable: true
    });
    AccessMember.prototype.assign = function(context, locals, value) {
      var evaluatedContext = this.receiver.eval(context, locals);
      if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) && locals.contains(this.name)) {
        throw new lang_1.BaseException("Cannot reassign a variable binding " + this.name);
      } else {
        return this.setter(evaluatedContext, value);
      }
    };
    AccessMember.prototype.visit = function(visitor) {
      return visitor.visitAccessMember(this);
    };
    return AccessMember;
  })(AST);
  exports.AccessMember = AccessMember;
  var SafeAccessMember = (function(_super) {
    __extends(SafeAccessMember, _super);
    function SafeAccessMember(receiver, name, getter, setter) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.getter = getter;
      this.setter = setter;
    }
    SafeAccessMember.prototype.eval = function(context, locals) {
      var evaluatedReceiver = this.receiver.eval(context, locals);
      return lang_1.isBlank(evaluatedReceiver) ? null : this.getter(evaluatedReceiver);
    };
    SafeAccessMember.prototype.visit = function(visitor) {
      return visitor.visitSafeAccessMember(this);
    };
    return SafeAccessMember;
  })(AST);
  exports.SafeAccessMember = SafeAccessMember;
  var KeyedAccess = (function(_super) {
    __extends(KeyedAccess, _super);
    function KeyedAccess(obj, key) {
      _super.call(this);
      this.obj = obj;
      this.key = key;
    }
    KeyedAccess.prototype.eval = function(context, locals) {
      var obj = this.obj.eval(context, locals);
      var key = this.key.eval(context, locals);
      return obj[key];
    };
    Object.defineProperty(KeyedAccess.prototype, "isAssignable", {
      get: function() {
        return true;
      },
      enumerable: true,
      configurable: true
    });
    KeyedAccess.prototype.assign = function(context, locals, value) {
      var obj = this.obj.eval(context, locals);
      var key = this.key.eval(context, locals);
      obj[key] = value;
      return value;
    };
    KeyedAccess.prototype.visit = function(visitor) {
      return visitor.visitKeyedAccess(this);
    };
    return KeyedAccess;
  })(AST);
  exports.KeyedAccess = KeyedAccess;
  var BindingPipe = (function(_super) {
    __extends(BindingPipe, _super);
    function BindingPipe(exp, name, args) {
      _super.call(this);
      this.exp = exp;
      this.name = name;
      this.args = args;
    }
    BindingPipe.prototype.visit = function(visitor) {
      return visitor.visitPipe(this);
    };
    return BindingPipe;
  })(AST);
  exports.BindingPipe = BindingPipe;
  var LiteralPrimitive = (function(_super) {
    __extends(LiteralPrimitive, _super);
    function LiteralPrimitive(value) {
      _super.call(this);
      this.value = value;
    }
    LiteralPrimitive.prototype.eval = function(context, locals) {
      return this.value;
    };
    LiteralPrimitive.prototype.visit = function(visitor) {
      return visitor.visitLiteralPrimitive(this);
    };
    return LiteralPrimitive;
  })(AST);
  exports.LiteralPrimitive = LiteralPrimitive;
  var LiteralArray = (function(_super) {
    __extends(LiteralArray, _super);
    function LiteralArray(expressions) {
      _super.call(this);
      this.expressions = expressions;
    }
    LiteralArray.prototype.eval = function(context, locals) {
      return collection_1.ListWrapper.map(this.expressions, function(e) {
        return e.eval(context, locals);
      });
    };
    LiteralArray.prototype.visit = function(visitor) {
      return visitor.visitLiteralArray(this);
    };
    return LiteralArray;
  })(AST);
  exports.LiteralArray = LiteralArray;
  var LiteralMap = (function(_super) {
    __extends(LiteralMap, _super);
    function LiteralMap(keys, values) {
      _super.call(this);
      this.keys = keys;
      this.values = values;
    }
    LiteralMap.prototype.eval = function(context, locals) {
      var res = collection_1.StringMapWrapper.create();
      for (var i = 0; i < this.keys.length; ++i) {
        collection_1.StringMapWrapper.set(res, this.keys[i], this.values[i].eval(context, locals));
      }
      return res;
    };
    LiteralMap.prototype.visit = function(visitor) {
      return visitor.visitLiteralMap(this);
    };
    return LiteralMap;
  })(AST);
  exports.LiteralMap = LiteralMap;
  var Interpolation = (function(_super) {
    __extends(Interpolation, _super);
    function Interpolation(strings, expressions) {
      _super.call(this);
      this.strings = strings;
      this.expressions = expressions;
    }
    Interpolation.prototype.eval = function(context, locals) {
      throw new lang_1.BaseException("evaluating an Interpolation is not supported");
    };
    Interpolation.prototype.visit = function(visitor) {
      visitor.visitInterpolation(this);
    };
    return Interpolation;
  })(AST);
  exports.Interpolation = Interpolation;
  var Binary = (function(_super) {
    __extends(Binary, _super);
    function Binary(operation, left, right) {
      _super.call(this);
      this.operation = operation;
      this.left = left;
      this.right = right;
    }
    Binary.prototype.eval = function(context, locals) {
      var left = this.left.eval(context, locals);
      switch (this.operation) {
        case '&&':
          return left && this.right.eval(context, locals);
        case '||':
          return left || this.right.eval(context, locals);
      }
      var right = this.right.eval(context, locals);
      switch (this.operation) {
        case '+':
          return left + right;
        case '-':
          return left - right;
        case '*':
          return left * right;
        case '/':
          return left / right;
        case '%':
          return left % right;
        case '==':
          return left == right;
        case '!=':
          return left != right;
        case '===':
          return left === right;
        case '!==':
          return left !== right;
        case '<':
          return left < right;
        case '>':
          return left > right;
        case '<=':
          return left <= right;
        case '>=':
          return left >= right;
        case '^':
          return left ^ right;
        case '&':
          return left & right;
      }
      throw 'Internal error [$operation] not handled';
    };
    Binary.prototype.visit = function(visitor) {
      return visitor.visitBinary(this);
    };
    return Binary;
  })(AST);
  exports.Binary = Binary;
  var PrefixNot = (function(_super) {
    __extends(PrefixNot, _super);
    function PrefixNot(expression) {
      _super.call(this);
      this.expression = expression;
    }
    PrefixNot.prototype.eval = function(context, locals) {
      return !this.expression.eval(context, locals);
    };
    PrefixNot.prototype.visit = function(visitor) {
      return visitor.visitPrefixNot(this);
    };
    return PrefixNot;
  })(AST);
  exports.PrefixNot = PrefixNot;
  var Assignment = (function(_super) {
    __extends(Assignment, _super);
    function Assignment(target, value) {
      _super.call(this);
      this.target = target;
      this.value = value;
    }
    Assignment.prototype.eval = function(context, locals) {
      return this.target.assign(context, locals, this.value.eval(context, locals));
    };
    Assignment.prototype.visit = function(visitor) {
      return visitor.visitAssignment(this);
    };
    return Assignment;
  })(AST);
  exports.Assignment = Assignment;
  var MethodCall = (function(_super) {
    __extends(MethodCall, _super);
    function MethodCall(receiver, name, fn, args) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.fn = fn;
      this.args = args;
    }
    MethodCall.prototype.eval = function(context, locals) {
      var evaluatedArgs = evalList(context, locals, this.args);
      if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) && locals.contains(this.name)) {
        var fn = locals.get(this.name);
        return lang_1.FunctionWrapper.apply(fn, evaluatedArgs);
      } else {
        var evaluatedReceiver = this.receiver.eval(context, locals);
        return this.fn(evaluatedReceiver, evaluatedArgs);
      }
    };
    MethodCall.prototype.visit = function(visitor) {
      return visitor.visitMethodCall(this);
    };
    return MethodCall;
  })(AST);
  exports.MethodCall = MethodCall;
  var SafeMethodCall = (function(_super) {
    __extends(SafeMethodCall, _super);
    function SafeMethodCall(receiver, name, fn, args) {
      _super.call(this);
      this.receiver = receiver;
      this.name = name;
      this.fn = fn;
      this.args = args;
    }
    SafeMethodCall.prototype.eval = function(context, locals) {
      var evaluatedReceiver = this.receiver.eval(context, locals);
      if (lang_1.isBlank(evaluatedReceiver))
        return null;
      var evaluatedArgs = evalList(context, locals, this.args);
      return this.fn(evaluatedReceiver, evaluatedArgs);
    };
    SafeMethodCall.prototype.visit = function(visitor) {
      return visitor.visitSafeMethodCall(this);
    };
    return SafeMethodCall;
  })(AST);
  exports.SafeMethodCall = SafeMethodCall;
  var FunctionCall = (function(_super) {
    __extends(FunctionCall, _super);
    function FunctionCall(target, args) {
      _super.call(this);
      this.target = target;
      this.args = args;
    }
    FunctionCall.prototype.eval = function(context, locals) {
      var obj = this.target.eval(context, locals);
      if (!(obj instanceof Function)) {
        throw new lang_1.BaseException(obj + " is not a function");
      }
      return lang_1.FunctionWrapper.apply(obj, evalList(context, locals, this.args));
    };
    FunctionCall.prototype.visit = function(visitor) {
      return visitor.visitFunctionCall(this);
    };
    return FunctionCall;
  })(AST);
  exports.FunctionCall = FunctionCall;
  var ASTWithSource = (function(_super) {
    __extends(ASTWithSource, _super);
    function ASTWithSource(ast, source, location) {
      _super.call(this);
      this.ast = ast;
      this.source = source;
      this.location = location;
    }
    ASTWithSource.prototype.eval = function(context, locals) {
      return this.ast.eval(context, locals);
    };
    Object.defineProperty(ASTWithSource.prototype, "isAssignable", {
      get: function() {
        return this.ast.isAssignable;
      },
      enumerable: true,
      configurable: true
    });
    ASTWithSource.prototype.assign = function(context, locals, value) {
      return this.ast.assign(context, locals, value);
    };
    ASTWithSource.prototype.visit = function(visitor) {
      return this.ast.visit(visitor);
    };
    ASTWithSource.prototype.toString = function() {
      return this.source + " in " + this.location;
    };
    return ASTWithSource;
  })(AST);
  exports.ASTWithSource = ASTWithSource;
  var TemplateBinding = (function() {
    function TemplateBinding(key, keyIsVar, name, expression) {
      this.key = key;
      this.keyIsVar = keyIsVar;
      this.name = name;
      this.expression = expression;
    }
    return TemplateBinding;
  })();
  exports.TemplateBinding = TemplateBinding;
  var AstTransformer = (function() {
    function AstTransformer() {}
    AstTransformer.prototype.visitImplicitReceiver = function(ast) {
      return ast;
    };
    AstTransformer.prototype.visitInterpolation = function(ast) {
      return new Interpolation(ast.strings, this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitLiteralPrimitive = function(ast) {
      return new LiteralPrimitive(ast.value);
    };
    AstTransformer.prototype.visitAccessMember = function(ast) {
      return new AccessMember(ast.receiver.visit(this), ast.name, ast.getter, ast.setter);
    };
    AstTransformer.prototype.visitSafeAccessMember = function(ast) {
      return new SafeAccessMember(ast.receiver.visit(this), ast.name, ast.getter, ast.setter);
    };
    AstTransformer.prototype.visitMethodCall = function(ast) {
      return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitSafeMethodCall = function(ast) {
      return new SafeMethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitFunctionCall = function(ast) {
      return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitLiteralArray = function(ast) {
      return new LiteralArray(this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitLiteralMap = function(ast) {
      return new LiteralMap(ast.keys, this.visitAll(ast.values));
    };
    AstTransformer.prototype.visitBinary = function(ast) {
      return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
    };
    AstTransformer.prototype.visitPrefixNot = function(ast) {
      return new PrefixNot(ast.expression.visit(this));
    };
    AstTransformer.prototype.visitConditional = function(ast) {
      return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
    };
    AstTransformer.prototype.visitPipe = function(ast) {
      return new BindingPipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args));
    };
    AstTransformer.prototype.visitKeyedAccess = function(ast) {
      return new KeyedAccess(ast.obj.visit(this), ast.key.visit(this));
    };
    AstTransformer.prototype.visitAll = function(asts) {
      var res = collection_1.ListWrapper.createFixedSize(asts.length);
      for (var i = 0; i < asts.length; ++i) {
        res[i] = asts[i].visit(this);
      }
      return res;
    };
    AstTransformer.prototype.visitChain = function(ast) {
      return new Chain(this.visitAll(ast.expressions));
    };
    AstTransformer.prototype.visitAssignment = function(ast) {
      return new Assignment(ast.target.visit(this), ast.value.visit(this));
    };
    AstTransformer.prototype.visitIf = function(ast) {
      var falseExp = lang_1.isPresent(ast.falseExp) ? ast.falseExp.visit(this) : null;
      return new If(ast.condition.visit(this), ast.trueExp.visit(this), falseExp);
    };
    return AstTransformer;
  })();
  exports.AstTransformer = AstTransformer;
  var _evalListCache = [[], [0], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
  function evalList(context, locals, exps) {
    var length = exps.length;
    if (length > 10) {
      throw new lang_1.BaseException("Cannot have more than 10 argument");
    }
    var result = _evalListCache[length];
    for (var i = 0; i < length; i++) {
      result[i] = exps[i].eval(context, locals);
    }
    return result;
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/annotations", ["npm:angular2@2.0.0-alpha.28/src/di/annotations_impl"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var annotations_impl_1 = require("npm:angular2@2.0.0-alpha.28/src/di/annotations_impl");
  exports.InjectAnnotation = annotations_impl_1.Inject;
  exports.InjectPromiseAnnotation = annotations_impl_1.InjectPromise;
  exports.InjectLazyAnnotation = annotations_impl_1.InjectLazy;
  exports.OptionalAnnotation = annotations_impl_1.Optional;
  exports.InjectableAnnotation = annotations_impl_1.Injectable;
  exports.DependencyAnnotation = annotations_impl_1.DependencyAnnotation;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/reflection/reflector", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/reflection/types"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var types_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/types");
  exports.SetterFn = types_1.SetterFn;
  exports.GetterFn = types_1.GetterFn;
  exports.MethodFn = types_1.MethodFn;
  var Reflector = (function() {
    function Reflector(reflectionCapabilities) {
      this._typeInfo = new collection_1.Map();
      this._getters = new collection_1.Map();
      this._setters = new collection_1.Map();
      this._methods = new collection_1.Map();
      this.reflectionCapabilities = reflectionCapabilities;
    }
    Reflector.prototype.registerType = function(type, typeInfo) {
      this._typeInfo.set(type, typeInfo);
    };
    Reflector.prototype.registerGetters = function(getters) {
      _mergeMaps(this._getters, getters);
    };
    Reflector.prototype.registerSetters = function(setters) {
      _mergeMaps(this._setters, setters);
    };
    Reflector.prototype.registerMethods = function(methods) {
      _mergeMaps(this._methods, methods);
    };
    Reflector.prototype.factory = function(type) {
      if (this._containsTypeInfo(type)) {
        return this._getTypeInfoField(type, "factory", null);
      } else {
        return this.reflectionCapabilities.factory(type);
      }
    };
    Reflector.prototype.parameters = function(typeOrFunc) {
      if (this._typeInfo.has(typeOrFunc)) {
        return this._getTypeInfoField(typeOrFunc, "parameters", []);
      } else {
        return this.reflectionCapabilities.parameters(typeOrFunc);
      }
    };
    Reflector.prototype.annotations = function(typeOrFunc) {
      if (this._typeInfo.has(typeOrFunc)) {
        return this._getTypeInfoField(typeOrFunc, "annotations", []);
      } else {
        return this.reflectionCapabilities.annotations(typeOrFunc);
      }
    };
    Reflector.prototype.interfaces = function(type) {
      if (this._typeInfo.has(type)) {
        return this._getTypeInfoField(type, "interfaces", []);
      } else {
        return this.reflectionCapabilities.interfaces(type);
      }
    };
    Reflector.prototype.getter = function(name) {
      if (this._getters.has(name)) {
        return this._getters.get(name);
      } else {
        return this.reflectionCapabilities.getter(name);
      }
    };
    Reflector.prototype.setter = function(name) {
      if (this._setters.has(name)) {
        return this._setters.get(name);
      } else {
        return this.reflectionCapabilities.setter(name);
      }
    };
    Reflector.prototype.method = function(name) {
      if (this._methods.has(name)) {
        return this._methods.get(name);
      } else {
        return this.reflectionCapabilities.method(name);
      }
    };
    Reflector.prototype._getTypeInfoField = function(typeOrFunc, key, defaultValue) {
      var res = this._typeInfo.get(typeOrFunc)[key];
      return lang_1.isPresent(res) ? res : defaultValue;
    };
    Reflector.prototype._containsTypeInfo = function(typeOrFunc) {
      return this._typeInfo.has(typeOrFunc);
    };
    return Reflector;
  })();
  exports.Reflector = Reflector;
  function _mergeMaps(target, config) {
    collection_1.StringMapWrapper.forEach(config, function(v, k) {
      return target.set(k, v);
    });
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/exceptions", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/constants"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/exceptions");
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  var constants_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/constants");
  exports.uninitialized = new Object();
  var SimpleChange = (function() {
    function SimpleChange(previousValue, currentValue) {
      this.previousValue = previousValue;
      this.currentValue = currentValue;
    }
    return SimpleChange;
  })();
  exports.SimpleChange = SimpleChange;
  var _simpleChangesIndex = 0;
  var _simpleChanges = [new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null)];
  function _simpleChange(previousValue, currentValue) {
    var index = _simpleChangesIndex++ % 20;
    var s = _simpleChanges[index];
    s.previousValue = previousValue;
    s.currentValue = currentValue;
    return s;
  }
  var ChangeDetectionUtil = (function() {
    function ChangeDetectionUtil() {}
    ChangeDetectionUtil.uninitialized = function() {
      return exports.uninitialized;
    };
    ChangeDetectionUtil.arrayFn0 = function() {
      return [];
    };
    ChangeDetectionUtil.arrayFn1 = function(a1) {
      return [a1];
    };
    ChangeDetectionUtil.arrayFn2 = function(a1, a2) {
      return [a1, a2];
    };
    ChangeDetectionUtil.arrayFn3 = function(a1, a2, a3) {
      return [a1, a2, a3];
    };
    ChangeDetectionUtil.arrayFn4 = function(a1, a2, a3, a4) {
      return [a1, a2, a3, a4];
    };
    ChangeDetectionUtil.arrayFn5 = function(a1, a2, a3, a4, a5) {
      return [a1, a2, a3, a4, a5];
    };
    ChangeDetectionUtil.arrayFn6 = function(a1, a2, a3, a4, a5, a6) {
      return [a1, a2, a3, a4, a5, a6];
    };
    ChangeDetectionUtil.arrayFn7 = function(a1, a2, a3, a4, a5, a6, a7) {
      return [a1, a2, a3, a4, a5, a6, a7];
    };
    ChangeDetectionUtil.arrayFn8 = function(a1, a2, a3, a4, a5, a6, a7, a8) {
      return [a1, a2, a3, a4, a5, a6, a7, a8];
    };
    ChangeDetectionUtil.arrayFn9 = function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
      return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
    };
    ChangeDetectionUtil.operation_negate = function(value) {
      return !value;
    };
    ChangeDetectionUtil.operation_add = function(left, right) {
      return left + right;
    };
    ChangeDetectionUtil.operation_subtract = function(left, right) {
      return left - right;
    };
    ChangeDetectionUtil.operation_multiply = function(left, right) {
      return left * right;
    };
    ChangeDetectionUtil.operation_divide = function(left, right) {
      return left / right;
    };
    ChangeDetectionUtil.operation_remainder = function(left, right) {
      return left % right;
    };
    ChangeDetectionUtil.operation_equals = function(left, right) {
      return left == right;
    };
    ChangeDetectionUtil.operation_not_equals = function(left, right) {
      return left != right;
    };
    ChangeDetectionUtil.operation_identical = function(left, right) {
      return left === right;
    };
    ChangeDetectionUtil.operation_not_identical = function(left, right) {
      return left !== right;
    };
    ChangeDetectionUtil.operation_less_then = function(left, right) {
      return left < right;
    };
    ChangeDetectionUtil.operation_greater_then = function(left, right) {
      return left > right;
    };
    ChangeDetectionUtil.operation_less_or_equals_then = function(left, right) {
      return left <= right;
    };
    ChangeDetectionUtil.operation_greater_or_equals_then = function(left, right) {
      return left >= right;
    };
    ChangeDetectionUtil.operation_logical_and = function(left, right) {
      return left && right;
    };
    ChangeDetectionUtil.operation_logical_or = function(left, right) {
      return left || right;
    };
    ChangeDetectionUtil.cond = function(cond, trueVal, falseVal) {
      return cond ? trueVal : falseVal;
    };
    ChangeDetectionUtil.mapFn = function(keys) {
      function buildMap(values) {
        var res = collection_1.StringMapWrapper.create();
        for (var i = 0; i < keys.length; ++i) {
          collection_1.StringMapWrapper.set(res, keys[i], values[i]);
        }
        return res;
      }
      switch (keys.length) {
        case 0:
          return function() {
            return [];
          };
        case 1:
          return function(a1) {
            return buildMap([a1]);
          };
        case 2:
          return function(a1, a2) {
            return buildMap([a1, a2]);
          };
        case 3:
          return function(a1, a2, a3) {
            return buildMap([a1, a2, a3]);
          };
        case 4:
          return function(a1, a2, a3, a4) {
            return buildMap([a1, a2, a3, a4]);
          };
        case 5:
          return function(a1, a2, a3, a4, a5) {
            return buildMap([a1, a2, a3, a4, a5]);
          };
        case 6:
          return function(a1, a2, a3, a4, a5, a6) {
            return buildMap([a1, a2, a3, a4, a5, a6]);
          };
        case 7:
          return function(a1, a2, a3, a4, a5, a6, a7) {
            return buildMap([a1, a2, a3, a4, a5, a6, a7]);
          };
        case 8:
          return function(a1, a2, a3, a4, a5, a6, a7, a8) {
            return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]);
          };
        case 9:
          return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
          };
        default:
          throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
      }
    };
    ChangeDetectionUtil.keyedAccess = function(obj, args) {
      return obj[args[0]];
    };
    ChangeDetectionUtil.unwrapValue = function(value) {
      if (value instanceof pipe_1.WrappedValue) {
        return value.wrapped;
      } else {
        return value;
      }
    };
    ChangeDetectionUtil.throwOnChange = function(proto, change) {
      throw new exceptions_1.ExpressionChangedAfterItHasBeenChecked(proto, change);
    };
    ChangeDetectionUtil.throwDehydrated = function() {
      throw new exceptions_1.DehydratedException();
    };
    ChangeDetectionUtil.changeDetectionMode = function(strategy) {
      return strategy == constants_1.ON_PUSH ? constants_1.CHECK_ONCE : constants_1.CHECK_ALWAYS;
    };
    ChangeDetectionUtil.simpleChange = function(previousValue, currentValue) {
      return _simpleChange(previousValue, currentValue);
    };
    ChangeDetectionUtil.addChange = function(changes, propertyName, change) {
      if (lang_1.isBlank(changes)) {
        changes = {};
      }
      changes[propertyName] = change;
      return changes;
    };
    ChangeDetectionUtil.isValueBlank = function(value) {
      return lang_1.isBlank(value);
    };
    return ChangeDetectionUtil;
  })();
  exports.ChangeDetectionUtil = ChangeDetectionUtil;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/abstract_change_detector", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detector_ref", "npm:angular2@2.0.0-alpha.28/src/change_detection/constants"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var change_detector_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detector_ref");
  var constants_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/constants");
  var AbstractChangeDetector = (function() {
    function AbstractChangeDetector(id) {
      this.id = id;
      this.lightDomChildren = [];
      this.shadowDomChildren = [];
      this.mode = null;
      this.ref = new change_detector_ref_1.ChangeDetectorRef(this);
    }
    AbstractChangeDetector.prototype.addChild = function(cd) {
      this.lightDomChildren.push(cd);
      cd.parent = this;
    };
    AbstractChangeDetector.prototype.removeChild = function(cd) {
      collection_1.ListWrapper.remove(this.lightDomChildren, cd);
    };
    AbstractChangeDetector.prototype.addShadowDomChild = function(cd) {
      this.shadowDomChildren.push(cd);
      cd.parent = this;
    };
    AbstractChangeDetector.prototype.removeShadowDomChild = function(cd) {
      collection_1.ListWrapper.remove(this.shadowDomChildren, cd);
    };
    AbstractChangeDetector.prototype.remove = function() {
      this.parent.removeChild(this);
    };
    AbstractChangeDetector.prototype.detectChanges = function() {
      this._detectChanges(false);
    };
    AbstractChangeDetector.prototype.checkNoChanges = function() {
      this._detectChanges(true);
    };
    AbstractChangeDetector.prototype._detectChanges = function(throwOnChange) {
      if (this.mode === constants_1.DETACHED || this.mode === constants_1.CHECKED)
        return ;
      this.detectChangesInRecords(throwOnChange);
      this._detectChangesInLightDomChildren(throwOnChange);
      if (throwOnChange === false)
        this.callOnAllChangesDone();
      this._detectChangesInShadowDomChildren(throwOnChange);
      if (this.mode === constants_1.CHECK_ONCE)
        this.mode = constants_1.CHECKED;
    };
    AbstractChangeDetector.prototype.detectChangesInRecords = function(throwOnChange) {};
    AbstractChangeDetector.prototype.hydrate = function(context, locals, directives) {};
    AbstractChangeDetector.prototype.dehydrate = function() {};
    AbstractChangeDetector.prototype.callOnAllChangesDone = function() {};
    AbstractChangeDetector.prototype._detectChangesInLightDomChildren = function(throwOnChange) {
      var c = this.lightDomChildren;
      for (var i = 0; i < c.length; ++i) {
        c[i]._detectChanges(throwOnChange);
      }
    };
    AbstractChangeDetector.prototype._detectChangesInShadowDomChildren = function(throwOnChange) {
      var c = this.shadowDomChildren;
      for (var i = 0; i < c.length; ++i) {
        c[i]._detectChanges(throwOnChange);
      }
    };
    AbstractChangeDetector.prototype.markAsCheckOnce = function() {
      this.mode = constants_1.CHECK_ONCE;
    };
    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function() {
      var c = this;
      while (lang_1.isPresent(c) && c.mode != constants_1.DETACHED) {
        if (c.mode === constants_1.CHECKED)
          c.mode = constants_1.CHECK_ONCE;
        c = c.parent;
      }
    };
    return AbstractChangeDetector;
  })();
  exports.AbstractChangeDetector = AbstractChangeDetector;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/jit_proto_change_detector", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_jit_generator", "npm:angular2@2.0.0-alpha.28/src/change_detection/coalesce", "npm:angular2@2.0.0-alpha.28/src/change_detection/proto_change_detector"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var change_detection_jit_generator_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_jit_generator");
  var coalesce_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/coalesce");
  var proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_change_detector");
  var JitProtoChangeDetector = (function() {
    function JitProtoChangeDetector(_pipeRegistry, definition) {
      this._pipeRegistry = _pipeRegistry;
      this.definition = definition;
      this._factory = this._createFactory(definition);
    }
    JitProtoChangeDetector.isSupported = function() {
      return true;
    };
    JitProtoChangeDetector.prototype.instantiate = function(dispatcher) {
      return this._factory(dispatcher, this._pipeRegistry);
    };
    JitProtoChangeDetector.prototype._createFactory = function(definition) {
      var recordBuilder = new proto_change_detector_1.ProtoRecordBuilder();
      collection_1.ListWrapper.forEach(definition.bindingRecords, function(b) {
        recordBuilder.add(b, definition.variableNames);
      });
      var records = coalesce_1.coalesce(recordBuilder.records);
      return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(definition.id, definition.strategy, records, this.definition.directiveRecords).generate();
    };
    return JitProtoChangeDetector;
  })();
  exports.JitProtoChangeDetector = JitProtoChangeDetector;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:process@0.10.1", ["npm:process@0.10.1/browser"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:process@0.10.1/browser");
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/key", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/di/type_literal", "npm:angular2@2.0.0-alpha.28/src/di/forward_ref", "npm:angular2@2.0.0-alpha.28/src/di/type_literal"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var type_literal_1 = require("npm:angular2@2.0.0-alpha.28/src/di/type_literal");
  var forward_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/di/forward_ref");
  var type_literal_2 = require("npm:angular2@2.0.0-alpha.28/src/di/type_literal");
  exports.TypeLiteral = type_literal_2.TypeLiteral;
  var Key = (function() {
    function Key(token, id) {
      this.token = token;
      this.id = id;
      if (lang_1.isBlank(token)) {
        throw new lang_1.BaseException('Token must be defined!');
      }
    }
    Object.defineProperty(Key.prototype, "displayName", {
      get: function() {
        return lang_1.stringify(this.token);
      },
      enumerable: true,
      configurable: true
    });
    Key.get = function(token) {
      return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token));
    };
    Object.defineProperty(Key, "numberOfKeys", {
      get: function() {
        return _globalKeyRegistry.numberOfKeys;
      },
      enumerable: true,
      configurable: true
    });
    return Key;
  })();
  exports.Key = Key;
  var KeyRegistry = (function() {
    function KeyRegistry() {
      this._allKeys = new Map();
    }
    KeyRegistry.prototype.get = function(token) {
      if (token instanceof Key)
        return token;
      var theToken = token;
      if (token instanceof type_literal_1.TypeLiteral) {
        theToken = token.type;
      }
      token = theToken;
      if (this._allKeys.has(token)) {
        return this._allKeys.get(token);
      }
      var newKey = new Key(token, Key.numberOfKeys);
      this._allKeys.set(token, newKey);
      return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
      get: function() {
        return collection_1.MapWrapper.size(this._allKeys);
      },
      enumerable: true,
      configurable: true
    });
    return KeyRegistry;
  })();
  exports.KeyRegistry = KeyRegistry;
  var _globalKeyRegistry = new KeyRegistry();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations/visibility", ["npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/visibility"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var visibility_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/visibility");
  exports.SelfAnnotation = visibility_1.Self;
  exports.AncestorAnnotation = visibility_1.Ancestor;
  exports.ParentAnnotation = visibility_1.Parent;
  exports.UnboundedAnnotation = visibility_1.Unbounded;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/annotations/view", ["npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/view"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var view_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/view");
  exports.ViewAnnotation = view_1.View;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/dom/browser_adapter", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/dom/generic_browser_adapter"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var generic_browser_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/generic_browser_adapter");
  var _attrToPropMap = {
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex'
  };
  var DOM_KEY_LOCATION_NUMPAD = 3;
  var _keyMap = {
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
  };
  var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
  };
  var BrowserDomAdapter = (function(_super) {
    __extends(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
      _super.apply(this, arguments);
    }
    BrowserDomAdapter.makeCurrent = function() {
      dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter());
    };
    BrowserDomAdapter.prototype.hasProperty = function(element, name) {
      return name in element;
    };
    BrowserDomAdapter.prototype.setProperty = function(el, name, value) {
      el[name] = value;
    };
    BrowserDomAdapter.prototype.getProperty = function(el, name) {
      return el[name];
    };
    BrowserDomAdapter.prototype.invoke = function(el, methodName, args) {
      el[methodName].apply(el, args);
    };
    BrowserDomAdapter.prototype.logError = function(error) {
      window.console.error(error);
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
      get: function() {
        return _attrToPropMap;
      },
      enumerable: true,
      configurable: true
    });
    BrowserDomAdapter.prototype.query = function(selector) {
      return document.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelector = function(el, selector) {
      return el.querySelector(selector);
    };
    BrowserDomAdapter.prototype.querySelectorAll = function(el, selector) {
      return el.querySelectorAll(selector);
    };
    BrowserDomAdapter.prototype.on = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
    };
    BrowserDomAdapter.prototype.onAndCancel = function(el, evt, listener) {
      el.addEventListener(evt, listener, false);
      return function() {
        el.removeEventListener(evt, listener, false);
      };
    };
    BrowserDomAdapter.prototype.dispatchEvent = function(el, evt) {
      el.dispatchEvent(evt);
    };
    BrowserDomAdapter.prototype.createMouseEvent = function(eventType) {
      var evt = document.createEvent('MouseEvent');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.createEvent = function(eventType) {
      var evt = document.createEvent('Event');
      evt.initEvent(eventType, true, true);
      return evt;
    };
    BrowserDomAdapter.prototype.preventDefault = function(evt) {
      evt.preventDefault();
      evt.returnValue = false;
    };
    BrowserDomAdapter.prototype.getInnerHTML = function(el) {
      return el.innerHTML;
    };
    BrowserDomAdapter.prototype.getOuterHTML = function(el) {
      return el.outerHTML;
    };
    BrowserDomAdapter.prototype.nodeName = function(node) {
      return node.nodeName;
    };
    BrowserDomAdapter.prototype.nodeValue = function(node) {
      return node.nodeValue;
    };
    BrowserDomAdapter.prototype.type = function(node) {
      return node.type;
    };
    BrowserDomAdapter.prototype.content = function(node) {
      if (this.hasProperty(node, "content")) {
        return node.content;
      } else {
        return node;
      }
    };
    BrowserDomAdapter.prototype.firstChild = function(el) {
      return el.firstChild;
    };
    BrowserDomAdapter.prototype.nextSibling = function(el) {
      return el.nextSibling;
    };
    BrowserDomAdapter.prototype.parentElement = function(el) {
      return el.parentElement;
    };
    BrowserDomAdapter.prototype.childNodes = function(el) {
      return el.childNodes;
    };
    BrowserDomAdapter.prototype.childNodesAsList = function(el) {
      var childNodes = el.childNodes;
      var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
      for (var i = 0; i < childNodes.length; i++) {
        res[i] = childNodes[i];
      }
      return res;
    };
    BrowserDomAdapter.prototype.clearNodes = function(el) {
      for (var i = 0; i < el.childNodes.length; i++) {
        this.remove(el.childNodes[i]);
      }
    };
    BrowserDomAdapter.prototype.appendChild = function(el, node) {
      el.appendChild(node);
    };
    BrowserDomAdapter.prototype.removeChild = function(el, node) {
      el.removeChild(node);
    };
    BrowserDomAdapter.prototype.replaceChild = function(el, newChild, oldChild) {
      el.replaceChild(newChild, oldChild);
    };
    BrowserDomAdapter.prototype.remove = function(el) {
      var parent = el.parentNode;
      parent.removeChild(el);
      return el;
    };
    BrowserDomAdapter.prototype.insertBefore = function(el, node) {
      el.parentNode.insertBefore(node, el);
    };
    BrowserDomAdapter.prototype.insertAllBefore = function(el, nodes) {
      collection_1.ListWrapper.forEach(nodes, function(n) {
        el.parentNode.insertBefore(n, el);
      });
    };
    BrowserDomAdapter.prototype.insertAfter = function(el, node) {
      el.parentNode.insertBefore(node, el.nextSibling);
    };
    BrowserDomAdapter.prototype.setInnerHTML = function(el, value) {
      el.innerHTML = value;
    };
    BrowserDomAdapter.prototype.getText = function(el) {
      return el.textContent;
    };
    BrowserDomAdapter.prototype.setText = function(el, value) {
      el.textContent = value;
    };
    BrowserDomAdapter.prototype.getValue = function(el) {
      return el.value;
    };
    BrowserDomAdapter.prototype.setValue = function(el, value) {
      el.value = value;
    };
    BrowserDomAdapter.prototype.getChecked = function(el) {
      return el.checked;
    };
    BrowserDomAdapter.prototype.setChecked = function(el, value) {
      el.checked = value;
    };
    BrowserDomAdapter.prototype.createTemplate = function(html) {
      var t = document.createElement('template');
      t.innerHTML = html;
      return t;
    };
    BrowserDomAdapter.prototype.createElement = function(tagName, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createElement(tagName);
    };
    BrowserDomAdapter.prototype.createTextNode = function(text, doc) {
      if (doc === void 0) {
        doc = document;
      }
      return doc.createTextNode(text);
    };
    BrowserDomAdapter.prototype.createScriptTag = function(attrName, attrValue, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var el = doc.createElement('SCRIPT');
      el.setAttribute(attrName, attrValue);
      return el;
    };
    BrowserDomAdapter.prototype.createStyleElement = function(css, doc) {
      if (doc === void 0) {
        doc = document;
      }
      var style = doc.createElement('style');
      this.appendChild(style, this.createTextNode(css));
      return style;
    };
    BrowserDomAdapter.prototype.createShadowRoot = function(el) {
      return el.createShadowRoot();
    };
    BrowserDomAdapter.prototype.getShadowRoot = function(el) {
      return el.shadowRoot;
    };
    BrowserDomAdapter.prototype.getHost = function(el) {
      return el.host;
    };
    BrowserDomAdapter.prototype.clone = function(node) {
      return node.cloneNode(true);
    };
    BrowserDomAdapter.prototype.getElementsByClassName = function(element, name) {
      return element.getElementsByClassName(name);
    };
    BrowserDomAdapter.prototype.getElementsByTagName = function(element, name) {
      return element.getElementsByTagName(name);
    };
    BrowserDomAdapter.prototype.classList = function(element) {
      return Array.prototype.slice.call(element.classList, 0);
    };
    BrowserDomAdapter.prototype.addClass = function(element, classname) {
      element.classList.add(classname);
    };
    BrowserDomAdapter.prototype.removeClass = function(element, classname) {
      element.classList.remove(classname);
    };
    BrowserDomAdapter.prototype.hasClass = function(element, classname) {
      return element.classList.contains(classname);
    };
    BrowserDomAdapter.prototype.setStyle = function(element, stylename, stylevalue) {
      element.style[stylename] = stylevalue;
    };
    BrowserDomAdapter.prototype.removeStyle = function(element, stylename) {
      element.style[stylename] = null;
    };
    BrowserDomAdapter.prototype.getStyle = function(element, stylename) {
      return element.style[stylename];
    };
    BrowserDomAdapter.prototype.tagName = function(element) {
      return element.tagName;
    };
    BrowserDomAdapter.prototype.attributeMap = function(element) {
      var res = new Map();
      var elAttrs = element.attributes;
      for (var i = 0; i < elAttrs.length; i++) {
        var attrib = elAttrs[i];
        res.set(attrib.name, attrib.value);
      }
      return res;
    };
    BrowserDomAdapter.prototype.hasAttribute = function(element, attribute) {
      return element.hasAttribute(attribute);
    };
    BrowserDomAdapter.prototype.getAttribute = function(element, attribute) {
      return element.getAttribute(attribute);
    };
    BrowserDomAdapter.prototype.setAttribute = function(element, name, value) {
      element.setAttribute(name, value);
    };
    BrowserDomAdapter.prototype.removeAttribute = function(element, attribute) {
      return element.removeAttribute(attribute);
    };
    BrowserDomAdapter.prototype.templateAwareRoot = function(el) {
      return this.isTemplateElement(el) ? this.content(el) : el;
    };
    BrowserDomAdapter.prototype.createHtmlDocument = function() {
      return document.implementation.createHTMLDocument('fakeTitle');
    };
    BrowserDomAdapter.prototype.defaultDoc = function() {
      return document;
    };
    BrowserDomAdapter.prototype.getBoundingClientRect = function(el) {
      try {
        return el.getBoundingClientRect();
      } catch (e) {
        return {
          top: 0,
          bottom: 0,
          left: 0,
          right: 0,
          width: 0,
          height: 0
        };
      }
    };
    BrowserDomAdapter.prototype.getTitle = function() {
      return document.title;
    };
    BrowserDomAdapter.prototype.setTitle = function(newTitle) {
      document.title = newTitle || '';
    };
    BrowserDomAdapter.prototype.elementMatches = function(n, selector) {
      return n instanceof HTMLElement && n.matches ? n.matches(selector) : n.msMatchesSelector(selector);
    };
    BrowserDomAdapter.prototype.isTemplateElement = function(el) {
      return el instanceof HTMLElement && el.nodeName == "TEMPLATE";
    };
    BrowserDomAdapter.prototype.isTextNode = function(node) {
      return node.nodeType === Node.TEXT_NODE;
    };
    BrowserDomAdapter.prototype.isCommentNode = function(node) {
      return node.nodeType === Node.COMMENT_NODE;
    };
    BrowserDomAdapter.prototype.isElementNode = function(node) {
      return node.nodeType === Node.ELEMENT_NODE;
    };
    BrowserDomAdapter.prototype.hasShadowRoot = function(node) {
      return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot);
    };
    BrowserDomAdapter.prototype.isShadowRoot = function(node) {
      return node instanceof DocumentFragment;
    };
    BrowserDomAdapter.prototype.importIntoDoc = function(node) {
      var toImport = node;
      if (this.isTemplateElement(node)) {
        toImport = this.content(node);
      }
      return document.importNode(toImport, true);
    };
    BrowserDomAdapter.prototype.isPageRule = function(rule) {
      return rule.type === CSSRule.PAGE_RULE;
    };
    BrowserDomAdapter.prototype.isStyleRule = function(rule) {
      return rule.type === CSSRule.STYLE_RULE;
    };
    BrowserDomAdapter.prototype.isMediaRule = function(rule) {
      return rule.type === CSSRule.MEDIA_RULE;
    };
    BrowserDomAdapter.prototype.isKeyframesRule = function(rule) {
      return rule.type === CSSRule.KEYFRAMES_RULE;
    };
    BrowserDomAdapter.prototype.getHref = function(el) {
      return el.href;
    };
    BrowserDomAdapter.prototype.getEventKey = function(event) {
      var key = event.key;
      if (lang_1.isBlank(key)) {
        key = event.keyIdentifier;
        if (lang_1.isBlank(key)) {
          return 'Unidentified';
        }
        if (key.startsWith('U+')) {
          key = String.fromCharCode(parseInt(key.substring(2), 16));
          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
            key = _chromeNumKeyPadMap[key];
          }
        }
      }
      if (_keyMap.hasOwnProperty(key)) {
        key = _keyMap[key];
      }
      return key;
    };
    BrowserDomAdapter.prototype.getGlobalEventTarget = function(target) {
      if (target == "window") {
        return window;
      } else if (target == "document") {
        return document;
      } else if (target == "body") {
        return document.body;
      }
    };
    BrowserDomAdapter.prototype.getHistory = function() {
      return window.history;
    };
    BrowserDomAdapter.prototype.getLocation = function() {
      return window.location;
    };
    BrowserDomAdapter.prototype.getBaseHref = function() {
      return relativePath(document.baseURI);
    };
    BrowserDomAdapter.prototype.getUserAgent = function() {
      return window.navigator.userAgent;
    };
    BrowserDomAdapter.prototype.setData = function(element, name, value) {
      element.dataset[name] = value;
    };
    BrowserDomAdapter.prototype.getData = function(element, name) {
      return element.dataset[name];
    };
    BrowserDomAdapter.prototype.setGlobalVar = function(name, value) {
      lang_1.global[name] = value;
    };
    return BrowserDomAdapter;
  })(generic_browser_adapter_1.GenericBrowserDomAdapter);
  exports.BrowserDomAdapter = BrowserDomAdapter;
  var urlParsingNode = null;
  function relativePath(url) {
    if (lang_1.isBlank(urlParsingNode)) {
      urlParsingNode = document.createElement("a");
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_resolver", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/annotations", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/annotations");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection");
  var DirectiveResolver = (function() {
    function DirectiveResolver() {}
    DirectiveResolver.prototype.resolve = function(type) {
      var annotations = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
      if (lang_1.isPresent(annotations)) {
        for (var i = 0; i < annotations.length; i++) {
          var annotation = annotations[i];
          if (annotation instanceof annotations_1.Directive) {
            return annotation;
          }
        }
      }
      throw new lang_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
    };
    DirectiveResolver = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], DirectiveResolver);
    return DirectiveResolver;
  })();
  exports.DirectiveResolver = DirectiveResolver;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/change_detection", "npm:angular2@2.0.0-alpha.28/src/core/compiler/element_binder", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref", "npm:angular2@2.0.0-alpha.28/src/core/compiler/element_ref"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
  var element_binder_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_binder");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref");
  var element_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_ref");
  var AppViewContainer = (function() {
    function AppViewContainer() {
      this.views = [];
    }
    return AppViewContainer;
  })();
  exports.AppViewContainer = AppViewContainer;
  var AppView = (function() {
    function AppView(renderer, proto, protoLocals) {
      this.renderer = renderer;
      this.proto = proto;
      this.render = null;
      this.elementInjectors = null;
      this.changeDetector = null;
      this.componentChildViews = null;
      this.preBuiltObjects = null;
      this.context = null;
      this.viewContainers = collection_1.ListWrapper.createFixedSize(this.proto.elementBinders.length);
      this.elementRefs = collection_1.ListWrapper.createFixedSize(this.proto.elementBinders.length);
      this.ref = new view_ref_1.ViewRef(this);
      for (var i = 0; i < this.elementRefs.length; i++) {
        this.elementRefs[i] = new element_ref_1.ElementRef(this.ref, i, renderer);
      }
      this.locals = new change_detection_1.Locals(null, collection_1.MapWrapper.clone(protoLocals));
    }
    AppView.prototype.init = function(changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews) {
      this.changeDetector = changeDetector;
      this.elementInjectors = elementInjectors;
      this.rootElementInjectors = rootElementInjectors;
      this.preBuiltObjects = preBuiltObjects;
      this.componentChildViews = componentChildViews;
    };
    AppView.prototype.setLocal = function(contextName, value) {
      if (!this.hydrated())
        throw new lang_1.BaseException('Cannot set locals on dehydrated view.');
      if (!this.proto.variableBindings.has(contextName)) {
        return ;
      }
      var templateName = this.proto.variableBindings.get(contextName);
      this.locals.set(templateName, value);
    };
    AppView.prototype.hydrated = function() {
      return lang_1.isPresent(this.context);
    };
    AppView.prototype.triggerEventHandlers = function(eventName, eventObj, binderIndex) {
      var locals = new collection_1.Map();
      locals.set('$event', eventObj);
      this.dispatchEvent(binderIndex, eventName, locals);
    };
    AppView.prototype.notifyOnBinding = function(b, currentValue) {
      if (b.isElementProperty()) {
        this.renderer.setElementProperty(this.elementRefs[b.elementIndex], b.propertyName, currentValue);
      } else if (b.isElementAttribute()) {
        this.renderer.setElementAttribute(this.elementRefs[b.elementIndex], b.propertyName, currentValue);
      } else if (b.isElementClass()) {
        this.renderer.setElementClass(this.elementRefs[b.elementIndex], b.propertyName, currentValue);
      } else if (b.isElementStyle()) {
        var unit = lang_1.isPresent(b.propertyUnit) ? b.propertyUnit : '';
        this.renderer.setElementStyle(this.elementRefs[b.elementIndex], b.propertyName, "" + currentValue + unit);
      } else if (b.isTextNode()) {
        this.renderer.setText(this.render, b.elementIndex, currentValue);
      } else {
        throw new lang_1.BaseException('Unsupported directive record');
      }
    };
    AppView.prototype.notifyOnAllChangesDone = function() {
      var ei = this.elementInjectors;
      for (var i = ei.length - 1; i >= 0; i--) {
        if (lang_1.isPresent(ei[i]))
          ei[i].onAllChangesDone();
      }
    };
    AppView.prototype.getDirectiveFor = function(directive) {
      var elementInjector = this.elementInjectors[directive.elementIndex];
      return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
    };
    AppView.prototype.getDetectorFor = function(directive) {
      var childView = this.componentChildViews[directive.elementIndex];
      return lang_1.isPresent(childView) ? childView.changeDetector : null;
    };
    AppView.prototype.invokeElementMethod = function(elementIndex, methodName, args) {
      this.renderer.invokeElementMethod(this.elementRefs[elementIndex], methodName, args);
    };
    AppView.prototype.dispatchEvent = function(elementIndex, eventName, locals) {
      var _this = this;
      var allowDefaultBehavior = true;
      if (this.hydrated()) {
        var elBinder = this.proto.elementBinders[elementIndex];
        if (lang_1.isBlank(elBinder.hostListeners))
          return allowDefaultBehavior;
        var eventMap = elBinder.hostListeners[eventName];
        if (lang_1.isBlank(eventMap))
          return allowDefaultBehavior;
        collection_1.MapWrapper.forEach(eventMap, function(expr, directiveIndex) {
          var context;
          if (directiveIndex === -1) {
            context = _this.context;
          } else {
            context = _this.elementInjectors[elementIndex].getDirectiveAtIndex(directiveIndex);
          }
          var result = expr.eval(context, new change_detection_1.Locals(_this.locals, locals));
          if (lang_1.isPresent(result)) {
            allowDefaultBehavior = allowDefaultBehavior && result == true;
          }
        });
      }
      return allowDefaultBehavior;
    };
    return AppView;
  })();
  exports.AppView = AppView;
  var AppProtoView = (function() {
    function AppProtoView(render, protoChangeDetector, variableBindings, variableLocations) {
      var _this = this;
      this.render = render;
      this.protoChangeDetector = protoChangeDetector;
      this.variableBindings = variableBindings;
      this.variableLocations = variableLocations;
      this.elementBinders = [];
      this.protoLocals = new collection_1.Map();
      if (lang_1.isPresent(variableBindings)) {
        collection_1.MapWrapper.forEach(variableBindings, function(templateName, _) {
          _this.protoLocals.set(templateName, null);
        });
      }
    }
    AppProtoView.prototype.bindElement = function(parent, distanceToParent, protoElementInjector, componentDirective) {
      if (componentDirective === void 0) {
        componentDirective = null;
      }
      var elBinder = new element_binder_1.ElementBinder(this.elementBinders.length, parent, distanceToParent, protoElementInjector, componentDirective);
      this.elementBinders.push(elBinder);
      return elBinder;
    };
    AppProtoView.prototype.bindEvent = function(eventBindings, boundElementIndex, directiveIndex) {
      if (directiveIndex === void 0) {
        directiveIndex = -1;
      }
      var elBinder = this.elementBinders[boundElementIndex];
      var events = elBinder.hostListeners;
      if (lang_1.isBlank(events)) {
        events = collection_1.StringMapWrapper.create();
        elBinder.hostListeners = events;
      }
      for (var i = 0; i < eventBindings.length; i++) {
        var eventBinding = eventBindings[i];
        var eventName = eventBinding.fullName;
        var event = collection_1.StringMapWrapper.get(events, eventName);
        if (lang_1.isBlank(event)) {
          event = new collection_1.Map();
          collection_1.StringMapWrapper.set(events, eventName, event);
        }
        event.set(directiveIndex, eventBinding.source);
      }
    };
    return AppProtoView;
  })();
  exports.AppProtoView = AppProtoView;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/query_list", ["npm:angular2@2.0.0-alpha.28/src/core/compiler/base_query_list"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var base_query_list_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/base_query_list");
  var QueryList = (function(_super) {
    __extends(QueryList, _super);
    function QueryList() {
      _super.apply(this, arguments);
    }
    QueryList.prototype.onChange = function(callback) {
      return _super.prototype.onChange.call(this, callback);
    };
    QueryList.prototype.removeCallback = function(callback) {
      return _super.prototype.removeCallback.call(this, callback);
    };
    return QueryList;
  })(base_query_list_1.BaseQueryList);
  exports.QueryList = QueryList;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_inliner", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/render/xhr", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/services/url_resolver", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_url_resolver", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/async"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var xhr_1 = require("npm:angular2@2.0.0-alpha.28/src/render/xhr");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var url_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/services/url_resolver");
  var style_url_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_url_resolver");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var StyleInliner = (function() {
    function StyleInliner(_xhr, _styleUrlResolver, _urlResolver) {
      this._xhr = _xhr;
      this._styleUrlResolver = _styleUrlResolver;
      this._urlResolver = _urlResolver;
    }
    StyleInliner.prototype.inlineImports = function(cssText, baseUrl) {
      return this._inlineImports(cssText, baseUrl, []);
    };
    StyleInliner.prototype._inlineImports = function(cssText, baseUrl, inlinedUrls) {
      var _this = this;
      var partIndex = 0;
      var parts = lang_1.StringWrapper.split(cssText, _importRe);
      if (parts.length === 1) {
        return cssText;
      }
      var promises = [];
      while (partIndex < parts.length - 1) {
        var prefix = parts[partIndex];
        var rule = parts[partIndex + 1];
        var url = _extractUrl(rule);
        if (lang_1.isPresent(url)) {
          url = this._urlResolver.resolve(baseUrl, url);
        }
        var mediaQuery = _extractMediaQuery(rule);
        var promise;
        if (lang_1.isBlank(url)) {
          promise = async_1.PromiseWrapper.resolve("/* Invalid import rule: \"@import " + rule + ";\" */");
        } else if (collection_1.ListWrapper.contains(inlinedUrls, url)) {
          promise = async_1.PromiseWrapper.resolve(prefix);
        } else {
          inlinedUrls.push(url);
          promise = async_1.PromiseWrapper.then(this._xhr.get(url), function(rawCss) {
            var inlinedCss = _this._inlineImports(rawCss, url, inlinedUrls);
            if (lang_1.isPromise(inlinedCss)) {
              return inlinedCss.then(function(css) {
                return prefix + _this._transformImportedCss(css, mediaQuery, url) + '\n';
              });
            } else {
              return prefix + _this._transformImportedCss(inlinedCss, mediaQuery, url) + '\n';
            }
          }, function(error) {
            return ("/* failed to import " + url + " */\n");
          });
        }
        promises.push(promise);
        partIndex += 2;
      }
      return async_1.PromiseWrapper.all(promises).then(function(cssParts) {
        var cssText = cssParts.join('');
        if (partIndex < parts.length) {
          cssText += parts[partIndex];
        }
        return cssText;
      });
    };
    StyleInliner.prototype._transformImportedCss = function(css, mediaQuery, url) {
      css = this._styleUrlResolver.resolveUrls(css, url);
      return _wrapInMediaRule(css, mediaQuery);
    };
    StyleInliner = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [xhr_1.XHR, style_url_resolver_1.StyleUrlResolver, url_resolver_1.UrlResolver])], StyleInliner);
    return StyleInliner;
  })();
  exports.StyleInliner = StyleInliner;
  function _extractUrl(importRule) {
    var match = lang_1.RegExpWrapper.firstMatch(_urlRe, importRule);
    if (lang_1.isBlank(match))
      return null;
    return lang_1.isPresent(match[1]) ? match[1] : match[2];
  }
  function _extractMediaQuery(importRule) {
    var match = lang_1.RegExpWrapper.firstMatch(_mediaQueryRe, importRule);
    if (lang_1.isBlank(match))
      return null;
    var mediaQuery = match[1].trim();
    return (mediaQuery.length > 0) ? mediaQuery : null;
  }
  function _wrapInMediaRule(css, query) {
    return (lang_1.isBlank(query)) ? css : "@media " + query + " {\n" + css + "\n}";
  }
  var _importRe = lang_1.RegExpWrapper.create('@import\\s+([^;]+);');
  var _urlRe = lang_1.RegExpWrapper.create('url\\(\\s*?[\'"]?([^\'")]+)[\'"]?|' + '[\'"]([^\'")]+)[\'"]');
  var _mediaQueryRe = lang_1.RegExpWrapper.create('[\'"][^\'"]+[\'"]\\s*\\)?\\s*(.*)');
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/util", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_css"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var shadow_css_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_css");
  var _componentUIDs = new collection_1.Map();
  var _nextComponentUID = 0;
  var _sharedStyleTexts = new collection_1.Map();
  var _lastInsertedStyleEl;
  function getComponentId(componentStringId) {
    var id = _componentUIDs.get(componentStringId);
    if (lang_1.isBlank(id)) {
      id = _nextComponentUID++;
      _componentUIDs.set(componentStringId, id);
    }
    return id;
  }
  exports.getComponentId = getComponentId;
  function insertSharedStyleText(cssText, styleHost, styleEl) {
    if (!_sharedStyleTexts.has(cssText)) {
      _sharedStyleTexts.set(cssText, true);
      insertStyleElement(styleHost, styleEl);
    }
  }
  exports.insertSharedStyleText = insertSharedStyleText;
  function insertStyleElement(host, styleEl) {
    if (lang_1.isBlank(_lastInsertedStyleEl)) {
      var firstChild = dom_adapter_1.DOM.firstChild(host);
      if (lang_1.isPresent(firstChild)) {
        dom_adapter_1.DOM.insertBefore(firstChild, styleEl);
      } else {
        dom_adapter_1.DOM.appendChild(host, styleEl);
      }
    } else {
      dom_adapter_1.DOM.insertAfter(_lastInsertedStyleEl, styleEl);
    }
    _lastInsertedStyleEl = styleEl;
  }
  exports.insertStyleElement = insertStyleElement;
  function getHostAttribute(id) {
    return "_nghost-" + id;
  }
  exports.getHostAttribute = getHostAttribute;
  function getContentAttribute(id) {
    return "_ngcontent-" + id;
  }
  exports.getContentAttribute = getContentAttribute;
  function shimCssForComponent(cssText, componentId) {
    var id = getComponentId(componentId);
    var shadowCss = new shadow_css_1.ShadowCss();
    return shadowCss.shimCssText(cssText, getContentAttribute(id), getHostAttribute(id));
  }
  exports.shimCssForComponent = shimCssForComponent;
  function resetShadowDomCache() {
    _componentUIDs.clear();
    _nextComponentUID = 0;
    _sharedStyleTexts.clear();
    _lastInsertedStyleEl = null;
  }
  exports.resetShadowDomCache = resetShadowDomCache;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/events/hammer_gestures", ["npm:angular2@2.0.0-alpha.28/src/render/dom/events/hammer_common", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var hammer_common_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/events/hammer_common");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var HammerGesturesPlugin = (function(_super) {
    __extends(HammerGesturesPlugin, _super);
    function HammerGesturesPlugin() {
      _super.call(this);
    }
    HammerGesturesPlugin.prototype.supports = function(eventName) {
      if (!_super.prototype.supports.call(this, eventName))
        return false;
      if (!lang_1.isPresent(window['Hammer'])) {
        throw new lang_1.BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
      }
      return true;
    };
    HammerGesturesPlugin.prototype.addEventListener = function(element, eventName, handler, shouldSupportBubble) {
      if (shouldSupportBubble)
        throw new lang_1.BaseException('Hammer.js plugin does not support bubbling gestures.');
      var zone = this.manager.getZone();
      eventName = eventName.toLowerCase();
      zone.runOutsideAngular(function() {
        var mc = new Hammer(element);
        mc.get('pinch').set({enable: true});
        mc.get('rotate').set({enable: true});
        mc.on(eventName, function(eventObj) {
          zone.run(function() {
            handler(eventObj);
          });
        });
      });
    };
    return HammerGesturesPlugin;
  })(hammer_common_1.HammerGesturesPluginCommon);
  exports.HammerGesturesPlugin = HammerGesturesPlugin;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/testability/testability", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/core/testability/get_testability"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var getTestabilityModule = require("npm:angular2@2.0.0-alpha.28/src/core/testability/get_testability");
  var Testability = (function() {
    function Testability() {
      this._pendingCount = 0;
      this._callbacks = [];
    }
    Testability.prototype.increaseCount = function(delta) {
      if (delta === void 0) {
        delta = 1;
      }
      this._pendingCount += delta;
      if (this._pendingCount < 0) {
        throw new lang_1.BaseException('pending async requests below zero');
      } else if (this._pendingCount == 0) {
        this._runCallbacks();
      }
      return this._pendingCount;
    };
    Testability.prototype._runCallbacks = function() {
      while (this._callbacks.length !== 0) {
        collection_1.ListWrapper.removeLast(this._callbacks)();
      }
    };
    Testability.prototype.whenStable = function(callback) {
      this._callbacks.push(callback);
      if (this._pendingCount === 0) {
        this._runCallbacks();
      }
    };
    Testability.prototype.getPendingCount = function() {
      return this._pendingCount;
    };
    Testability.prototype.findBindings = function(using, binding, exactMatch) {
      return [];
    };
    Testability = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], Testability);
    return Testability;
  })();
  exports.Testability = Testability;
  var TestabilityRegistry = (function() {
    function TestabilityRegistry() {
      this._applications = new collection_1.Map();
      getTestabilityModule.GetTestability.addToWindow(this);
    }
    TestabilityRegistry.prototype.registerApplication = function(token, testability) {
      this._applications.set(token, testability);
    };
    TestabilityRegistry.prototype.findTestabilityInTree = function(elem) {
      if (elem == null) {
        return null;
      }
      if (this._applications.has(elem)) {
        return this._applications.get(elem);
      }
      if (dom_adapter_1.DOM.isShadowRoot(elem)) {
        return this.findTestabilityInTree(dom_adapter_1.DOM.getHost(elem));
      }
      return this.findTestabilityInTree(dom_adapter_1.DOM.parentElement(elem));
    };
    TestabilityRegistry = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], TestabilityRegistry);
    return TestabilityRegistry;
  })();
  exports.TestabilityRegistry = TestabilityRegistry;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/dom/util", "npm:angular2@2.0.0-alpha.28/src/render/api"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/util");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  function resolveInternalDomProtoView(protoViewRef) {
    return protoViewRef._protoView;
  }
  exports.resolveInternalDomProtoView = resolveInternalDomProtoView;
  var DomProtoViewRef = (function(_super) {
    __extends(DomProtoViewRef, _super);
    function DomProtoViewRef(_protoView) {
      _super.call(this);
      this._protoView = _protoView;
    }
    return DomProtoViewRef;
  })(api_1.RenderProtoViewRef);
  exports.DomProtoViewRef = DomProtoViewRef;
  var DomProtoView = (function() {
    function DomProtoView(_a) {
      var elementBinders = _a.elementBinders,
          element = _a.element,
          transitiveContentTagCount = _a.transitiveContentTagCount,
          boundTextNodeCount = _a.boundTextNodeCount;
      this.element = element;
      this.elementBinders = elementBinders;
      this.transitiveContentTagCount = transitiveContentTagCount;
      this.isTemplateElement = dom_adapter_1.DOM.isTemplateElement(this.element);
      this.rootBindingOffset = (lang_1.isPresent(this.element) && dom_adapter_1.DOM.hasClass(this.element, util_1.NG_BINDING_CLASS)) ? 1 : 0;
      this.boundTextNodeCount = boundTextNodeCount;
      this.rootNodeCount = this.isTemplateElement ? dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.content(this.element)).length : 1;
    }
    return DomProtoView;
  })();
  exports.DomProtoView = DomProtoView;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view_builder", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/change_detection", "npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view", "npm:angular2@2.0.0-alpha.28/src/render/dom/view/element_binder", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/render/dom/util"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
  var proto_view_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view");
  var element_binder_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/view/element_binder");
  var api = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/util");
  var ProtoViewBuilder = (function() {
    function ProtoViewBuilder(rootElement, type) {
      this.rootElement = rootElement;
      this.type = type;
      this.variableBindings = new Map();
      this.elements = [];
    }
    ProtoViewBuilder.prototype.bindElement = function(element, description) {
      if (description === void 0) {
        description = null;
      }
      var builder = new ElementBinderBuilder(this.elements.length, element, description);
      this.elements.push(builder);
      dom_adapter_1.DOM.addClass(element, util_1.NG_BINDING_CLASS);
      return builder;
    };
    ProtoViewBuilder.prototype.bindVariable = function(name, value) {
      this.variableBindings.set(value, name);
    };
    ProtoViewBuilder.prototype.build = function() {
      var _this = this;
      var renderElementBinders = [];
      var apiElementBinders = [];
      var transitiveContentTagCount = 0;
      var boundTextNodeCount = 0;
      collection_1.ListWrapper.forEach(this.elements, function(ebb) {
        var directiveTemplatePropertyNames = new collection_1.Set();
        var apiDirectiveBinders = collection_1.ListWrapper.map(ebb.directives, function(dbb) {
          ebb.eventBuilder.merge(dbb.eventBuilder);
          collection_1.ListWrapper.forEach(dbb.templatePropertyNames, function(name) {
            return directiveTemplatePropertyNames.add(name);
          });
          return new api.DirectiveBinder({
            directiveIndex: dbb.directiveIndex,
            propertyBindings: dbb.propertyBindings,
            eventBindings: dbb.eventBindings,
            hostPropertyBindings: buildElementPropertyBindings(ebb.element, lang_1.isPresent(ebb.componentId), dbb.hostPropertyBindings, directiveTemplatePropertyNames)
          });
        });
        var nestedProtoView = lang_1.isPresent(ebb.nestedProtoView) ? ebb.nestedProtoView.build() : null;
        var nestedRenderProtoView = lang_1.isPresent(nestedProtoView) ? proto_view_1.resolveInternalDomProtoView(nestedProtoView.render) : null;
        if (lang_1.isPresent(nestedRenderProtoView)) {
          transitiveContentTagCount += nestedRenderProtoView.transitiveContentTagCount;
        }
        if (lang_1.isPresent(ebb.contentTagSelector)) {
          transitiveContentTagCount++;
        }
        var parentIndex = lang_1.isPresent(ebb.parent) ? ebb.parent.index : -1;
        apiElementBinders.push(new api.ElementBinder({
          index: ebb.index,
          parentIndex: parentIndex,
          distanceToParent: ebb.distanceToParent,
          directives: apiDirectiveBinders,
          nestedProtoView: nestedProtoView,
          propertyBindings: buildElementPropertyBindings(ebb.element, lang_1.isPresent(ebb.componentId), ebb.propertyBindings, directiveTemplatePropertyNames),
          variableBindings: ebb.variableBindings,
          eventBindings: ebb.eventBindings,
          textBindings: ebb.textBindings,
          readAttributes: ebb.readAttributes
        }));
        var childNodeInfo = _this._analyzeChildNodes(ebb.element, ebb.textBindingNodes);
        boundTextNodeCount += ebb.textBindingNodes.length;
        renderElementBinders.push(new element_binder_1.ElementBinder({
          textNodeIndices: childNodeInfo.boundTextNodeIndices,
          contentTagSelector: ebb.contentTagSelector,
          parentIndex: parentIndex,
          distanceToParent: ebb.distanceToParent,
          nestedProtoView: lang_1.isPresent(nestedProtoView) ? proto_view_1.resolveInternalDomProtoView(nestedProtoView.render) : null,
          componentId: ebb.componentId,
          eventLocals: new change_detection_1.LiteralArray(ebb.eventBuilder.buildEventLocals()),
          localEvents: ebb.eventBuilder.buildLocalEvents(),
          globalEvents: ebb.eventBuilder.buildGlobalEvents(),
          elementIsEmpty: childNodeInfo.elementIsEmpty
        }));
      });
      return new api.ProtoViewDto({
        render: new proto_view_1.DomProtoViewRef(new proto_view_1.DomProtoView({
          element: this.rootElement,
          elementBinders: renderElementBinders,
          transitiveContentTagCount: transitiveContentTagCount,
          boundTextNodeCount: boundTextNodeCount
        })),
        type: this.type,
        elementBinders: apiElementBinders,
        variableBindings: this.variableBindings
      });
    };
    ProtoViewBuilder.prototype._analyzeChildNodes = function(parentElement, boundTextNodes) {
      var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(parentElement));
      var boundTextNodeIndices = [];
      var indexInBoundTextNodes = 0;
      var elementIsEmpty = true;
      for (var i = 0; i < childNodes.length; i++) {
        var node = childNodes[i];
        if (indexInBoundTextNodes < boundTextNodes.length && node === boundTextNodes[indexInBoundTextNodes]) {
          boundTextNodeIndices.push(i);
          indexInBoundTextNodes++;
          elementIsEmpty = false;
        } else if ((dom_adapter_1.DOM.isTextNode(node) && dom_adapter_1.DOM.getText(node).trim().length > 0) || (dom_adapter_1.DOM.isElementNode(node))) {
          elementIsEmpty = false;
        }
      }
      return new _ChildNodesInfo(boundTextNodeIndices, elementIsEmpty);
    };
    return ProtoViewBuilder;
  })();
  exports.ProtoViewBuilder = ProtoViewBuilder;
  var _ChildNodesInfo = (function() {
    function _ChildNodesInfo(boundTextNodeIndices, elementIsEmpty) {
      this.boundTextNodeIndices = boundTextNodeIndices;
      this.elementIsEmpty = elementIsEmpty;
    }
    return _ChildNodesInfo;
  })();
  var ElementBinderBuilder = (function() {
    function ElementBinderBuilder(index, element, description) {
      this.index = index;
      this.element = element;
      this.parent = null;
      this.distanceToParent = 0;
      this.directives = [];
      this.nestedProtoView = null;
      this.propertyBindings = new Map();
      this.variableBindings = new Map();
      this.propertyBindingsToDirectives = new collection_1.Set();
      this.eventBindings = [];
      this.eventBuilder = new EventBuilder();
      this.textBindingNodes = [];
      this.textBindings = [];
      this.contentTagSelector = null;
      this.readAttributes = new Map();
      this.componentId = null;
    }
    ElementBinderBuilder.prototype.setParent = function(parent, distanceToParent) {
      this.parent = parent;
      if (lang_1.isPresent(parent)) {
        this.distanceToParent = distanceToParent;
      }
      return this;
    };
    ElementBinderBuilder.prototype.readAttribute = function(attrName) {
      if (lang_1.isBlank(this.readAttributes.get(attrName))) {
        this.readAttributes.set(attrName, dom_adapter_1.DOM.getAttribute(this.element, attrName));
      }
    };
    ElementBinderBuilder.prototype.bindDirective = function(directiveIndex) {
      var directive = new DirectiveBuilder(directiveIndex);
      this.directives.push(directive);
      return directive;
    };
    ElementBinderBuilder.prototype.bindNestedProtoView = function(rootElement) {
      if (lang_1.isPresent(this.nestedProtoView)) {
        throw new lang_1.BaseException('Only one nested view per element is allowed');
      }
      this.nestedProtoView = new ProtoViewBuilder(rootElement, api.ViewType.EMBEDDED);
      return this.nestedProtoView;
    };
    ElementBinderBuilder.prototype.bindProperty = function(name, expression) {
      this.propertyBindings.set(name, expression);
    };
    ElementBinderBuilder.prototype.bindPropertyToDirective = function(name) {
      this.propertyBindingsToDirectives.add(name);
    };
    ElementBinderBuilder.prototype.bindVariable = function(name, value) {
      if (lang_1.isPresent(this.nestedProtoView)) {
        this.nestedProtoView.bindVariable(name, value);
      } else {
        this.variableBindings.set(value, name);
      }
    };
    ElementBinderBuilder.prototype.bindEvent = function(name, expression, target) {
      if (target === void 0) {
        target = null;
      }
      this.eventBindings.push(this.eventBuilder.add(name, expression, target));
    };
    ElementBinderBuilder.prototype.bindText = function(textNode, expression) {
      this.textBindingNodes.push(textNode);
      this.textBindings.push(expression);
    };
    ElementBinderBuilder.prototype.setContentTagSelector = function(value) {
      this.contentTagSelector = value;
    };
    ElementBinderBuilder.prototype.setComponentId = function(componentId) {
      this.componentId = componentId;
    };
    return ElementBinderBuilder;
  })();
  exports.ElementBinderBuilder = ElementBinderBuilder;
  var DirectiveBuilder = (function() {
    function DirectiveBuilder(directiveIndex) {
      this.directiveIndex = directiveIndex;
      this.propertyBindings = new Map();
      this.templatePropertyNames = [];
      this.hostPropertyBindings = new Map();
      this.eventBindings = [];
      this.eventBuilder = new EventBuilder();
    }
    DirectiveBuilder.prototype.bindProperty = function(name, expression, elProp) {
      this.propertyBindings.set(name, expression);
      if (lang_1.isPresent(elProp)) {
        this.templatePropertyNames.push(elProp);
      }
    };
    DirectiveBuilder.prototype.bindHostProperty = function(name, expression) {
      this.hostPropertyBindings.set(name, expression);
    };
    DirectiveBuilder.prototype.bindEvent = function(name, expression, target) {
      if (target === void 0) {
        target = null;
      }
      this.eventBindings.push(this.eventBuilder.add(name, expression, target));
    };
    return DirectiveBuilder;
  })();
  exports.DirectiveBuilder = DirectiveBuilder;
  var EventBuilder = (function(_super) {
    __extends(EventBuilder, _super);
    function EventBuilder() {
      _super.call(this);
      this.locals = [];
      this.localEvents = [];
      this.globalEvents = [];
      this._implicitReceiver = new change_detection_1.ImplicitReceiver();
    }
    EventBuilder.prototype.add = function(name, source, target) {
      var adjustedAst = source.ast;
      var fullName = lang_1.isPresent(target) ? target + util_1.EVENT_TARGET_SEPARATOR + name : name;
      var result = new api.EventBinding(fullName, new change_detection_1.ASTWithSource(adjustedAst, source.source, source.location));
      var event = new element_binder_1.Event(name, target, fullName);
      if (lang_1.isBlank(target)) {
        this.localEvents.push(event);
      } else {
        this.globalEvents.push(event);
      }
      return result;
    };
    EventBuilder.prototype.visitAccessMember = function(ast) {
      var isEventAccess = false;
      var current = ast;
      while (!isEventAccess && (current instanceof change_detection_1.AccessMember)) {
        var am = current;
        if (am.name == '$event') {
          isEventAccess = true;
        }
        current = am.receiver;
      }
      if (isEventAccess) {
        this.locals.push(ast);
        var index = this.locals.length - 1;
        return new change_detection_1.AccessMember(this._implicitReceiver, "" + index, function(arr) {
          return arr[index];
        }, null);
      } else {
        return ast;
      }
    };
    EventBuilder.prototype.buildEventLocals = function() {
      return this.locals;
    };
    EventBuilder.prototype.buildLocalEvents = function() {
      return this.localEvents;
    };
    EventBuilder.prototype.buildGlobalEvents = function() {
      return this.globalEvents;
    };
    EventBuilder.prototype.merge = function(eventBuilder) {
      this._merge(this.localEvents, eventBuilder.localEvents);
      this._merge(this.globalEvents, eventBuilder.globalEvents);
      collection_1.ListWrapper.concat(this.locals, eventBuilder.locals);
    };
    EventBuilder.prototype._merge = function(host, tobeAdded) {
      var names = [];
      for (var i = 0; i < host.length; i++) {
        names.push(host[i].fullName);
      }
      for (var j = 0; j < tobeAdded.length; j++) {
        if (!collection_1.ListWrapper.contains(names, tobeAdded[j].fullName)) {
          host.push(tobeAdded[j]);
        }
      }
    };
    return EventBuilder;
  })(change_detection_1.AstTransformer);
  exports.EventBuilder = EventBuilder;
  var PROPERTY_PARTS_SEPARATOR = new RegExp('\\.');
  var ATTRIBUTE_PREFIX = 'attr';
  var CLASS_PREFIX = 'class';
  var STYLE_PREFIX = 'style';
  function buildElementPropertyBindings(protoElement, isNgComponent, bindingsInTemplate, directiveTempaltePropertyNames) {
    var propertyBindings = [];
    collection_1.MapWrapper.forEach(bindingsInTemplate, function(ast, propertyNameInTemplate) {
      var propertyBinding = createElementPropertyBinding(ast, propertyNameInTemplate);
      if (isValidElementPropertyBinding(protoElement, isNgComponent, propertyBinding)) {
        propertyBindings.push(propertyBinding);
      } else if (!collection_1.SetWrapper.has(directiveTempaltePropertyNames, propertyNameInTemplate)) {
        throw new lang_1.BaseException("Can't bind to '" + propertyNameInTemplate + "' since it isn't a know property of the '" + dom_adapter_1.DOM.tagName(protoElement).toLowerCase() + "' element and there are no matching directives with a corresponding property");
      }
    });
    return propertyBindings;
  }
  function isValidElementPropertyBinding(protoElement, isNgComponent, binding) {
    if (binding.type === api.PropertyBindingType.PROPERTY) {
      var tagName = dom_adapter_1.DOM.tagName(protoElement);
      var possibleCustomElement = tagName.indexOf('-') !== -1;
      if (possibleCustomElement && !isNgComponent) {
        return true;
      } else {
        return dom_adapter_1.DOM.hasProperty(protoElement, binding.property);
      }
    }
    return true;
  }
  function createElementPropertyBinding(ast, propertyNameInTemplate) {
    var parts = lang_1.StringWrapper.split(propertyNameInTemplate, PROPERTY_PARTS_SEPARATOR);
    if (parts.length === 1) {
      var propName = parts[0];
      var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, propName);
      propName = lang_1.isPresent(mappedPropName) ? mappedPropName : propName;
      return new api.ElementPropertyBinding(api.PropertyBindingType.PROPERTY, ast, propName);
    } else if (parts[0] == ATTRIBUTE_PREFIX) {
      return new api.ElementPropertyBinding(api.PropertyBindingType.ATTRIBUTE, ast, parts[1]);
    } else if (parts[0] == CLASS_PREFIX) {
      return new api.ElementPropertyBinding(api.PropertyBindingType.CLASS, ast, parts[1]);
    } else if (parts[0] == STYLE_PREFIX) {
      var unit = parts.length > 2 ? parts[2] : null;
      return new api.ElementPropertyBinding(api.PropertyBindingType.STYLE, ast, parts[1], unit);
    } else {
      throw new lang_1.BaseException("Invalid property name " + propertyNameInTemplate);
    }
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/directive_parser", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/selector", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/render/dom/util"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var selector_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/selector");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/util");
  var DirectiveParser = (function() {
    function DirectiveParser(_parser, _directives) {
      this._parser = _parser;
      this._directives = _directives;
      this._selectorMatcher = new selector_1.SelectorMatcher();
      for (var i = 0; i < _directives.length; i++) {
        var directive = _directives[i];
        var selector = selector_1.CssSelector.parse(directive.selector);
        this._ensureComponentOnlyHasElementSelector(selector, directive);
        this._selectorMatcher.addSelectables(selector, i);
      }
    }
    DirectiveParser.prototype._ensureComponentOnlyHasElementSelector = function(selector, directive) {
      var isElementSelector = selector.length === 1 && selector[0].isElementSelector();
      if (!isElementSelector && directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
        throw new lang_1.BaseException("Component '" + directive.id + "' can only have an element selector, but had '" + directive.selector + "'");
      }
    };
    DirectiveParser.prototype.process = function(parent, current, control) {
      var _this = this;
      var attrs = current.attrs();
      var classList = current.classList();
      var cssSelector = new selector_1.CssSelector();
      var nodeName = dom_adapter_1.DOM.nodeName(current.element);
      cssSelector.setElement(nodeName);
      for (var i = 0; i < classList.length; i++) {
        cssSelector.addClassName(classList[i]);
      }
      collection_1.MapWrapper.forEach(attrs, function(attrValue, attrName) {
        cssSelector.addAttribute(attrName, attrValue);
      });
      var componentDirective;
      var foundDirectiveIndices = [];
      var elementBinder = null;
      this._selectorMatcher.match(cssSelector, function(selector, directiveIndex) {
        elementBinder = current.bindElement();
        var directive = _this._directives[directiveIndex];
        if (directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
          collection_1.ListWrapper.insert(foundDirectiveIndices, 0, directiveIndex);
          if (lang_1.isPresent(componentDirective)) {
            throw new lang_1.BaseException("Only one component directive is allowed per element - check " + current.elementDescription);
          }
          componentDirective = directive;
          elementBinder.setComponentId(directive.id);
        } else {
          foundDirectiveIndices.push(directiveIndex);
        }
      });
      collection_1.ListWrapper.forEach(foundDirectiveIndices, function(directiveIndex) {
        var dirMetadata = _this._directives[directiveIndex];
        var directiveBinderBuilder = elementBinder.bindDirective(directiveIndex);
        current.compileChildren = current.compileChildren && dirMetadata.compileChildren;
        if (lang_1.isPresent(dirMetadata.properties)) {
          collection_1.ListWrapper.forEach(dirMetadata.properties, function(bindConfig) {
            _this._bindDirectiveProperty(bindConfig, current, directiveBinderBuilder);
          });
        }
        if (lang_1.isPresent(dirMetadata.hostListeners)) {
          collection_1.MapWrapper.forEach(dirMetadata.hostListeners, function(action, eventName) {
            _this._bindDirectiveEvent(eventName, action, current, directiveBinderBuilder);
          });
        }
        if (lang_1.isPresent(dirMetadata.hostProperties)) {
          collection_1.MapWrapper.forEach(dirMetadata.hostProperties, function(expression, hostPropertyName) {
            _this._bindHostProperty(hostPropertyName, expression, current, directiveBinderBuilder);
          });
        }
        if (lang_1.isPresent(dirMetadata.hostAttributes)) {
          collection_1.MapWrapper.forEach(dirMetadata.hostAttributes, function(hostAttrValue, hostAttrName) {
            _this._addHostAttribute(hostAttrName, hostAttrValue, current);
          });
        }
        if (lang_1.isPresent(dirMetadata.readAttributes)) {
          collection_1.ListWrapper.forEach(dirMetadata.readAttributes, function(attrName) {
            elementBinder.readAttribute(attrName);
          });
        }
      });
    };
    DirectiveParser.prototype._bindDirectiveProperty = function(bindConfig, compileElement, directiveBinderBuilder) {
      var dirProperty;
      var elProp;
      var pipes;
      var assignIndex = bindConfig.indexOf(':');
      if (assignIndex > -1) {
        dirProperty = lang_1.StringWrapper.substring(bindConfig, 0, assignIndex).trim();
        pipes = this._splitBindConfig(lang_1.StringWrapper.substring(bindConfig, assignIndex + 1));
        elProp = collection_1.ListWrapper.removeAt(pipes, 0);
      } else {
        dirProperty = bindConfig;
        elProp = bindConfig;
        pipes = [];
      }
      elProp = util_1.dashCaseToCamelCase(elProp);
      var bindingAst = compileElement.bindElement().propertyBindings.get(elProp);
      if (lang_1.isBlank(bindingAst)) {
        var attributeValue = compileElement.attrs().get(util_1.camelCaseToDashCase(elProp));
        if (lang_1.isPresent(attributeValue)) {
          bindingAst = this._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
        }
      }
      if (lang_1.isPresent(bindingAst)) {
        directiveBinderBuilder.bindProperty(dirProperty, bindingAst, elProp);
      }
    };
    DirectiveParser.prototype._bindDirectiveEvent = function(eventName, action, compileElement, directiveBinderBuilder) {
      var ast = this._parser.parseAction(action, compileElement.elementDescription);
      if (lang_1.StringWrapper.contains(eventName, util_1.EVENT_TARGET_SEPARATOR)) {
        var parts = eventName.split(util_1.EVENT_TARGET_SEPARATOR);
        directiveBinderBuilder.bindEvent(parts[1], ast, parts[0]);
      } else {
        directiveBinderBuilder.bindEvent(eventName, ast);
      }
    };
    DirectiveParser.prototype._bindHostProperty = function(hostPropertyName, expression, compileElement, directiveBinderBuilder) {
      var ast = this._parser.parseSimpleBinding(expression, "hostProperties of " + compileElement.elementDescription);
      directiveBinderBuilder.bindHostProperty(hostPropertyName, ast);
    };
    DirectiveParser.prototype._addHostAttribute = function(attrName, attrValue, compileElement) {
      if (lang_1.StringWrapper.equals(attrName, 'class')) {
        collection_1.ListWrapper.forEach(attrValue.split(' '), function(className) {
          dom_adapter_1.DOM.addClass(compileElement.element, className);
        });
      } else if (!dom_adapter_1.DOM.hasAttribute(compileElement.element, attrName)) {
        dom_adapter_1.DOM.setAttribute(compileElement.element, attrName, attrValue);
      }
    };
    DirectiveParser.prototype._splitBindConfig = function(bindConfig) {
      return collection_1.ListWrapper.map(bindConfig.split('|'), function(s) {
        return s.trim();
      });
    };
    return DirectiveParser;
  })();
  exports.DirectiveParser = DirectiveParser;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/annotations", ["npm:angular2@2.0.0-alpha.28/src/core/annotations/annotations", "npm:angular2@2.0.0-alpha.28/src/core/annotations/decorators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/annotations/annotations"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/annotations/decorators"));
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/directives", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/directives/ng_for", "npm:angular2@2.0.0-alpha.28/src/directives/ng_if", "npm:angular2@2.0.0-alpha.28/src/directives/ng_non_bindable", "npm:angular2@2.0.0-alpha.28/src/directives/ng_switch", "npm:angular2@2.0.0-alpha.28/src/directives/class", "npm:angular2@2.0.0-alpha.28/src/directives/ng_for", "npm:angular2@2.0.0-alpha.28/src/directives/ng_if", "npm:angular2@2.0.0-alpha.28/src/directives/ng_non_bindable", "npm:angular2@2.0.0-alpha.28/src/directives/ng_switch"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var ng_for_1 = require("npm:angular2@2.0.0-alpha.28/src/directives/ng_for");
  var ng_if_1 = require("npm:angular2@2.0.0-alpha.28/src/directives/ng_if");
  var ng_non_bindable_1 = require("npm:angular2@2.0.0-alpha.28/src/directives/ng_non_bindable");
  var ng_switch_1 = require("npm:angular2@2.0.0-alpha.28/src/directives/ng_switch");
  __export(require("npm:angular2@2.0.0-alpha.28/src/directives/class"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/directives/ng_for"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/directives/ng_if"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/directives/ng_non_bindable"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/directives/ng_switch"));
  exports.coreDirectives = lang_1.CONST_EXPR([ng_for_1.NgFor, ng_if_1.NgIf, ng_non_bindable_1.NgNonBindable, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/model", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/forms/validators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/validators");
  exports.VALID = "VALID";
  exports.INVALID = "INVALID";
  function isControl(c) {
    return c instanceof AbstractControl;
  }
  exports.isControl = isControl;
  function _find(c, path) {
    if (lang_1.isBlank(path))
      return null;
    if (!(path instanceof collection_1.List)) {
      path = lang_1.StringWrapper.split(path, new RegExp("/"));
    }
    if (collection_1.ListWrapper.isEmpty(path))
      return null;
    return collection_1.ListWrapper.reduce(path, function(v, name) {
      if (v instanceof ControlGroup) {
        return lang_1.isPresent(v.controls[name]) ? v.controls[name] : null;
      } else if (v instanceof ControlArray) {
        var index = name;
        return lang_1.isPresent(v.at(index)) ? v.at(index) : null;
      } else {
        return null;
      }
    }, c);
  }
  var AbstractControl = (function() {
    function AbstractControl(validator) {
      this.validator = validator;
      this._pristine = true;
      this._touched = false;
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
      get: function() {
        return this._value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
      get: function() {
        return this._status;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
      get: function() {
        return this._status === exports.VALID;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
      get: function() {
        return this._errors;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
      get: function() {
        return this._pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
      get: function() {
        return !this.pristine;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
      get: function() {
        return this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
      get: function() {
        return !this._touched;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
      get: function() {
        return this._valueChanges;
      },
      enumerable: true,
      configurable: true
    });
    AbstractControl.prototype.markAsTouched = function() {
      this._touched = true;
    };
    AbstractControl.prototype.markAsDirty = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
      this._pristine = false;
      if (lang_1.isPresent(this._parent) && !onlySelf) {
        this._parent.markAsDirty({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.setParent = function(parent) {
      this._parent = parent;
    };
    AbstractControl.prototype.updateValidity = function(_a) {
      var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
      onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
      this._errors = this.validator(this);
      this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
      if (lang_1.isPresent(this._parent) && !onlySelf) {
        this._parent.updateValidity({onlySelf: onlySelf});
      }
    };
    AbstractControl.prototype.updateValueAndValidity = function(_a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      onlySelf = lang_1.isPresent(onlySelf) ? onlySelf : false;
      emitEvent = lang_1.isPresent(emitEvent) ? emitEvent : true;
      this._updateValue();
      if (emitEvent) {
        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
      }
      this._errors = this.validator(this);
      this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
      if (lang_1.isPresent(this._parent) && !onlySelf) {
        this._parent.updateValueAndValidity({
          onlySelf: onlySelf,
          emitEvent: emitEvent
        });
      }
    };
    AbstractControl.prototype.find = function(path) {
      return _find(this, path);
    };
    AbstractControl.prototype.getError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      var c = lang_1.isPresent(path) && !collection_1.ListWrapper.isEmpty(path) ? this.find(path) : this;
      if (lang_1.isPresent(c) && lang_1.isPresent(c._errors)) {
        return collection_1.StringMapWrapper.get(c._errors, errorCode);
      } else {
        return null;
      }
    };
    AbstractControl.prototype.hasError = function(errorCode, path) {
      if (path === void 0) {
        path = null;
      }
      return lang_1.isPresent(this.getError(errorCode, path));
    };
    AbstractControl.prototype._updateValue = function() {};
    return AbstractControl;
  })();
  exports.AbstractControl = AbstractControl;
  var Control = (function(_super) {
    __extends(Control, _super);
    function Control(value, validator) {
      if (validator === void 0) {
        validator = validators_1.Validators.nullValidator;
      }
      _super.call(this, validator);
      this._value = value;
      this.updateValidity({onlySelf: true});
      this._valueChanges = new async_1.EventEmitter();
    }
    Control.prototype.updateValue = function(value, _a) {
      var _b = _a === void 0 ? {} : _a,
          onlySelf = _b.onlySelf,
          emitEvent = _b.emitEvent;
      this._value = value;
      if (lang_1.isPresent(this._onChange))
        this._onChange(this._value);
      this.updateValueAndValidity({
        onlySelf: onlySelf,
        emitEvent: emitEvent
      });
    };
    Control.prototype.registerOnChange = function(fn) {
      this._onChange = fn;
    };
    return Control;
  })(AbstractControl);
  exports.Control = Control;
  var ControlGroup = (function(_super) {
    __extends(ControlGroup, _super);
    function ControlGroup(controls, optionals, validator) {
      if (optionals === void 0) {
        optionals = null;
      }
      if (validator === void 0) {
        validator = validators_1.Validators.group;
      }
      _super.call(this, validator);
      this.controls = controls;
      this._optionals = lang_1.isPresent(optionals) ? optionals : {};
      this._valueChanges = new async_1.EventEmitter();
      this._setParentForControls();
      this._value = this._reduceValue();
      this.updateValidity({onlySelf: true});
    }
    ControlGroup.prototype.addControl = function(name, c) {
      this.controls[name] = c;
      c.setParent(this);
    };
    ControlGroup.prototype.removeControl = function(name) {
      collection_1.StringMapWrapper.delete(this.controls, name);
    };
    ControlGroup.prototype.include = function(controlName) {
      collection_1.StringMapWrapper.set(this._optionals, controlName, true);
      this.updateValueAndValidity();
    };
    ControlGroup.prototype.exclude = function(controlName) {
      collection_1.StringMapWrapper.set(this._optionals, controlName, false);
      this.updateValueAndValidity();
    };
    ControlGroup.prototype.contains = function(controlName) {
      var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
      return c && this._included(controlName);
    };
    ControlGroup.prototype._setParentForControls = function() {
      var _this = this;
      collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
        control.setParent(_this);
      });
    };
    ControlGroup.prototype._updateValue = function() {
      this._value = this._reduceValue();
    };
    ControlGroup.prototype._reduceValue = function() {
      return this._reduceChildren({}, function(acc, control, name) {
        acc[name] = control.value;
        return acc;
      });
    };
    ControlGroup.prototype._reduceChildren = function(initValue, fn) {
      var _this = this;
      var res = initValue;
      collection_1.StringMapWrapper.forEach(this.controls, function(control, name) {
        if (_this._included(name)) {
          res = fn(res, control, name);
        }
      });
      return res;
    };
    ControlGroup.prototype._included = function(controlName) {
      var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
      return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
    };
    return ControlGroup;
  })(AbstractControl);
  exports.ControlGroup = ControlGroup;
  var ControlArray = (function(_super) {
    __extends(ControlArray, _super);
    function ControlArray(controls, validator) {
      if (validator === void 0) {
        validator = validators_1.Validators.array;
      }
      _super.call(this, validator);
      this.controls = controls;
      this._valueChanges = new async_1.EventEmitter();
      this._setParentForControls();
      this._updateValue();
      this.updateValidity({onlySelf: true});
    }
    ControlArray.prototype.at = function(index) {
      return this.controls[index];
    };
    ControlArray.prototype.push = function(control) {
      this.controls.push(control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    ControlArray.prototype.insert = function(index, control) {
      collection_1.ListWrapper.insert(this.controls, index, control);
      control.setParent(this);
      this.updateValueAndValidity();
    };
    ControlArray.prototype.removeAt = function(index) {
      collection_1.ListWrapper.removeAt(this.controls, index);
      this.updateValueAndValidity();
    };
    Object.defineProperty(ControlArray.prototype, "length", {
      get: function() {
        return this.controls.length;
      },
      enumerable: true,
      configurable: true
    });
    ControlArray.prototype._updateValue = function() {
      this._value = collection_1.ListWrapper.map(this.controls, function(c) {
        return c.value;
      });
    };
    ControlArray.prototype._setParentForControls = function() {
      var _this = this;
      collection_1.ListWrapper.forEach(this.controls, function(control) {
        control.setParent(_this);
      });
    };
    return ControlArray;
  })(AbstractControl);
  exports.ControlArray = ControlArray;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_name", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/angular2", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/forms/directives/validators", "npm:angular2@2.0.0-alpha.28/src/forms/directives/shared"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var angular2_1 = require("npm:angular2@2.0.0-alpha.28/angular2");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var control_container_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/control_container");
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/validators");
  var shared_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/shared");
  var controlNameBinding = lang_1.CONST_EXPR(new di_1.Binding(ng_control_1.NgControl, {toAlias: di_1.forwardRef(function() {
      return NgControlName;
    })}));
  var NgControlName = (function(_super) {
    __extends(NgControlName, _super);
    function NgControlName(parent, ngValidators) {
      _super.call(this);
      this.update = new async_1.EventEmitter();
      this._added = false;
      this._parent = parent;
      this.ngValidators = ngValidators;
    }
    NgControlName.prototype.onChange = function(c) {
      if (!this._added) {
        this.formDirective.addControl(this);
        this._added = true;
      }
      if (collection_1.StringMapWrapper.contains(c, "model")) {
        this.formDirective.updateModel(this, this.model);
      }
    };
    NgControlName.prototype.onDestroy = function() {
      this.formDirective.removeControl(this);
    };
    NgControlName.prototype.viewToModelUpdate = function(newValue) {
      async_1.ObservableWrapper.callNext(this.update, newValue);
    };
    Object.defineProperty(NgControlName.prototype, "path", {
      get: function() {
        return shared_1.controlPath(this.name, this._parent);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "formDirective", {
      get: function() {
        return this._parent.formDirective;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "control", {
      get: function() {
        return this.formDirective.getControl(this);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(NgControlName.prototype, "validator", {
      get: function() {
        return shared_1.composeNgValidator(this.ngValidators);
      },
      enumerable: true,
      configurable: true
    });
    NgControlName = __decorate([angular2_1.Directive({
      selector: '[ng-control]',
      hostInjector: [controlNameBinding],
      properties: ['name: ngControl', 'model: ngModel'],
      events: ['update: ngModel'],
      lifecycle: [angular2_1.onDestroy, angular2_1.onChange],
      exportAs: 'form'
    }), __param(0, angular2_1.Ancestor()), __param(1, angular2_1.Query(validators_1.NgValidator)), __metadata('design:paramtypes', [control_container_1.ControlContainer, angular2_1.QueryList])], NgControlName);
    return NgControlName;
  })(ng_control_1.NgControl);
  exports.NgControlName = NgControlName;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/static_request", ["npm:angular2@2.0.0-alpha.28/src/http/enums", "npm:angular2@2.0.0-alpha.28/src/http/headers"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var enums_1 = require("npm:angular2@2.0.0-alpha.28/src/http/enums");
  var headers_1 = require("npm:angular2@2.0.0-alpha.28/src/http/headers");
  var Request = (function() {
    function Request(url, _a) {
      var _b = _a === void 0 ? {} : _a,
          body = _b.body,
          _c = _b.method,
          method = _c === void 0 ? enums_1.RequestMethods.GET : _c,
          _d = _b.mode,
          mode = _d === void 0 ? enums_1.RequestModesOpts.Cors : _d,
          _e = _b.credentials,
          credentials = _e === void 0 ? enums_1.RequestCredentialsOpts.Omit : _e,
          _f = _b.headers,
          headers = _f === void 0 ? new headers_1.Headers() : _f;
      this.url = url;
      this._body = body;
      this.method = method;
      this.mode = mode;
      this.credentials = credentials;
      this.headers = headers;
    }
    Request.prototype.text = function() {
      return this._body ? this._body.toString() : '';
    };
    return Request;
  })();
  exports.Request = Request;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/static_response", ["npm:angular2@2.0.0-alpha.28/src/http/base_response_options", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/http/headers"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var base_response_options_1 = require("npm:angular2@2.0.0-alpha.28/src/http/base_response_options");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var headers_1 = require("npm:angular2@2.0.0-alpha.28/src/http/headers");
  var Response = (function() {
    function Response(_body, _a) {
      var _b = _a === void 0 ? base_response_options_1.baseResponseOptions : _a,
          status = _b.status,
          statusText = _b.statusText,
          headers = _b.headers,
          type = _b.type,
          url = _b.url;
      this._body = _body;
      if (lang_1.isJsObject(headers)) {
        headers = new headers_1.Headers(headers);
      }
      this.status = status;
      this.statusText = statusText;
      this.headers = headers;
      this.type = type;
      this.url = url;
    }
    Response.prototype.blob = function() {
      throw new lang_1.BaseException('"blob()" method not implemented on Response superclass');
    };
    Response.prototype.json = function() {
      if (lang_1.isJsObject(this._body)) {
        return this._body;
      } else if (lang_1.isString(this._body)) {
        return lang_1.global.JSON.parse(this._body);
      }
    };
    Response.prototype.text = function() {
      return this._body.toString();
    };
    Response.prototype.arrayBuffer = function() {
      throw new lang_1.BaseException('"arrayBuffer()" method not implemented on Response superclass');
    };
    return Response;
  })();
  exports.Response = Response;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/decorators", ["npm:angular2@2.0.0-alpha.28/src/di/annotations", "npm:angular2@2.0.0-alpha.28/src/util/decorators"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/src/di/annotations");
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/util/decorators");
  exports.Inject = decorators_1.makeParamDecorator(annotations_1.InjectAnnotation);
  exports.InjectPromise = decorators_1.makeParamDecorator(annotations_1.InjectPromiseAnnotation);
  exports.InjectLazy = decorators_1.makeParamDecorator(annotations_1.InjectLazyAnnotation);
  exports.Optional = decorators_1.makeParamDecorator(annotations_1.OptionalAnnotation);
  exports.Injectable = decorators_1.makeDecorator(annotations_1.InjectableAnnotation);
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/reflection/reflection", ["npm:angular2@2.0.0-alpha.28/src/reflection/reflector", "npm:angular2@2.0.0-alpha.28/src/reflection/reflector", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection_capabilities"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var reflector_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflector");
  var reflector_2 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflector");
  exports.Reflector = reflector_2.Reflector;
  var reflection_capabilities_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection_capabilities");
  exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/dynamic_change_detector", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/abstract_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util", "npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record", "npm:angular2@2.0.0-alpha.28/src/change_detection/exceptions"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var abstract_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/abstract_change_detector");
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record");
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/exceptions");
  var DynamicChangeDetector = (function(_super) {
    __extends(DynamicChangeDetector, _super);
    function DynamicChangeDetector(id, changeControlStrategy, dispatcher, pipeRegistry, protos, directiveRecords) {
      _super.call(this, id);
      this.changeControlStrategy = changeControlStrategy;
      this.dispatcher = dispatcher;
      this.pipeRegistry = pipeRegistry;
      this.protos = protos;
      this.directiveRecords = directiveRecords;
      this.locals = null;
      this.directives = null;
      this.alreadyChecked = false;
      this.values = collection_1.ListWrapper.createFixedSize(protos.length + 1);
      this.pipes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
      this.prevContexts = collection_1.ListWrapper.createFixedSize(protos.length + 1);
      this.changes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
      this.values[0] = null;
      collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized, 1);
      collection_1.ListWrapper.fill(this.pipes, null);
      collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
      collection_1.ListWrapper.fill(this.changes, false);
    }
    DynamicChangeDetector.prototype.hydrate = function(context, locals, directives) {
      this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeControlStrategy);
      this.values[0] = context;
      this.locals = locals;
      this.directives = directives;
      this.alreadyChecked = false;
    };
    DynamicChangeDetector.prototype.dehydrate = function() {
      this._destroyPipes();
      this.values[0] = null;
      collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized, 1);
      collection_1.ListWrapper.fill(this.changes, false);
      collection_1.ListWrapper.fill(this.pipes, null);
      collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
      this.locals = null;
    };
    DynamicChangeDetector.prototype._destroyPipes = function() {
      for (var i = 0; i < this.pipes.length; ++i) {
        if (lang_1.isPresent(this.pipes[i])) {
          this.pipes[i].onDestroy();
        }
      }
    };
    DynamicChangeDetector.prototype.hydrated = function() {
      return this.values[0] !== null;
    };
    DynamicChangeDetector.prototype.detectChangesInRecords = function(throwOnChange) {
      if (!this.hydrated()) {
        change_detection_util_1.ChangeDetectionUtil.throwDehydrated();
      }
      var protos = this.protos;
      var changes = null;
      var isChanged = false;
      for (var i = 0; i < protos.length; ++i) {
        var proto = protos[i];
        var bindingRecord = proto.bindingRecord;
        var directiveRecord = bindingRecord.directiveRecord;
        if (proto.isLifeCycleRecord()) {
          if (proto.name === "onCheck" && !throwOnChange) {
            this._getDirectiveFor(directiveRecord.directiveIndex).onCheck();
          } else if (proto.name === "onInit" && !throwOnChange && !this.alreadyChecked) {
            this._getDirectiveFor(directiveRecord.directiveIndex).onInit();
          } else if (proto.name === "onChange" && lang_1.isPresent(changes) && !throwOnChange) {
            this._getDirectiveFor(directiveRecord.directiveIndex).onChange(changes);
          }
        } else {
          var change = this._check(proto, throwOnChange);
          if (lang_1.isPresent(change)) {
            this._updateDirectiveOrElement(change, bindingRecord);
            isChanged = true;
            changes = this._addChange(bindingRecord, change, changes);
          }
        }
        if (proto.lastInDirective) {
          changes = null;
          if (isChanged && bindingRecord.isOnPushChangeDetection()) {
            this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
          }
          isChanged = false;
        }
      }
      this.alreadyChecked = true;
    };
    DynamicChangeDetector.prototype.callOnAllChangesDone = function() {
      this.dispatcher.notifyOnAllChangesDone();
      var dirs = this.directiveRecords;
      for (var i = dirs.length - 1; i >= 0; --i) {
        var dir = dirs[i];
        if (dir.callOnAllChangesDone) {
          this._getDirectiveFor(dir.directiveIndex).onAllChangesDone();
        }
      }
    };
    DynamicChangeDetector.prototype._updateDirectiveOrElement = function(change, bindingRecord) {
      if (lang_1.isBlank(bindingRecord.directiveRecord)) {
        this.dispatcher.notifyOnBinding(bindingRecord, change.currentValue);
      } else {
        var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
        bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
      }
    };
    DynamicChangeDetector.prototype._addChange = function(bindingRecord, change, changes) {
      if (bindingRecord.callOnChange()) {
        return change_detection_util_1.ChangeDetectionUtil.addChange(changes, bindingRecord.propertyName, change);
      } else {
        return changes;
      }
    };
    DynamicChangeDetector.prototype._getDirectiveFor = function(directiveIndex) {
      return this.directives.getDirectiveFor(directiveIndex);
    };
    DynamicChangeDetector.prototype._getDetectorFor = function(directiveIndex) {
      return this.directives.getDetectorFor(directiveIndex);
    };
    DynamicChangeDetector.prototype._check = function(proto, throwOnChange) {
      try {
        if (proto.isPipeRecord()) {
          return this._pipeCheck(proto, throwOnChange);
        } else {
          return this._referenceCheck(proto, throwOnChange);
        }
      } catch (e) {
        throw new exceptions_1.ChangeDetectionError(proto, e);
      }
    };
    DynamicChangeDetector.prototype._referenceCheck = function(proto, throwOnChange) {
      if (this._pureFuncAndArgsDidNotChange(proto)) {
        this._setChanged(proto, false);
        return null;
      }
      var prevValue = this._readSelf(proto);
      var currValue = this._calculateCurrValue(proto);
      if (!isSame(prevValue, currValue)) {
        if (proto.lastInBinding) {
          var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
          if (throwOnChange)
            change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
          this._writeSelf(proto, currValue);
          this._setChanged(proto, true);
          return change;
        } else {
          this._writeSelf(proto, currValue);
          this._setChanged(proto, true);
          return null;
        }
      } else {
        this._setChanged(proto, false);
        return null;
      }
    };
    DynamicChangeDetector.prototype._calculateCurrValue = function(proto) {
      switch (proto.mode) {
        case proto_record_1.RecordType.SELF:
          return this._readContext(proto);
        case proto_record_1.RecordType.CONST:
          return proto.funcOrValue;
        case proto_record_1.RecordType.PROPERTY:
          var context = this._readContext(proto);
          return proto.funcOrValue(context);
        case proto_record_1.RecordType.SAFE_PROPERTY:
          var context = this._readContext(proto);
          return lang_1.isBlank(context) ? null : proto.funcOrValue(context);
        case proto_record_1.RecordType.LOCAL:
          return this.locals.get(proto.name);
        case proto_record_1.RecordType.INVOKE_METHOD:
          var context = this._readContext(proto);
          var args = this._readArgs(proto);
          return proto.funcOrValue(context, args);
        case proto_record_1.RecordType.SAFE_INVOKE_METHOD:
          var context = this._readContext(proto);
          if (lang_1.isBlank(context)) {
            return null;
          }
          var args = this._readArgs(proto);
          return proto.funcOrValue(context, args);
        case proto_record_1.RecordType.KEYED_ACCESS:
          var arg = this._readArgs(proto)[0];
          return this._readContext(proto)[arg];
        case proto_record_1.RecordType.INVOKE_CLOSURE:
          return lang_1.FunctionWrapper.apply(this._readContext(proto), this._readArgs(proto));
        case proto_record_1.RecordType.INTERPOLATE:
        case proto_record_1.RecordType.PRIMITIVE_OP:
          return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto));
        default:
          throw new lang_1.BaseException("Unknown operation " + proto.mode);
      }
    };
    DynamicChangeDetector.prototype._pipeCheck = function(proto, throwOnChange) {
      var context = this._readContext(proto);
      var pipe = this._pipeFor(proto, context);
      var prevValue = this._readSelf(proto);
      var currValue = pipe.transform(context);
      if (!isSame(prevValue, currValue)) {
        currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
        if (proto.lastInBinding) {
          var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
          if (throwOnChange)
            change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
          this._writeSelf(proto, currValue);
          this._setChanged(proto, true);
          return change;
        } else {
          this._writeSelf(proto, currValue);
          this._setChanged(proto, true);
          return null;
        }
      } else {
        this._setChanged(proto, false);
        return null;
      }
    };
    DynamicChangeDetector.prototype._pipeFor = function(proto, context) {
      var storedPipe = this._readPipe(proto);
      if (lang_1.isPresent(storedPipe) && storedPipe.supports(context)) {
        return storedPipe;
      }
      if (lang_1.isPresent(storedPipe)) {
        storedPipe.onDestroy();
      }
      var pipe = this.pipeRegistry.get(proto.name, context, this.ref);
      this._writePipe(proto, pipe);
      return pipe;
    };
    DynamicChangeDetector.prototype._readContext = function(proto) {
      if (proto.contextIndex == -1) {
        return this._getDirectiveFor(proto.directiveIndex);
      } else {
        return this.values[proto.contextIndex];
      }
      return this.values[proto.contextIndex];
    };
    DynamicChangeDetector.prototype._readSelf = function(proto) {
      return this.values[proto.selfIndex];
    };
    DynamicChangeDetector.prototype._writeSelf = function(proto, value) {
      this.values[proto.selfIndex] = value;
    };
    DynamicChangeDetector.prototype._readPipe = function(proto) {
      return this.pipes[proto.selfIndex];
    };
    DynamicChangeDetector.prototype._writePipe = function(proto, value) {
      this.pipes[proto.selfIndex] = value;
    };
    DynamicChangeDetector.prototype._setChanged = function(proto, value) {
      this.changes[proto.selfIndex] = value;
    };
    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function(proto) {
      return proto.isPureFunction() && !this._argsChanged(proto);
    };
    DynamicChangeDetector.prototype._argsChanged = function(proto) {
      var args = proto.args;
      for (var i = 0; i < args.length; ++i) {
        if (this.changes[args[i]]) {
          return true;
        }
      }
      return false;
    };
    DynamicChangeDetector.prototype._readArgs = function(proto) {
      var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
      var args = proto.args;
      for (var i = 0; i < args.length; ++i) {
        res[i] = this.values[args[i]];
      }
      return res;
    };
    return DynamicChangeDetector;
  })(abstract_change_detector_1.AbstractChangeDetector);
  exports.DynamicChangeDetector = DynamicChangeDetector;
  function isSame(a, b) {
    if (a === b)
      return true;
    if (a instanceof String && b instanceof String && a == b)
      return true;
    if ((a !== a) && (b !== b))
      return true;
    return false;
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("github:jspm/nodelibs-process@0.1.1/index", ["npm:process@0.10.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = System._nodeRequire ? process : require("npm:process@0.10.1");
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/binding", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection", "npm:angular2@2.0.0-alpha.28/src/di/key", "npm:angular2@2.0.0-alpha.28/src/di/annotations_impl", "npm:angular2@2.0.0-alpha.28/src/di/exceptions", "npm:angular2@2.0.0-alpha.28/src/di/forward_ref"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection");
  var key_1 = require("npm:angular2@2.0.0-alpha.28/src/di/key");
  var annotations_impl_1 = require("npm:angular2@2.0.0-alpha.28/src/di/annotations_impl");
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.28/src/di/exceptions");
  var forward_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/di/forward_ref");
  var Dependency = (function() {
    function Dependency(key, asPromise, lazy, optional, properties) {
      this.key = key;
      this.asPromise = asPromise;
      this.lazy = lazy;
      this.optional = optional;
      this.properties = properties;
    }
    Dependency.fromKey = function(key) {
      return new Dependency(key, false, false, false, []);
    };
    return Dependency;
  })();
  exports.Dependency = Dependency;
  var _EMPTY_LIST = lang_1.CONST_EXPR([]);
  var Binding = (function() {
    function Binding(token, _a) {
      var toClass = _a.toClass,
          toValue = _a.toValue,
          toAlias = _a.toAlias,
          toFactory = _a.toFactory,
          toAsyncFactory = _a.toAsyncFactory,
          deps = _a.deps;
      this.token = token;
      this.toClass = toClass;
      this.toValue = toValue;
      this.toAlias = toAlias;
      this.toFactory = toFactory;
      this.toAsyncFactory = toAsyncFactory;
      this.dependencies = deps;
    }
    Binding.prototype.resolve = function() {
      var _this = this;
      var factoryFn;
      var resolvedDeps;
      var isAsync = false;
      if (lang_1.isPresent(this.toClass)) {
        var toClass = forward_ref_1.resolveForwardRef(this.toClass);
        factoryFn = reflection_1.reflector.factory(toClass);
        resolvedDeps = _dependenciesFor(toClass);
      } else if (lang_1.isPresent(this.toAlias)) {
        factoryFn = function(aliasInstance) {
          return aliasInstance;
        };
        resolvedDeps = [Dependency.fromKey(key_1.Key.get(this.toAlias))];
      } else if (lang_1.isPresent(this.toFactory)) {
        factoryFn = this.toFactory;
        resolvedDeps = _constructDependencies(this.toFactory, this.dependencies);
      } else if (lang_1.isPresent(this.toAsyncFactory)) {
        factoryFn = this.toAsyncFactory;
        resolvedDeps = _constructDependencies(this.toAsyncFactory, this.dependencies);
        isAsync = true;
      } else {
        factoryFn = function() {
          return _this.toValue;
        };
        resolvedDeps = _EMPTY_LIST;
      }
      return new ResolvedBinding(key_1.Key.get(this.token), factoryFn, resolvedDeps, isAsync);
    };
    Binding = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [Object, Object])], Binding);
    return Binding;
  })();
  exports.Binding = Binding;
  var ResolvedBinding = (function() {
    function ResolvedBinding(key, factory, dependencies, providedAsPromise) {
      this.key = key;
      this.factory = factory;
      this.dependencies = dependencies;
      this.providedAsPromise = providedAsPromise;
    }
    return ResolvedBinding;
  })();
  exports.ResolvedBinding = ResolvedBinding;
  function bind(token) {
    return new BindingBuilder(token);
  }
  exports.bind = bind;
  var BindingBuilder = (function() {
    function BindingBuilder(token) {
      this.token = token;
    }
    BindingBuilder.prototype.toClass = function(type) {
      return new Binding(this.token, {toClass: type});
    };
    BindingBuilder.prototype.toValue = function(value) {
      return new Binding(this.token, {toValue: value});
    };
    BindingBuilder.prototype.toAlias = function(aliasToken) {
      if (lang_1.isBlank(aliasToken)) {
        throw new lang_1.BaseException("Can not alias " + lang_1.stringify(this.token) + " to a blank value!");
      }
      return new Binding(this.token, {toAlias: aliasToken});
    };
    BindingBuilder.prototype.toFactory = function(factoryFunction, dependencies) {
      return new Binding(this.token, {
        toFactory: factoryFunction,
        deps: dependencies
      });
    };
    BindingBuilder.prototype.toAsyncFactory = function(factoryFunction, dependencies) {
      return new Binding(this.token, {
        toAsyncFactory: factoryFunction,
        deps: dependencies
      });
    };
    return BindingBuilder;
  })();
  exports.BindingBuilder = BindingBuilder;
  function _constructDependencies(factoryFunction, dependencies) {
    if (lang_1.isBlank(dependencies)) {
      return _dependenciesFor(factoryFunction);
    } else {
      var params = collection_1.ListWrapper.map(dependencies, function(t) {
        return [t];
      });
      return collection_1.ListWrapper.map(dependencies, function(t) {
        return _extractToken(factoryFunction, t, params);
      });
    }
  }
  function _dependenciesFor(typeOrFunc) {
    var params = reflection_1.reflector.parameters(typeOrFunc);
    if (lang_1.isBlank(params))
      return [];
    if (collection_1.ListWrapper.any(params, function(p) {
      return lang_1.isBlank(p);
    })) {
      throw new exceptions_1.NoAnnotationError(typeOrFunc, params);
    }
    return collection_1.ListWrapper.map(params, function(p) {
      return _extractToken(typeOrFunc, p, params);
    });
  }
  function _extractToken(typeOrFunc, annotations, params) {
    var depProps = [];
    var token = null;
    var optional = false;
    var lazy = false;
    var asPromise = false;
    if (!lang_1.isArray(annotations)) {
      return _createDependency(annotations, asPromise, lazy, optional, depProps);
    }
    for (var i = 0; i < annotations.length; ++i) {
      var paramAnnotation = annotations[i];
      if (paramAnnotation instanceof lang_1.Type) {
        token = paramAnnotation;
      } else if (paramAnnotation instanceof annotations_impl_1.Inject) {
        token = paramAnnotation.token;
      } else if (paramAnnotation instanceof annotations_impl_1.InjectPromise) {
        token = paramAnnotation.token;
        asPromise = true;
      } else if (paramAnnotation instanceof annotations_impl_1.InjectLazy) {
        token = paramAnnotation.token;
        lazy = true;
      } else if (paramAnnotation instanceof annotations_impl_1.Optional) {
        optional = true;
      } else if (paramAnnotation instanceof annotations_impl_1.DependencyAnnotation) {
        if (lang_1.isPresent(paramAnnotation.token)) {
          token = paramAnnotation.token;
        }
        depProps.push(paramAnnotation);
      }
    }
    token = forward_ref_1.resolveForwardRef(token);
    if (lang_1.isPresent(token)) {
      return _createDependency(token, asPromise, lazy, optional, depProps);
    } else {
      throw new exceptions_1.NoAnnotationError(typeOrFunc, params);
    }
  }
  function _createDependency(token, asPromise, lazy, optional, depProps) {
    return new Dependency(key_1.Key.get(token), asPromise, lazy, optional, depProps);
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager_utils", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/core/compiler/element_injector", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var eli = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_injector");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var viewModule = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view");
  var AppViewManagerUtils = (function() {
    function AppViewManagerUtils() {}
    AppViewManagerUtils.prototype.getComponentInstance = function(parentView, boundElementIndex) {
      var eli = parentView.elementInjectors[boundElementIndex];
      return eli.getComponent();
    };
    AppViewManagerUtils.prototype.createView = function(protoView, renderView, viewManager, renderer) {
      var view = new viewModule.AppView(renderer, protoView, protoView.protoLocals);
      view.render = renderView;
      var changeDetector = protoView.protoChangeDetector.instantiate(view);
      var binders = protoView.elementBinders;
      var elementInjectors = collection_1.ListWrapper.createFixedSize(binders.length);
      var rootElementInjectors = [];
      var preBuiltObjects = collection_1.ListWrapper.createFixedSize(binders.length);
      var componentChildViews = collection_1.ListWrapper.createFixedSize(binders.length);
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        var elementInjector = null;
        var protoElementInjector = binder.protoElementInjector;
        if (lang_1.isPresent(protoElementInjector)) {
          if (lang_1.isPresent(protoElementInjector.parent)) {
            var parentElementInjector = elementInjectors[protoElementInjector.parent.index];
            elementInjector = protoElementInjector.instantiate(parentElementInjector);
          } else {
            elementInjector = protoElementInjector.instantiate(null);
            rootElementInjectors.push(elementInjector);
          }
        }
        elementInjectors[binderIdx] = elementInjector;
        if (lang_1.isPresent(elementInjector)) {
          var embeddedProtoView = binder.hasEmbeddedProtoView() ? binder.nestedProtoView : null;
          preBuiltObjects[binderIdx] = new eli.PreBuiltObjects(viewManager, view, embeddedProtoView);
        }
      }
      view.init(changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews);
      return view;
    };
    AppViewManagerUtils.prototype.attachComponentView = function(hostView, boundElementIndex, componentView) {
      var childChangeDetector = componentView.changeDetector;
      hostView.changeDetector.addShadowDomChild(childChangeDetector);
      hostView.componentChildViews[boundElementIndex] = componentView;
    };
    AppViewManagerUtils.prototype.detachComponentView = function(hostView, boundElementIndex) {
      var componentView = hostView.componentChildViews[boundElementIndex];
      hostView.changeDetector.removeShadowDomChild(componentView.changeDetector);
      hostView.componentChildViews[boundElementIndex] = null;
    };
    AppViewManagerUtils.prototype.hydrateComponentView = function(hostView, boundElementIndex, injector) {
      if (injector === void 0) {
        injector = null;
      }
      var elementInjector = hostView.elementInjectors[boundElementIndex];
      var componentView = hostView.componentChildViews[boundElementIndex];
      var component = this.getComponentInstance(hostView, boundElementIndex);
      this._hydrateView(componentView, injector, elementInjector, component, null);
    };
    AppViewManagerUtils.prototype.hydrateRootHostView = function(hostView, injector) {
      if (injector === void 0) {
        injector = null;
      }
      this._hydrateView(hostView, injector, null, new Object(), null);
    };
    AppViewManagerUtils.prototype.attachViewInContainer = function(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view) {
      if (lang_1.isBlank(contextView)) {
        contextView = parentView;
        contextBoundElementIndex = boundElementIndex;
      }
      parentView.changeDetector.addChild(view.changeDetector);
      var viewContainer = this._getOrCreateViewContainer(parentView, boundElementIndex);
      collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
      var sibling;
      if (atIndex == 0) {
        sibling = null;
      } else {
        sibling = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootElementInjectors);
      }
      var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
      for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
        if (lang_1.isPresent(elementInjector.parent)) {
          view.rootElementInjectors[i].linkAfter(elementInjector.parent, sibling);
        } else {
          contextView.rootElementInjectors.push(view.rootElementInjectors[i]);
        }
      }
    };
    AppViewManagerUtils.prototype.detachViewInContainer = function(parentView, boundElementIndex, atIndex) {
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      view.changeDetector.remove();
      collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
      for (var i = 0; i < view.rootElementInjectors.length; ++i) {
        var inj = view.rootElementInjectors[i];
        if (lang_1.isPresent(inj.parent)) {
          inj.unlink();
        } else {
          var removeIdx = collection_1.ListWrapper.indexOf(parentView.rootElementInjectors, inj);
          collection_1.ListWrapper.removeAt(parentView.rootElementInjectors, removeIdx);
        }
      }
    };
    AppViewManagerUtils.prototype.hydrateViewInContainer = function(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, injector) {
      if (lang_1.isBlank(contextView)) {
        contextView = parentView;
        contextBoundElementIndex = boundElementIndex;
      }
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
      if (lang_1.isBlank(elementInjector.getHost()) && lang_1.isBlank(injector)) {
        injector = elementInjector.getShadowDomAppInjector();
      }
      this._hydrateView(view, injector, elementInjector.getHost(), contextView.context, contextView.locals);
    };
    AppViewManagerUtils.prototype._hydrateView = function(view, appInjector, hostElementInjector, context, parentLocals) {
      if (lang_1.isBlank(appInjector)) {
        appInjector = hostElementInjector.getShadowDomAppInjector();
      }
      if (lang_1.isBlank(appInjector)) {
        appInjector = hostElementInjector.getLightDomAppInjector();
      }
      view.context = context;
      view.locals.parent = parentLocals;
      var binders = view.proto.elementBinders;
      for (var i = 0; i < binders.length; ++i) {
        var elementInjector = view.elementInjectors[i];
        if (lang_1.isPresent(elementInjector)) {
          elementInjector.hydrate(appInjector, hostElementInjector, view.preBuiltObjects[i]);
          this._populateViewLocals(view, elementInjector);
          this._setUpEventEmitters(view, elementInjector, i);
          this._setUpHostActions(view, elementInjector, i);
        }
      }
      view.changeDetector.hydrate(view.context, view.locals, view);
    };
    AppViewManagerUtils.prototype._populateViewLocals = function(view, elementInjector) {
      if (lang_1.isPresent(elementInjector.getDirectiveVariableBindings())) {
        collection_1.MapWrapper.forEach(elementInjector.getDirectiveVariableBindings(), function(directiveIndex, name) {
          if (lang_1.isBlank(directiveIndex)) {
            view.locals.set(name, elementInjector.getElementRef().nativeElement);
          } else {
            view.locals.set(name, elementInjector.getDirectiveAtIndex(directiveIndex));
          }
        });
      }
    };
    AppViewManagerUtils.prototype._getOrCreateViewContainer = function(parentView, boundElementIndex) {
      var viewContainer = parentView.viewContainers[boundElementIndex];
      if (lang_1.isBlank(viewContainer)) {
        viewContainer = new viewModule.AppViewContainer();
        parentView.viewContainers[boundElementIndex] = viewContainer;
      }
      return viewContainer;
    };
    AppViewManagerUtils.prototype._setUpEventEmitters = function(view, elementInjector, boundElementIndex) {
      var emitters = elementInjector.getEventEmitterAccessors();
      for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
        var directiveEmitters = emitters[directiveIndex];
        var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
        for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
          var eventEmitterAccessor = directiveEmitters[eventIndex];
          eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
        }
      }
    };
    AppViewManagerUtils.prototype._setUpHostActions = function(view, elementInjector, boundElementIndex) {
      var hostActions = elementInjector.getHostActionAccessors();
      for (var directiveIndex = 0; directiveIndex < hostActions.length; ++directiveIndex) {
        var directiveHostActions = hostActions[directiveIndex];
        var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
        for (var index = 0; index < directiveHostActions.length; ++index) {
          var hostActionAccessor = directiveHostActions[index];
          hostActionAccessor.subscribe(view, boundElementIndex, directive);
        }
      }
    };
    AppViewManagerUtils.prototype.dehydrateView = function(view) {
      var binders = view.proto.elementBinders;
      for (var i = 0; i < binders.length; ++i) {
        var elementInjector = view.elementInjectors[i];
        if (lang_1.isPresent(elementInjector)) {
          elementInjector.dehydrate();
        }
      }
      if (lang_1.isPresent(view.locals)) {
        view.locals.clearValues();
      }
      view.context = null;
      view.changeDetector.dehydrate();
    };
    AppViewManagerUtils = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], AppViewManagerUtils);
    return AppViewManagerUtils;
  })();
  exports.AppViewManagerUtils = AppViewManagerUtils;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_loader", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/xhr", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_inliner", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_url_resolver"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var xhr_1 = require("npm:angular2@2.0.0-alpha.28/src/render/xhr");
  var style_inliner_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_inliner");
  var style_url_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_url_resolver");
  var ViewLoader = (function() {
    function ViewLoader(_xhr, _styleInliner, _styleUrlResolver) {
      this._xhr = _xhr;
      this._styleInliner = _styleInliner;
      this._styleUrlResolver = _styleUrlResolver;
      this._cache = new collection_1.Map();
    }
    ViewLoader.prototype.load = function(view) {
      var _this = this;
      var tplElAndStyles = [this._loadHtml(view)];
      if (lang_1.isPresent(view.styles)) {
        view.styles.forEach(function(cssText) {
          var textOrPromise = _this._resolveAndInlineCssText(cssText, view.templateAbsUrl);
          tplElAndStyles.push(textOrPromise);
        });
      }
      if (lang_1.isPresent(view.styleAbsUrls)) {
        view.styleAbsUrls.forEach(function(url) {
          var promise = _this._loadText(url).then(function(cssText) {
            return _this._resolveAndInlineCssText(cssText, view.templateAbsUrl);
          });
          tplElAndStyles.push(promise);
        });
      }
      return async_1.PromiseWrapper.all(tplElAndStyles).then(function(res) {
        var tplEl = res[0];
        var cssTexts = collection_1.ListWrapper.slice(res, 1);
        _insertCssTexts(dom_adapter_1.DOM.content(tplEl), cssTexts);
        return tplEl;
      });
    };
    ViewLoader.prototype._loadText = function(url) {
      var response = this._cache.get(url);
      if (lang_1.isBlank(response)) {
        response = async_1.PromiseWrapper.catchError(this._xhr.get(url), function(_) {
          return async_1.PromiseWrapper.reject(new lang_1.BaseException("Failed to fetch url \"" + url + "\""), null);
        });
        this._cache.set(url, response);
      }
      return response;
    };
    ViewLoader.prototype._loadHtml = function(view) {
      var _this = this;
      var html;
      if (lang_1.isPresent(view.template)) {
        html = async_1.PromiseWrapper.resolve(view.template);
      } else if (lang_1.isPresent(view.templateAbsUrl)) {
        html = this._loadText(view.templateAbsUrl);
      } else {
        throw new lang_1.BaseException('View should have either the templateUrl or template property set');
      }
      return html.then(function(html) {
        var tplEl = dom_adapter_1.DOM.createTemplate(html);
        var styleEls = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(tplEl), 'STYLE');
        var promises = [];
        for (var i = 0; i < styleEls.length; i++) {
          var promise = _this._resolveAndInlineElement(styleEls[i], view.templateAbsUrl);
          if (lang_1.isPromise(promise)) {
            promises.push(promise);
          }
        }
        return promises.length > 0 ? async_1.PromiseWrapper.all(promises).then(function(_) {
          return tplEl;
        }) : tplEl;
      });
    };
    ViewLoader.prototype._resolveAndInlineElement = function(styleEl, baseUrl) {
      var textOrPromise = this._resolveAndInlineCssText(dom_adapter_1.DOM.getText(styleEl), baseUrl);
      if (lang_1.isPromise(textOrPromise)) {
        return textOrPromise.then(function(css) {
          dom_adapter_1.DOM.setText(styleEl, css);
        });
      } else {
        dom_adapter_1.DOM.setText(styleEl, textOrPromise);
        return null;
      }
    };
    ViewLoader.prototype._resolveAndInlineCssText = function(cssText, baseUrl) {
      cssText = this._styleUrlResolver.resolveUrls(cssText, baseUrl);
      return this._styleInliner.inlineImports(cssText, baseUrl);
    };
    ViewLoader = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [xhr_1.XHR, style_inliner_1.StyleInliner, style_url_resolver_1.StyleUrlResolver])], ViewLoader);
    return ViewLoader;
  })();
  exports.ViewLoader = ViewLoader;
  function _insertCssTexts(element, cssTexts) {
    if (cssTexts.length == 0)
      return ;
    var insertBefore = dom_adapter_1.DOM.firstChild(element);
    for (var i = cssTexts.length - 1; i >= 0; i--) {
      var styleEl = dom_adapter_1.DOM.createStyleElement(cssTexts[i]);
      if (lang_1.isPresent(insertBefore)) {
        dom_adapter_1.DOM.insertBefore(insertBefore, styleEl);
      } else {
        dom_adapter_1.DOM.appendChild(element, styleEl);
      }
      insertBefore = styleEl;
    }
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/emulated_unscoped_shadow_dom_strategy", ["npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/light_dom", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/util"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var light_dom_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/light_dom");
  var shadow_dom_strategy_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/util");
  var EmulatedUnscopedShadowDomStrategy = (function(_super) {
    __extends(EmulatedUnscopedShadowDomStrategy, _super);
    function EmulatedUnscopedShadowDomStrategy(styleHost) {
      _super.call(this);
      this.styleHost = styleHost;
    }
    EmulatedUnscopedShadowDomStrategy.prototype.hasNativeContentElement = function() {
      return false;
    };
    EmulatedUnscopedShadowDomStrategy.prototype.prepareShadowRoot = function(el) {
      return el;
    };
    EmulatedUnscopedShadowDomStrategy.prototype.constructLightDom = function(lightDomView, el) {
      return new light_dom_1.LightDom(lightDomView, el);
    };
    EmulatedUnscopedShadowDomStrategy.prototype.processStyleElement = function(hostComponentId, templateUrl, styleEl) {
      var cssText = dom_adapter_1.DOM.getText(styleEl);
      util_1.insertSharedStyleText(cssText, this.styleHost, styleEl);
    };
    return EmulatedUnscopedShadowDomStrategy;
  })(shadow_dom_strategy_1.ShadowDomStrategy);
  exports.EmulatedUnscopedShadowDomStrategy = EmulatedUnscopedShadowDomStrategy;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/dom_renderer", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/content_tag", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy", "npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager", "npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view", "npm:angular2@2.0.0-alpha.28/src/render/dom/view/view", "npm:angular2@2.0.0-alpha.28/src/render/dom/view/element", "npm:angular2@2.0.0-alpha.28/src/render/dom/view/view_container", "npm:angular2@2.0.0-alpha.28/src/render/dom/util", "npm:angular2@2.0.0-alpha.28/src/render/api"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var content_tag_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/content_tag");
  var shadow_dom_strategy_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy");
  var event_manager_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager");
  var proto_view_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view");
  var view_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/view/view");
  var element_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/view/element");
  var view_container_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/view/view_container");
  var util_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/util");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  exports.DOCUMENT_TOKEN = lang_1.CONST_EXPR(new di_1.OpaqueToken('DocumentToken'));
  var DomRenderer = (function(_super) {
    __extends(DomRenderer, _super);
    function DomRenderer(_eventManager, _shadowDomStrategy, document) {
      _super.call(this);
      this._eventManager = _eventManager;
      this._shadowDomStrategy = _shadowDomStrategy;
      this._document = document;
    }
    DomRenderer.prototype.createRootHostView = function(hostProtoViewRef, hostElementSelector) {
      var hostProtoView = proto_view_1.resolveInternalDomProtoView(hostProtoViewRef);
      var element = dom_adapter_1.DOM.querySelector(this._document, hostElementSelector);
      if (lang_1.isBlank(element)) {
        throw new lang_1.BaseException("The selector \"" + hostElementSelector + "\" did not match any elements");
      }
      return new view_1.DomViewRef(this._createView(hostProtoView, element));
    };
    DomRenderer.prototype.createView = function(protoViewRef) {
      var protoView = proto_view_1.resolveInternalDomProtoView(protoViewRef);
      return new view_1.DomViewRef(this._createView(protoView, null));
    };
    DomRenderer.prototype.destroyView = function(view) {};
    DomRenderer.prototype.getNativeElementSync = function(location) {
      return view_1.resolveInternalDomView(location.renderView).boundElements[location.boundElementIndex].element;
    };
    DomRenderer.prototype.attachComponentView = function(location, componentViewRef) {
      var hostView = view_1.resolveInternalDomView(location.renderView);
      var componentView = view_1.resolveInternalDomView(componentViewRef);
      var element = hostView.boundElements[location.boundElementIndex].element;
      var lightDom = hostView.boundElements[location.boundElementIndex].lightDom;
      if (lang_1.isPresent(lightDom)) {
        lightDom.attachShadowDomView(componentView);
      }
      var shadowRoot = this._shadowDomStrategy.prepareShadowRoot(element);
      this._moveViewNodesIntoParent(shadowRoot, componentView);
      componentView.hostLightDom = lightDom;
      componentView.shadowRoot = shadowRoot;
    };
    DomRenderer.prototype.setComponentViewRootNodes = function(componentViewRef, rootNodes) {
      var componentView = view_1.resolveInternalDomView(componentViewRef);
      this._removeViewNodes(componentView);
      componentView.rootNodes = rootNodes;
      this._moveViewNodesIntoParent(componentView.shadowRoot, componentView);
    };
    DomRenderer.prototype.getRootNodes = function(viewRef) {
      return view_1.resolveInternalDomView(viewRef).rootNodes;
    };
    DomRenderer.prototype.detachComponentView = function(location, componentViewRef) {
      var hostView = view_1.resolveInternalDomView(location.renderView);
      var componentView = view_1.resolveInternalDomView(componentViewRef);
      this._removeViewNodes(componentView);
      var lightDom = hostView.boundElements[location.boundElementIndex].lightDom;
      if (lang_1.isPresent(lightDom)) {
        lightDom.detachShadowDomView();
      }
      componentView.hostLightDom = null;
      componentView.shadowRoot = null;
    };
    DomRenderer.prototype.attachViewInContainer = function(location, atIndex, viewRef) {
      var parentView = view_1.resolveInternalDomView(location.renderView);
      var view = view_1.resolveInternalDomView(viewRef);
      var viewContainer = this._getOrCreateViewContainer(parentView, location.boundElementIndex);
      collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
      view.hostLightDom = parentView.hostLightDom;
      var directParentLightDom = this._directParentLightDom(parentView, location.boundElementIndex);
      if (lang_1.isBlank(directParentLightDom)) {
        var siblingToInsertAfter;
        if (atIndex == 0) {
          siblingToInsertAfter = parentView.boundElements[location.boundElementIndex].element;
        } else {
          siblingToInsertAfter = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootNodes);
        }
        this._moveViewNodesAfterSibling(siblingToInsertAfter, view);
      } else {
        directParentLightDom.redistribute();
      }
      if (lang_1.isPresent(parentView.hostLightDom)) {
        parentView.hostLightDom.redistribute();
      }
    };
    DomRenderer.prototype.detachViewInContainer = function(location, atIndex, viewRef) {
      var parentView = view_1.resolveInternalDomView(location.renderView);
      var view = view_1.resolveInternalDomView(viewRef);
      var viewContainer = parentView.boundElements[location.boundElementIndex].viewContainer;
      var detachedView = viewContainer.views[atIndex];
      collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
      var directParentLightDom = this._directParentLightDom(parentView, location.boundElementIndex);
      if (lang_1.isBlank(directParentLightDom)) {
        this._removeViewNodes(detachedView);
      } else {
        directParentLightDom.redistribute();
      }
      view.hostLightDom = null;
      if (lang_1.isPresent(parentView.hostLightDom)) {
        parentView.hostLightDom.redistribute();
      }
    };
    DomRenderer.prototype.hydrateView = function(viewRef) {
      var view = view_1.resolveInternalDomView(viewRef);
      if (view.hydrated)
        throw new lang_1.BaseException('The view is already hydrated.');
      view.hydrated = true;
      for (var i = 0; i < view.boundElements.length; ++i) {
        var lightDom = view.boundElements[i].lightDom;
        if (lang_1.isPresent(lightDom)) {
          lightDom.redistribute();
        }
      }
      view.eventHandlerRemovers = [];
      var binders = view.proto.elementBinders;
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        if (lang_1.isPresent(binder.globalEvents)) {
          for (var i = 0; i < binder.globalEvents.length; i++) {
            var globalEvent = binder.globalEvents[i];
            var remover = this._createGlobalEventListener(view, binderIdx, globalEvent.name, globalEvent.target, globalEvent.fullName);
            view.eventHandlerRemovers.push(remover);
          }
        }
      }
      if (lang_1.isPresent(view.hostLightDom)) {
        view.hostLightDom.redistribute();
      }
    };
    DomRenderer.prototype.dehydrateView = function(viewRef) {
      var view = view_1.resolveInternalDomView(viewRef);
      for (var i = 0; i < view.eventHandlerRemovers.length; i++) {
        view.eventHandlerRemovers[i]();
      }
      view.eventHandlerRemovers = null;
      view.hydrated = false;
    };
    DomRenderer.prototype.setElementProperty = function(location, propertyName, propertyValue) {
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementProperty(location.boundElementIndex, propertyName, propertyValue);
    };
    DomRenderer.prototype.setElementAttribute = function(location, attributeName, attributeValue) {
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementAttribute(location.boundElementIndex, attributeName, attributeValue);
    };
    DomRenderer.prototype.setElementClass = function(location, className, isAdd) {
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementClass(location.boundElementIndex, className, isAdd);
    };
    DomRenderer.prototype.setElementStyle = function(location, styleName, styleValue) {
      var view = view_1.resolveInternalDomView(location.renderView);
      view.setElementStyle(location.boundElementIndex, styleName, styleValue);
    };
    DomRenderer.prototype.invokeElementMethod = function(location, methodName, args) {
      var view = view_1.resolveInternalDomView(location.renderView);
      view.invokeElementMethod(location.boundElementIndex, methodName, args);
    };
    DomRenderer.prototype.setText = function(viewRef, textNodeIndex, text) {
      var view = view_1.resolveInternalDomView(viewRef);
      dom_adapter_1.DOM.setText(view.boundTextNodes[textNodeIndex], text);
    };
    DomRenderer.prototype.setEventDispatcher = function(viewRef, dispatcher) {
      var view = view_1.resolveInternalDomView(viewRef);
      view.eventDispatcher = dispatcher;
    };
    DomRenderer.prototype._createView = function(protoView, inplaceElement) {
      var rootElementClone;
      var elementsWithBindingsDynamic;
      var viewRootNodes;
      if (lang_1.isPresent(inplaceElement)) {
        rootElementClone = inplaceElement;
        elementsWithBindingsDynamic = [];
        viewRootNodes = [inplaceElement];
      } else if (protoView.isTemplateElement) {
        rootElementClone = dom_adapter_1.DOM.importIntoDoc(dom_adapter_1.DOM.content(protoView.element));
        elementsWithBindingsDynamic = dom_adapter_1.DOM.querySelectorAll(rootElementClone, util_1.NG_BINDING_CLASS_SELECTOR);
        viewRootNodes = collection_1.ListWrapper.createFixedSize(protoView.rootNodeCount);
        var childNode = dom_adapter_1.DOM.firstChild(rootElementClone);
        for (var i = 0; i < protoView.rootNodeCount; i++, childNode = dom_adapter_1.DOM.nextSibling(childNode)) {
          viewRootNodes[i] = childNode;
        }
      } else {
        rootElementClone = dom_adapter_1.DOM.importIntoDoc(protoView.element);
        elementsWithBindingsDynamic = dom_adapter_1.DOM.getElementsByClassName(rootElementClone, util_1.NG_BINDING_CLASS);
        viewRootNodes = [rootElementClone];
      }
      var binders = protoView.elementBinders;
      var boundTextNodes = collection_1.ListWrapper.createFixedSize(protoView.boundTextNodeCount);
      var boundElements = collection_1.ListWrapper.createFixedSize(binders.length);
      var boundTextNodeIdx = 0;
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        var element;
        var childNodes;
        if (binderIdx === 0 && protoView.rootBindingOffset === 1) {
          element = protoView.isTemplateElement ? null : rootElementClone;
          childNodes = dom_adapter_1.DOM.childNodes(rootElementClone);
        } else {
          element = elementsWithBindingsDynamic[binderIdx - protoView.rootBindingOffset];
          childNodes = dom_adapter_1.DOM.childNodes(element);
        }
        var textNodeIndices = binder.textNodeIndices;
        for (var i = 0; i < textNodeIndices.length; i++) {
          boundTextNodes[boundTextNodeIdx++] = childNodes[textNodeIndices[i]];
        }
        var contentTag = null;
        if (lang_1.isPresent(binder.contentTagSelector)) {
          contentTag = new content_tag_1.Content(element, binder.contentTagSelector);
        }
        boundElements[binderIdx] = new element_1.DomElement(binder, element, contentTag);
      }
      var view = new view_1.DomView(protoView, viewRootNodes, boundTextNodes, boundElements);
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        var element = boundElements[binderIdx];
        var domEl = element.element;
        var lightDom = null;
        if (lang_1.isPresent(binder.componentId) && (!binder.elementIsEmpty || lang_1.isPresent(inplaceElement))) {
          lightDom = this._shadowDomStrategy.constructLightDom(view, domEl);
        }
        element.lightDom = lightDom;
        var contentTag = element.contentTag;
        if (lang_1.isPresent(contentTag)) {
          var directParentLightDom = this._directParentLightDom(view, binderIdx);
          contentTag.init(directParentLightDom);
        }
        if (lang_1.isPresent(binder.eventLocals) && lang_1.isPresent(binder.localEvents)) {
          for (var i = 0; i < binder.localEvents.length; i++) {
            this._createEventListener(view, domEl, binderIdx, binder.localEvents[i].name, binder.eventLocals);
          }
        }
      }
      return view;
    };
    DomRenderer.prototype._createEventListener = function(view, element, elementIndex, eventName, eventLocals) {
      this._eventManager.addEventListener(element, eventName, function(event) {
        view.dispatchEvent(elementIndex, eventName, event);
      });
    };
    DomRenderer.prototype._moveViewNodesAfterSibling = function(sibling, view) {
      for (var i = view.rootNodes.length - 1; i >= 0; --i) {
        dom_adapter_1.DOM.insertAfter(sibling, view.rootNodes[i]);
      }
    };
    DomRenderer.prototype._moveViewNodesIntoParent = function(parent, view) {
      for (var i = 0; i < view.rootNodes.length; ++i) {
        dom_adapter_1.DOM.appendChild(parent, view.rootNodes[i]);
      }
    };
    DomRenderer.prototype._removeViewNodes = function(view) {
      var len = view.rootNodes.length;
      if (len == 0)
        return ;
      var parent = view.rootNodes[0].parentNode;
      for (var i = len - 1; i >= 0; --i) {
        dom_adapter_1.DOM.removeChild(parent, view.rootNodes[i]);
      }
    };
    DomRenderer.prototype._getOrCreateViewContainer = function(parentView, boundElementIndex) {
      var el = parentView.boundElements[boundElementIndex];
      var vc = el.viewContainer;
      if (lang_1.isBlank(vc)) {
        vc = new view_container_1.DomViewContainer();
        el.viewContainer = vc;
      }
      return vc;
    };
    DomRenderer.prototype._directParentLightDom = function(view, boundElementIndex) {
      var directParentEl = view.getDirectParentElement(boundElementIndex);
      return lang_1.isPresent(directParentEl) ? directParentEl.lightDom : null;
    };
    DomRenderer.prototype._createGlobalEventListener = function(view, elementIndex, eventName, eventTarget, fullName) {
      return this._eventManager.addGlobalEventListener(eventTarget, eventName, function(event) {
        view.dispatchEvent(elementIndex, fullName, event);
      });
    };
    DomRenderer = __decorate([di_1.Injectable(), __param(2, di_1.Inject(exports.DOCUMENT_TOKEN)), __metadata('design:paramtypes', [event_manager_1.EventManager, shadow_dom_strategy_1.ShadowDomStrategy, Object])], DomRenderer);
    return DomRenderer;
  })(api_1.Renderer);
  exports.DomRenderer = DomRenderer;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_pipeline", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_element", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_control", "npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view_builder", "npm:angular2@2.0.0-alpha.28/src/render/api"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var compile_element_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_element");
  var compile_control_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_control");
  var proto_view_builder_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/view/proto_view_builder");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var CompilePipeline = (function() {
    function CompilePipeline(steps) {
      this._control = new compile_control_1.CompileControl(steps);
    }
    CompilePipeline.prototype.process = function(rootElement, protoViewType, compilationCtxtDescription) {
      if (protoViewType === void 0) {
        protoViewType = null;
      }
      if (compilationCtxtDescription === void 0) {
        compilationCtxtDescription = '';
      }
      if (lang_1.isBlank(protoViewType)) {
        protoViewType = api_1.ViewType.COMPONENT;
      }
      var results = [];
      var rootCompileElement = new compile_element_1.CompileElement(rootElement, compilationCtxtDescription);
      rootCompileElement.inheritedProtoView = new proto_view_builder_1.ProtoViewBuilder(rootElement, protoViewType);
      rootCompileElement.isViewRoot = true;
      this._process(results, null, rootCompileElement, compilationCtxtDescription);
      return results;
    };
    CompilePipeline.prototype._process = function(results, parent, current, compilationCtxtDescription) {
      if (compilationCtxtDescription === void 0) {
        compilationCtxtDescription = '';
      }
      var additionalChildren = this._control.internalProcess(results, 0, parent, current);
      if (current.compileChildren) {
        var node = dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.templateAwareRoot(current.element));
        while (lang_1.isPresent(node)) {
          var nextNode = dom_adapter_1.DOM.nextSibling(node);
          if (dom_adapter_1.DOM.isElementNode(node)) {
            var childCompileElement = new compile_element_1.CompileElement(node, compilationCtxtDescription);
            childCompileElement.inheritedProtoView = current.inheritedProtoView;
            childCompileElement.inheritedElementBinder = current.inheritedElementBinder;
            childCompileElement.distanceToInheritedBinder = current.distanceToInheritedBinder + 1;
            this._process(results, current, childCompileElement);
          }
          node = nextNode;
        }
      }
      if (lang_1.isPresent(additionalChildren)) {
        for (var i = 0; i < additionalChildren.length; i++) {
          this._process(results, current, additionalChildren[i]);
        }
      }
    };
    return CompilePipeline;
  })();
  exports.CompilePipeline = CompilePipeline;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_step_factory", ["npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/property_binding_parser", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/text_interpolation_parser", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/directive_parser", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_splitter", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_compile_step"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var property_binding_parser_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/property_binding_parser");
  var text_interpolation_parser_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/text_interpolation_parser");
  var directive_parser_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/directive_parser");
  var view_splitter_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_splitter");
  var shadow_dom_compile_step_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_compile_step");
  var CompileStepFactory = (function() {
    function CompileStepFactory() {}
    CompileStepFactory.prototype.createSteps = function(view) {
      return null;
    };
    return CompileStepFactory;
  })();
  exports.CompileStepFactory = CompileStepFactory;
  var DefaultStepFactory = (function(_super) {
    __extends(DefaultStepFactory, _super);
    function DefaultStepFactory(_parser, _shadowDomStrategy) {
      _super.call(this);
      this._parser = _parser;
      this._shadowDomStrategy = _shadowDomStrategy;
    }
    DefaultStepFactory.prototype.createSteps = function(view) {
      return [new view_splitter_1.ViewSplitter(this._parser), new property_binding_parser_1.PropertyBindingParser(this._parser), new directive_parser_1.DirectiveParser(this._parser, view.directives), new text_interpolation_parser_1.TextInterpolationParser(this._parser), new shadow_dom_compile_step_1.ShadowDomCompileStep(this._shadowDomStrategy, view)];
    };
    return DefaultStepFactory;
  })(CompileStepFactory);
  exports.DefaultStepFactory = DefaultStepFactory;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/forms", ["npm:angular2@2.0.0-alpha.28/src/forms/model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_name", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_control", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_group", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_model", "npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form", "npm:angular2@2.0.0-alpha.28/src/forms/directives/default_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/checkbox_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives/select_control_value_accessor", "npm:angular2@2.0.0-alpha.28/src/forms/directives", "npm:angular2@2.0.0-alpha.28/src/forms/validators", "npm:angular2@2.0.0-alpha.28/src/forms/directives/validators", "npm:angular2@2.0.0-alpha.28/src/forms/form_builder", "npm:angular2@2.0.0-alpha.28/src/forms/form_builder", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var model_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/model");
  exports.AbstractControl = model_1.AbstractControl;
  exports.Control = model_1.Control;
  exports.ControlGroup = model_1.ControlGroup;
  exports.ControlArray = model_1.ControlArray;
  var ng_control_name_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_name");
  exports.NgControlName = ng_control_name_1.NgControlName;
  var ng_form_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_control");
  exports.NgFormControl = ng_form_control_1.NgFormControl;
  var ng_model_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_model");
  exports.NgModel = ng_model_1.NgModel;
  var ng_control_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control");
  exports.NgControl = ng_control_1.NgControl;
  var ng_control_group_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_control_group");
  exports.NgControlGroup = ng_control_group_1.NgControlGroup;
  var ng_form_model_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form_model");
  exports.NgFormModel = ng_form_model_1.NgFormModel;
  var ng_form_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/ng_form");
  exports.NgForm = ng_form_1.NgForm;
  var default_value_accessor_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/default_value_accessor");
  exports.DefaultValueAccessor = default_value_accessor_1.DefaultValueAccessor;
  var checkbox_value_accessor_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/checkbox_value_accessor");
  exports.CheckboxControlValueAccessor = checkbox_value_accessor_1.CheckboxControlValueAccessor;
  var select_control_value_accessor_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/select_control_value_accessor");
  exports.SelectControlValueAccessor = select_control_value_accessor_1.SelectControlValueAccessor;
  var directives_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives");
  exports.formDirectives = directives_1.formDirectives;
  var validators_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/validators");
  exports.Validators = validators_1.Validators;
  var validators_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/directives/validators");
  exports.NgValidator = validators_2.NgValidator;
  exports.NgRequiredValidator = validators_2.NgRequiredValidator;
  var form_builder_1 = require("npm:angular2@2.0.0-alpha.28/src/forms/form_builder");
  exports.FormBuilder = form_builder_1.FormBuilder;
  var form_builder_2 = require("npm:angular2@2.0.0-alpha.28/src/forms/form_builder");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  exports.formInjectables = lang_1.CONST_EXPR([form_builder_2.FormBuilder]);
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/backends/xhr_backend", ["npm:angular2@2.0.0-alpha.28/src/http/enums", "npm:angular2@2.0.0-alpha.28/src/http/static_response", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/http/backends/browser_xhr", "npm:rx@2.5.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var enums_1 = require("npm:angular2@2.0.0-alpha.28/src/http/enums");
  var static_response_1 = require("npm:angular2@2.0.0-alpha.28/src/http/static_response");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var browser_xhr_1 = require("npm:angular2@2.0.0-alpha.28/src/http/backends/browser_xhr");
  var Rx = require("npm:rx@2.5.1");
  var XHRConnection = (function() {
    function XHRConnection(req, NativeConstruct) {
      var _this = this;
      this.request = req;
      if (Rx.hasOwnProperty('default')) {
        this.response = new Rx.default.Rx.Subject();
      } else {
        this.response = new Rx.Subject();
      }
      this._xhr = new NativeConstruct();
      this._xhr.open(enums_1.RequestMethods[req.method], req.url);
      this._xhr.addEventListener('load', function() {
        _this.response.onNext(new static_response_1.Response(_this._xhr.response || _this._xhr.responseText));
      });
      this._xhr.send(this.request.text());
    }
    XHRConnection.prototype.dispose = function() {
      this._xhr.abort();
    };
    return XHRConnection;
  })();
  exports.XHRConnection = XHRConnection;
  var XHRBackend = (function() {
    function XHRBackend(_NativeConstruct) {
      this._NativeConstruct = _NativeConstruct;
    }
    XHRBackend.prototype.createConnection = function(request) {
      return new XHRConnection(request, this._NativeConstruct);
    };
    XHRBackend = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [browser_xhr_1.BrowserXHR])], XHRBackend);
    return XHRBackend;
  })();
  exports.XHRBackend = XHRBackend;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/lexer", ["npm:angular2@2.0.0-alpha.28/src/di/decorators", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/di/decorators");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var TokenType;
  (function(TokenType) {
    TokenType[TokenType["CHARACTER"] = 0] = "CHARACTER";
    TokenType[TokenType["IDENTIFIER"] = 1] = "IDENTIFIER";
    TokenType[TokenType["KEYWORD"] = 2] = "KEYWORD";
    TokenType[TokenType["STRING"] = 3] = "STRING";
    TokenType[TokenType["OPERATOR"] = 4] = "OPERATOR";
    TokenType[TokenType["NUMBER"] = 5] = "NUMBER";
  })(TokenType || (TokenType = {}));
  var Lexer = (function() {
    function Lexer() {}
    Lexer.prototype.tokenize = function(text) {
      var scanner = new _Scanner(text);
      var tokens = [];
      var token = scanner.scanToken();
      while (token != null) {
        tokens.push(token);
        token = scanner.scanToken();
      }
      return tokens;
    };
    Lexer = __decorate([decorators_1.Injectable(), __metadata('design:paramtypes', [])], Lexer);
    return Lexer;
  })();
  exports.Lexer = Lexer;
  var Token = (function() {
    function Token(index, type, numValue, strValue) {
      this.index = index;
      this.type = type;
      this.numValue = numValue;
      this.strValue = strValue;
    }
    Token.prototype.isCharacter = function(code) {
      return (this.type == TokenType.CHARACTER && this.numValue == code);
    };
    Token.prototype.isNumber = function() {
      return (this.type == TokenType.NUMBER);
    };
    Token.prototype.isString = function() {
      return (this.type == TokenType.STRING);
    };
    Token.prototype.isOperator = function(operater) {
      return (this.type == TokenType.OPERATOR && this.strValue == operater);
    };
    Token.prototype.isIdentifier = function() {
      return (this.type == TokenType.IDENTIFIER);
    };
    Token.prototype.isKeyword = function() {
      return (this.type == TokenType.KEYWORD);
    };
    Token.prototype.isKeywordVar = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "var");
    };
    Token.prototype.isKeywordNull = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "null");
    };
    Token.prototype.isKeywordUndefined = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "undefined");
    };
    Token.prototype.isKeywordTrue = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "true");
    };
    Token.prototype.isKeywordIf = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "if");
    };
    Token.prototype.isKeywordElse = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "else");
    };
    Token.prototype.isKeywordFalse = function() {
      return (this.type == TokenType.KEYWORD && this.strValue == "false");
    };
    Token.prototype.toNumber = function() {
      return (this.type == TokenType.NUMBER) ? this.numValue : -1;
    };
    Token.prototype.toString = function() {
      switch (this.type) {
        case TokenType.CHARACTER:
        case TokenType.STRING:
        case TokenType.IDENTIFIER:
        case TokenType.KEYWORD:
          return this.strValue;
        case TokenType.NUMBER:
          return this.numValue.toString();
        default:
          return null;
      }
    };
    return Token;
  })();
  exports.Token = Token;
  function newCharacterToken(index, code) {
    return new Token(index, TokenType.CHARACTER, code, lang_1.StringWrapper.fromCharCode(code));
  }
  function newIdentifierToken(index, text) {
    return new Token(index, TokenType.IDENTIFIER, 0, text);
  }
  function newKeywordToken(index, text) {
    return new Token(index, TokenType.KEYWORD, 0, text);
  }
  function newOperatorToken(index, text) {
    return new Token(index, TokenType.OPERATOR, 0, text);
  }
  function newStringToken(index, text) {
    return new Token(index, TokenType.STRING, 0, text);
  }
  function newNumberToken(index, n) {
    return new Token(index, TokenType.NUMBER, n, "");
  }
  exports.EOF = new Token(-1, TokenType.CHARACTER, 0, "");
  exports.$EOF = 0;
  exports.$TAB = 9;
  exports.$LF = 10;
  exports.$VTAB = 11;
  exports.$FF = 12;
  exports.$CR = 13;
  exports.$SPACE = 32;
  exports.$BANG = 33;
  exports.$DQ = 34;
  exports.$HASH = 35;
  exports.$$ = 36;
  exports.$PERCENT = 37;
  exports.$AMPERSAND = 38;
  exports.$SQ = 39;
  exports.$LPAREN = 40;
  exports.$RPAREN = 41;
  exports.$STAR = 42;
  exports.$PLUS = 43;
  exports.$COMMA = 44;
  exports.$MINUS = 45;
  exports.$PERIOD = 46;
  exports.$SLASH = 47;
  exports.$COLON = 58;
  exports.$SEMICOLON = 59;
  exports.$LT = 60;
  exports.$EQ = 61;
  exports.$GT = 62;
  exports.$QUESTION = 63;
  var $0 = 48;
  var $9 = 57;
  var $A = 65,
      $E = 69,
      $Z = 90;
  exports.$LBRACKET = 91;
  exports.$BACKSLASH = 92;
  exports.$RBRACKET = 93;
  var $CARET = 94;
  var $_ = 95;
  var $a = 97,
      $e = 101,
      $f = 102,
      $n = 110,
      $r = 114,
      $t = 116,
      $u = 117,
      $v = 118,
      $z = 122;
  exports.$LBRACE = 123;
  exports.$BAR = 124;
  exports.$RBRACE = 125;
  var $NBSP = 160;
  var ScannerError = (function(_super) {
    __extends(ScannerError, _super);
    function ScannerError(message) {
      _super.call(this);
      this.message = message;
    }
    ScannerError.prototype.toString = function() {
      return this.message;
    };
    return ScannerError;
  })(lang_1.BaseException);
  exports.ScannerError = ScannerError;
  var _Scanner = (function() {
    function _Scanner(input) {
      this.input = input;
      this.peek = 0;
      this.index = -1;
      this.length = input.length;
      this.advance();
    }
    _Scanner.prototype.advance = function() {
      this.peek = ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
    };
    _Scanner.prototype.scanToken = function() {
      var input = this.input,
          length = this.length,
          peek = this.peek,
          index = this.index;
      while (peek <= exports.$SPACE) {
        if (++index >= length) {
          peek = exports.$EOF;
          break;
        } else {
          peek = lang_1.StringWrapper.charCodeAt(input, index);
        }
      }
      this.peek = peek;
      this.index = index;
      if (index >= length) {
        return null;
      }
      if (isIdentifierStart(peek))
        return this.scanIdentifier();
      if (isDigit(peek))
        return this.scanNumber(index);
      var start = index;
      switch (peek) {
        case exports.$PERIOD:
          this.advance();
          return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
        case exports.$LPAREN:
        case exports.$RPAREN:
        case exports.$LBRACE:
        case exports.$RBRACE:
        case exports.$LBRACKET:
        case exports.$RBRACKET:
        case exports.$COMMA:
        case exports.$COLON:
        case exports.$SEMICOLON:
          return this.scanCharacter(start, peek);
        case exports.$SQ:
        case exports.$DQ:
          return this.scanString();
        case exports.$HASH:
        case exports.$PLUS:
        case exports.$MINUS:
        case exports.$STAR:
        case exports.$SLASH:
        case exports.$PERCENT:
        case $CARET:
          return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
        case exports.$QUESTION:
          return this.scanComplexOperator(start, '?', exports.$PERIOD, '.');
        case exports.$LT:
        case exports.$GT:
          return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=');
        case exports.$BANG:
        case exports.$EQ:
          return this.scanComplexOperator(start, lang_1.StringWrapper.fromCharCode(peek), exports.$EQ, '=', exports.$EQ, '=');
        case exports.$AMPERSAND:
          return this.scanComplexOperator(start, '&', exports.$AMPERSAND, '&');
        case exports.$BAR:
          return this.scanComplexOperator(start, '|', exports.$BAR, '|');
        case $NBSP:
          while (isWhitespace(this.peek))
            this.advance();
          return this.scanToken();
      }
      this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
      return null;
    };
    _Scanner.prototype.scanCharacter = function(start, code) {
      assert(this.peek == code);
      this.advance();
      return newCharacterToken(start, code);
    };
    _Scanner.prototype.scanOperator = function(start, str) {
      assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
      assert(collection_1.SetWrapper.has(OPERATORS, str));
      this.advance();
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanComplexOperator = function(start, one, twoCode, two, threeCode, three) {
      assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
      this.advance();
      var str = one;
      if (this.peek == twoCode) {
        this.advance();
        str += two;
      }
      if (lang_1.isPresent(threeCode) && this.peek == threeCode) {
        this.advance();
        str += three;
      }
      assert(collection_1.SetWrapper.has(OPERATORS, str));
      return newOperatorToken(start, str);
    };
    _Scanner.prototype.scanIdentifier = function() {
      assert(isIdentifierStart(this.peek));
      var start = this.index;
      this.advance();
      while (isIdentifierPart(this.peek))
        this.advance();
      var str = this.input.substring(start, this.index);
      if (collection_1.SetWrapper.has(KEYWORDS, str)) {
        return newKeywordToken(start, str);
      } else {
        return newIdentifierToken(start, str);
      }
    };
    _Scanner.prototype.scanNumber = function(start) {
      assert(isDigit(this.peek));
      var simple = (this.index === start);
      this.advance();
      while (true) {
        if (isDigit(this.peek)) {} else if (this.peek == exports.$PERIOD) {
          simple = false;
        } else if (isExponentStart(this.peek)) {
          this.advance();
          if (isExponentSign(this.peek))
            this.advance();
          if (!isDigit(this.peek))
            this.error('Invalid exponent', -1);
          simple = false;
        } else {
          break;
        }
        this.advance();
      }
      var str = this.input.substring(start, this.index);
      var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
      return newNumberToken(start, value);
    };
    _Scanner.prototype.scanString = function() {
      assert(this.peek == exports.$SQ || this.peek == exports.$DQ);
      var start = this.index;
      var quote = this.peek;
      this.advance();
      var buffer;
      var marker = this.index;
      var input = this.input;
      while (this.peek != quote) {
        if (this.peek == exports.$BACKSLASH) {
          if (buffer == null)
            buffer = new lang_1.StringJoiner();
          buffer.add(input.substring(marker, this.index));
          this.advance();
          var unescapedCode;
          if (this.peek == $u) {
            var hex = input.substring(this.index + 1, this.index + 5);
            try {
              unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
            } catch (e) {
              this.error("Invalid unicode escape [\\u" + hex + "]", 0);
            }
            for (var i = 0; i < 5; i++) {
              this.advance();
            }
          } else {
            unescapedCode = unescape(this.peek);
            this.advance();
          }
          buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
          marker = this.index;
        } else if (this.peek == exports.$EOF) {
          this.error('Unterminated quote', 0);
        } else {
          this.advance();
        }
      }
      var last = input.substring(marker, this.index);
      this.advance();
      var unescaped = last;
      if (buffer != null) {
        buffer.add(last);
        unescaped = buffer.toString();
      }
      return newStringToken(start, unescaped);
    };
    _Scanner.prototype.error = function(message, offset) {
      var position = this.index + offset;
      throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
    };
    return _Scanner;
  })();
  function isWhitespace(code) {
    return (code >= exports.$TAB && code <= exports.$SPACE) || (code == $NBSP);
  }
  function isIdentifierStart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || (code == $_) || (code == exports.$$);
  }
  function isIdentifierPart(code) {
    return ($a <= code && code <= $z) || ($A <= code && code <= $Z) || ($0 <= code && code <= $9) || (code == $_) || (code == exports.$$);
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isExponentStart(code) {
    return code == $e || code == $E;
  }
  function isExponentSign(code) {
    return code == exports.$MINUS || code == exports.$PLUS;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return exports.$LF;
      case $f:
        return exports.$FF;
      case $r:
        return exports.$CR;
      case $t:
        return exports.$TAB;
      case $v:
        return exports.$VTAB;
      default:
        return code;
    }
  }
  var OPERATORS = collection_1.SetWrapper.createFromList(['+', '-', '*', '/', '%', '^', '=', '==', '!=', '===', '!==', '<', '>', '<=', '>=', '&&', '||', '&', '|', '!', '?', '#', '?.']);
  var KEYWORDS = collection_1.SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false', 'if', 'else']);
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/parser", ["npm:angular2@2.0.0-alpha.28/src/di/decorators", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/parser/lexer", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection", "npm:angular2@2.0.0-alpha.28/src/change_detection/parser/ast"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/di/decorators");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lexer_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/lexer");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection");
  var ast_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/ast");
  var _implicitReceiver = new ast_1.ImplicitReceiver();
  var INTERPOLATION_REGEXP = lang_1.RegExpWrapper.create('\\{\\{(.*?)\\}\\}');
  var Parser = (function() {
    function Parser(_lexer, providedReflector) {
      if (providedReflector === void 0) {
        providedReflector = null;
      }
      this._lexer = _lexer;
      this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
    }
    Parser.prototype.parseAction = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
      return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseBinding = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
      return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseSimpleBinding = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseSimpleBinding();
      return new ast_1.ASTWithSource(ast, input, location);
    };
    Parser.prototype.parseTemplateBindings = function(input, location) {
      var tokens = this._lexer.tokenize(input);
      return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
    };
    Parser.prototype.parseInterpolation = function(input, location) {
      var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
      if (parts.length <= 1) {
        return null;
      }
      var strings = [];
      var expressions = [];
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (i % 2 === 0) {
          strings.push(part);
        } else {
          var tokens = this._lexer.tokenize(part);
          var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
          expressions.push(ast);
        }
      }
      return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
    };
    Parser.prototype.wrapLiteralPrimitive = function(input, location) {
      return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
    };
    Parser = __decorate([decorators_1.Injectable(), __metadata('design:paramtypes', [lexer_1.Lexer, reflection_1.Reflector])], Parser);
    return Parser;
  })();
  exports.Parser = Parser;
  var _ParseAST = (function() {
    function _ParseAST(input, location, tokens, reflector, parseAction) {
      this.input = input;
      this.location = location;
      this.tokens = tokens;
      this.reflector = reflector;
      this.parseAction = parseAction;
      this.index = 0;
    }
    _ParseAST.prototype.peek = function(offset) {
      var i = this.index + offset;
      return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
    };
    Object.defineProperty(_ParseAST.prototype, "next", {
      get: function() {
        return this.peek(0);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
      get: function() {
        return (this.index < this.tokens.length) ? this.next.index : this.input.length;
      },
      enumerable: true,
      configurable: true
    });
    _ParseAST.prototype.advance = function() {
      this.index++;
    };
    _ParseAST.prototype.optionalCharacter = function(code) {
      if (this.next.isCharacter(code)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.optionalKeywordVar = function() {
      if (this.peekKeywordVar()) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.peekKeywordVar = function() {
      return this.next.isKeywordVar() || this.next.isOperator('#');
    };
    _ParseAST.prototype.expectCharacter = function(code) {
      if (this.optionalCharacter(code))
        return ;
      this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
    };
    _ParseAST.prototype.optionalOperator = function(op) {
      if (this.next.isOperator(op)) {
        this.advance();
        return true;
      } else {
        return false;
      }
    };
    _ParseAST.prototype.expectOperator = function(operator) {
      if (this.optionalOperator(operator))
        return ;
      this.error("Missing expected operator " + operator);
    };
    _ParseAST.prototype.expectIdentifierOrKeyword = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword()) {
        this.error("Unexpected token " + n + ", expected identifier or keyword");
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function() {
      var n = this.next;
      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
        this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
      }
      this.advance();
      return n.toString();
    };
    _ParseAST.prototype.parseChain = function() {
      var exprs = [];
      while (this.index < this.tokens.length) {
        var expr = this.parsePipe();
        exprs.push(expr);
        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
          if (!this.parseAction) {
            this.error("Binding expression cannot contain chained expression");
          }
          while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
        } else if (this.index < this.tokens.length) {
          this.error("Unexpected token '" + this.next + "'");
        }
      }
      if (exprs.length == 0)
        return new ast_1.EmptyExpr();
      if (exprs.length == 1)
        return exprs[0];
      return new ast_1.Chain(exprs);
    };
    _ParseAST.prototype.parseSimpleBinding = function() {
      var ast = this.parseChain();
      if (!SimpleExpressionChecker.check(ast)) {
        this.error("Simple binding expression can only contain field access and constants'");
      }
      return ast;
    };
    _ParseAST.prototype.parsePipe = function() {
      var result = this.parseExpression();
      if (this.optionalOperator("|")) {
        if (this.parseAction) {
          this.error("Cannot have a pipe in an action expression");
        }
        do {
          var name = this.expectIdentifierOrKeyword();
          var args = [];
          while (this.optionalCharacter(lexer_1.$COLON)) {
            args.push(this.parsePipe());
          }
          result = new ast_1.BindingPipe(result, name, args);
        } while (this.optionalOperator("|"));
      }
      return result;
    };
    _ParseAST.prototype.parseExpression = function() {
      var start = this.inputIndex;
      var result = this.parseConditional();
      while (this.next.isOperator('=')) {
        if (!result.isAssignable) {
          var end = this.inputIndex;
          var expression = this.input.substring(start, end);
          this.error("Expression " + expression + " is not assignable");
        }
        if (!this.parseAction) {
          this.error("Binding expression cannot contain assignments");
        }
        this.expectOperator('=');
        result = new ast_1.Assignment(result, this.parseConditional());
      }
      return result;
    };
    _ParseAST.prototype.parseConditional = function() {
      var start = this.inputIndex;
      var result = this.parseLogicalOr();
      if (this.optionalOperator('?')) {
        var yes = this.parsePipe();
        if (!this.optionalCharacter(lexer_1.$COLON)) {
          var end = this.inputIndex;
          var expression = this.input.substring(start, end);
          this.error("Conditional expression " + expression + " requires all 3 expressions");
        }
        var no = this.parsePipe();
        return new ast_1.Conditional(result, yes, no);
      } else {
        return result;
      }
    };
    _ParseAST.prototype.parseLogicalOr = function() {
      var result = this.parseLogicalAnd();
      while (this.optionalOperator('||')) {
        result = new ast_1.Binary('||', result, this.parseLogicalAnd());
      }
      return result;
    };
    _ParseAST.prototype.parseLogicalAnd = function() {
      var result = this.parseEquality();
      while (this.optionalOperator('&&')) {
        result = new ast_1.Binary('&&', result, this.parseEquality());
      }
      return result;
    };
    _ParseAST.prototype.parseEquality = function() {
      var result = this.parseRelational();
      while (true) {
        if (this.optionalOperator('==')) {
          result = new ast_1.Binary('==', result, this.parseRelational());
        } else if (this.optionalOperator('===')) {
          result = new ast_1.Binary('===', result, this.parseRelational());
        } else if (this.optionalOperator('!=')) {
          result = new ast_1.Binary('!=', result, this.parseRelational());
        } else if (this.optionalOperator('!==')) {
          result = new ast_1.Binary('!==', result, this.parseRelational());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parseRelational = function() {
      var result = this.parseAdditive();
      while (true) {
        if (this.optionalOperator('<')) {
          result = new ast_1.Binary('<', result, this.parseAdditive());
        } else if (this.optionalOperator('>')) {
          result = new ast_1.Binary('>', result, this.parseAdditive());
        } else if (this.optionalOperator('<=')) {
          result = new ast_1.Binary('<=', result, this.parseAdditive());
        } else if (this.optionalOperator('>=')) {
          result = new ast_1.Binary('>=', result, this.parseAdditive());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parseAdditive = function() {
      var result = this.parseMultiplicative();
      while (true) {
        if (this.optionalOperator('+')) {
          result = new ast_1.Binary('+', result, this.parseMultiplicative());
        } else if (this.optionalOperator('-')) {
          result = new ast_1.Binary('-', result, this.parseMultiplicative());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parseMultiplicative = function() {
      var result = this.parsePrefix();
      while (true) {
        if (this.optionalOperator('*')) {
          result = new ast_1.Binary('*', result, this.parsePrefix());
        } else if (this.optionalOperator('%')) {
          result = new ast_1.Binary('%', result, this.parsePrefix());
        } else if (this.optionalOperator('/')) {
          result = new ast_1.Binary('/', result, this.parsePrefix());
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parsePrefix = function() {
      if (this.optionalOperator('+')) {
        return this.parsePrefix();
      } else if (this.optionalOperator('-')) {
        return new ast_1.Binary('-', new ast_1.LiteralPrimitive(0), this.parsePrefix());
      } else if (this.optionalOperator('!')) {
        return new ast_1.PrefixNot(this.parsePrefix());
      } else {
        return this.parseCallChain();
      }
    };
    _ParseAST.prototype.parseCallChain = function() {
      var result = this.parsePrimary();
      while (true) {
        if (this.optionalCharacter(lexer_1.$PERIOD)) {
          result = this.parseAccessMemberOrMethodCall(result, false);
        } else if (this.optionalOperator('?.')) {
          result = this.parseAccessMemberOrMethodCall(result, true);
        } else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
          var key = this.parsePipe();
          this.expectCharacter(lexer_1.$RBRACKET);
          result = new ast_1.KeyedAccess(result, key);
        } else if (this.optionalCharacter(lexer_1.$LPAREN)) {
          var args = this.parseCallArguments();
          this.expectCharacter(lexer_1.$RPAREN);
          result = new ast_1.FunctionCall(result, args);
        } else {
          return result;
        }
      }
    };
    _ParseAST.prototype.parsePrimary = function() {
      if (this.optionalCharacter(lexer_1.$LPAREN)) {
        var result = this.parsePipe();
        this.expectCharacter(lexer_1.$RPAREN);
        return result;
      } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
        this.advance();
        return new ast_1.LiteralPrimitive(null);
      } else if (this.next.isKeywordTrue()) {
        this.advance();
        return new ast_1.LiteralPrimitive(true);
      } else if (this.next.isKeywordFalse()) {
        this.advance();
        return new ast_1.LiteralPrimitive(false);
      } else if (this.parseAction && this.next.isKeywordIf()) {
        this.advance();
        this.expectCharacter(lexer_1.$LPAREN);
        var condition = this.parseExpression();
        this.expectCharacter(lexer_1.$RPAREN);
        var ifExp = this.parseExpressionOrBlock();
        var elseExp;
        if (this.next.isKeywordElse()) {
          this.advance();
          elseExp = this.parseExpressionOrBlock();
        }
        return new ast_1.If(condition, ifExp, elseExp);
      } else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
        var elements = this.parseExpressionList(lexer_1.$RBRACKET);
        this.expectCharacter(lexer_1.$RBRACKET);
        return new ast_1.LiteralArray(elements);
      } else if (this.next.isCharacter(lexer_1.$LBRACE)) {
        return this.parseLiteralMap();
      } else if (this.next.isIdentifier()) {
        return this.parseAccessMemberOrMethodCall(_implicitReceiver, false);
      } else if (this.next.isNumber()) {
        var value = this.next.toNumber();
        this.advance();
        return new ast_1.LiteralPrimitive(value);
      } else if (this.next.isString()) {
        var literalValue = this.next.toString();
        this.advance();
        return new ast_1.LiteralPrimitive(literalValue);
      } else if (this.index >= this.tokens.length) {
        this.error("Unexpected end of expression: " + this.input);
      } else {
        this.error("Unexpected token " + this.next);
      }
    };
    _ParseAST.prototype.parseExpressionList = function(terminator) {
      var result = [];
      if (!this.next.isCharacter(terminator)) {
        do {
          result.push(this.parsePipe());
        } while (this.optionalCharacter(lexer_1.$COMMA));
      }
      return result;
    };
    _ParseAST.prototype.parseLiteralMap = function() {
      var keys = [];
      var values = [];
      this.expectCharacter(lexer_1.$LBRACE);
      if (!this.optionalCharacter(lexer_1.$RBRACE)) {
        do {
          var key = this.expectIdentifierOrKeywordOrString();
          keys.push(key);
          this.expectCharacter(lexer_1.$COLON);
          values.push(this.parsePipe());
        } while (this.optionalCharacter(lexer_1.$COMMA));
        this.expectCharacter(lexer_1.$RBRACE);
      }
      return new ast_1.LiteralMap(keys, values);
    };
    _ParseAST.prototype.parseAccessMemberOrMethodCall = function(receiver, isSafe) {
      if (isSafe === void 0) {
        isSafe = false;
      }
      var id = this.expectIdentifierOrKeyword();
      if (this.optionalCharacter(lexer_1.$LPAREN)) {
        var args = this.parseCallArguments();
        this.expectCharacter(lexer_1.$RPAREN);
        var fn = this.reflector.method(id);
        return isSafe ? new ast_1.SafeMethodCall(receiver, id, fn, args) : new ast_1.MethodCall(receiver, id, fn, args);
      } else {
        var getter = this.reflector.getter(id);
        var setter = this.reflector.setter(id);
        return isSafe ? new ast_1.SafeAccessMember(receiver, id, getter, setter) : new ast_1.AccessMember(receiver, id, getter, setter);
      }
    };
    _ParseAST.prototype.parseCallArguments = function() {
      if (this.next.isCharacter(lexer_1.$RPAREN))
        return [];
      var positionals = [];
      do {
        positionals.push(this.parsePipe());
      } while (this.optionalCharacter(lexer_1.$COMMA));
      return positionals;
    };
    _ParseAST.prototype.parseExpressionOrBlock = function() {
      if (this.optionalCharacter(lexer_1.$LBRACE)) {
        var block = this.parseBlockContent();
        this.expectCharacter(lexer_1.$RBRACE);
        return block;
      }
      return this.parseExpression();
    };
    _ParseAST.prototype.parseBlockContent = function() {
      if (!this.parseAction) {
        this.error("Binding expression cannot contain chained expression");
      }
      var exprs = [];
      while (this.index < this.tokens.length && !this.next.isCharacter(lexer_1.$RBRACE)) {
        var expr = this.parseExpression();
        exprs.push(expr);
        if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
          while (this.optionalCharacter(lexer_1.$SEMICOLON)) {}
        }
      }
      if (exprs.length == 0)
        return new ast_1.EmptyExpr();
      if (exprs.length == 1)
        return exprs[0];
      return new ast_1.Chain(exprs);
    };
    _ParseAST.prototype.expectTemplateBindingKey = function() {
      var result = '';
      var operatorFound = false;
      do {
        result += this.expectIdentifierOrKeywordOrString();
        operatorFound = this.optionalOperator('-');
        if (operatorFound) {
          result += '-';
        }
      } while (operatorFound);
      return result.toString();
    };
    _ParseAST.prototype.parseTemplateBindings = function() {
      var bindings = [];
      var prefix = null;
      while (this.index < this.tokens.length) {
        var keyIsVar = this.optionalKeywordVar();
        var key = this.expectTemplateBindingKey();
        if (!keyIsVar) {
          if (prefix == null) {
            prefix = key;
          } else {
            key = prefix + '-' + key;
          }
        }
        this.optionalCharacter(lexer_1.$COLON);
        var name = null;
        var expression = null;
        if (keyIsVar) {
          if (this.optionalOperator("=")) {
            name = this.expectTemplateBindingKey();
          } else {
            name = '\$implicit';
          }
        } else if (this.next !== lexer_1.EOF && !this.peekKeywordVar()) {
          var start = this.inputIndex;
          var ast = this.parsePipe();
          var source = this.input.substring(start, this.inputIndex);
          expression = new ast_1.ASTWithSource(ast, source, this.location);
        }
        bindings.push(new ast_1.TemplateBinding(key, keyIsVar, name, expression));
        if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
          this.optionalCharacter(lexer_1.$COMMA);
        }
      }
      return bindings;
    };
    _ParseAST.prototype.error = function(message, index) {
      if (index === void 0) {
        index = null;
      }
      if (lang_1.isBlank(index))
        index = this.index;
      var location = (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
      throw new lang_1.BaseException("Parser Error: " + message + " " + location + " [" + this.input + "] in " + this.location);
    };
    return _ParseAST;
  })();
  var SimpleExpressionChecker = (function() {
    function SimpleExpressionChecker() {
      this.simple = true;
    }
    SimpleExpressionChecker.check = function(ast) {
      var s = new SimpleExpressionChecker();
      ast.visit(s);
      return s.simple;
    };
    SimpleExpressionChecker.prototype.visitImplicitReceiver = function(ast) {};
    SimpleExpressionChecker.prototype.visitInterpolation = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitLiteralPrimitive = function(ast) {};
    SimpleExpressionChecker.prototype.visitAccessMember = function(ast) {};
    SimpleExpressionChecker.prototype.visitSafeAccessMember = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitMethodCall = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitSafeMethodCall = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitFunctionCall = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitLiteralArray = function(ast) {
      this.visitAll(ast.expressions);
    };
    SimpleExpressionChecker.prototype.visitLiteralMap = function(ast) {
      this.visitAll(ast.values);
    };
    SimpleExpressionChecker.prototype.visitBinary = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitPrefixNot = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitConditional = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitPipe = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitKeyedAccess = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitAll = function(asts) {
      var res = collection_1.ListWrapper.createFixedSize(asts.length);
      for (var i = 0; i < asts.length; ++i) {
        res[i] = asts[i].visit(this);
      }
      return res;
    };
    SimpleExpressionChecker.prototype.visitChain = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitAssignment = function(ast) {
      this.simple = false;
    };
    SimpleExpressionChecker.prototype.visitIf = function(ast) {
      this.simple = false;
    };
    return SimpleExpressionChecker;
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_change_detector", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/change_detection/parser/ast", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util", "npm:angular2@2.0.0-alpha.28/src/change_detection/dynamic_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/directive_record", "npm:angular2@2.0.0-alpha.28/src/change_detection/coalesce", "npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var ast_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/ast");
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util");
  var dynamic_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/dynamic_change_detector");
  var directive_record_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/directive_record");
  var coalesce_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/coalesce");
  var proto_record_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_record");
  var DynamicProtoChangeDetector = (function() {
    function DynamicProtoChangeDetector(_pipeRegistry, definition) {
      this._pipeRegistry = _pipeRegistry;
      this.definition = definition;
      this._records = this._createRecords(definition);
    }
    DynamicProtoChangeDetector.prototype.instantiate = function(dispatcher) {
      return new dynamic_change_detector_1.DynamicChangeDetector(this.definition.id, this.definition.strategy, dispatcher, this._pipeRegistry, this._records, this.definition.directiveRecords);
    };
    DynamicProtoChangeDetector.prototype._createRecords = function(definition) {
      var recordBuilder = new ProtoRecordBuilder();
      collection_1.ListWrapper.forEach(definition.bindingRecords, function(b) {
        recordBuilder.add(b, definition.variableNames);
      });
      return coalesce_1.coalesce(recordBuilder.records);
    };
    return DynamicProtoChangeDetector;
  })();
  exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
  var ProtoRecordBuilder = (function() {
    function ProtoRecordBuilder() {
      this.records = [];
    }
    ProtoRecordBuilder.prototype.add = function(b, variableNames) {
      if (variableNames === void 0) {
        variableNames = null;
      }
      var oldLast = collection_1.ListWrapper.last(this.records);
      if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
        oldLast.lastInDirective = false;
      }
      this._appendRecords(b, variableNames);
      var newLast = collection_1.ListWrapper.last(this.records);
      if (lang_1.isPresent(newLast) && newLast !== oldLast) {
        newLast.lastInBinding = true;
        newLast.lastInDirective = true;
      }
    };
    ProtoRecordBuilder.prototype._appendRecords = function(b, variableNames) {
      if (b.isDirectiveLifecycle()) {
        this.records.push(new proto_record_1.ProtoRecord(proto_record_1.RecordType.DIRECTIVE_LIFECYCLE, b.lifecycleEvent, null, [], [], -1, null, this.records.length + 1, b, null, false, false));
      } else {
        _ConvertAstIntoProtoRecords.append(this.records, b, variableNames);
      }
    };
    return ProtoRecordBuilder;
  })();
  exports.ProtoRecordBuilder = ProtoRecordBuilder;
  var _ConvertAstIntoProtoRecords = (function() {
    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _expressionAsString, _variableNames) {
      this._records = _records;
      this._bindingRecord = _bindingRecord;
      this._expressionAsString = _expressionAsString;
      this._variableNames = _variableNames;
    }
    _ConvertAstIntoProtoRecords.append = function(records, b, variableNames) {
      var c = new _ConvertAstIntoProtoRecords(records, b, b.ast.toString(), variableNames);
      b.ast.visit(c);
    };
    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function(ast) {
      return this._bindingRecord.implicitReceiver;
    };
    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function(ast) {
      var args = this._visitAll(ast.expressions);
      return this._addRecord(proto_record_1.RecordType.INTERPOLATE, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function(ast) {
      return this._addRecord(proto_record_1.RecordType.CONST, "literal", ast.value, [], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitAccessMember = function(ast) {
      var receiver = ast.receiver.visit(this);
      if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) && ast.receiver instanceof ast_1.ImplicitReceiver) {
        return this._addRecord(proto_record_1.RecordType.LOCAL, ast.name, ast.name, [], null, receiver);
      } else {
        return this._addRecord(proto_record_1.RecordType.PROPERTY, ast.name, ast.getter, [], null, receiver);
      }
    };
    _ConvertAstIntoProtoRecords.prototype.visitSafeAccessMember = function(ast) {
      var receiver = ast.receiver.visit(this);
      return this._addRecord(proto_record_1.RecordType.SAFE_PROPERTY, ast.name, ast.getter, [], null, receiver);
    };
    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function(ast) {
      var receiver = ast.receiver.visit(this);
      var args = this._visitAll(ast.args);
      if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
        var target = this._addRecord(proto_record_1.RecordType.LOCAL, ast.name, ast.name, [], null, receiver);
        return this._addRecord(proto_record_1.RecordType.INVOKE_CLOSURE, "closure", null, args, null, target);
      } else {
        return this._addRecord(proto_record_1.RecordType.INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
      }
    };
    _ConvertAstIntoProtoRecords.prototype.visitSafeMethodCall = function(ast) {
      var receiver = ast.receiver.visit(this);
      var args = this._visitAll(ast.args);
      return this._addRecord(proto_record_1.RecordType.SAFE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
    };
    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function(ast) {
      var target = ast.target.visit(this);
      var args = this._visitAll(ast.args);
      return this._addRecord(proto_record_1.RecordType.INVOKE_CLOSURE, "closure", null, args, null, target);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function(ast) {
      var primitiveName = "arrayFn" + ast.expressions.length;
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function(ast) {
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitBinary = function(ast) {
      var left = ast.left.visit(this);
      var right = ast.right.visit(this);
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function(ast) {
      var exp = ast.expression.visit(this);
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, "operation_negate", change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitConditional = function(ast) {
      var c = ast.condition.visit(this);
      var t = ast.trueExp.visit(this);
      var f = ast.falseExp.visit(this);
      return this._addRecord(proto_record_1.RecordType.PRIMITIVE_OP, "cond", change_detection_util_1.ChangeDetectionUtil.cond, [c, t, f], null, 0);
    };
    _ConvertAstIntoProtoRecords.prototype.visitPipe = function(ast) {
      var value = ast.exp.visit(this);
      return this._addRecord(proto_record_1.RecordType.PIPE, ast.name, ast.name, [], null, value);
    };
    _ConvertAstIntoProtoRecords.prototype.visitKeyedAccess = function(ast) {
      var obj = ast.obj.visit(this);
      var key = ast.key.visit(this);
      return this._addRecord(proto_record_1.RecordType.KEYED_ACCESS, "keyedAccess", change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
    };
    _ConvertAstIntoProtoRecords.prototype.visitAssignment = function(ast) {
      throw new lang_1.BaseException('Not supported');
    };
    _ConvertAstIntoProtoRecords.prototype.visitChain = function(ast) {
      throw new lang_1.BaseException('Not supported');
    };
    _ConvertAstIntoProtoRecords.prototype.visitIf = function(ast) {
      throw new lang_1.BaseException('Not supported');
    };
    _ConvertAstIntoProtoRecords.prototype._visitAll = function(asts) {
      var res = collection_1.ListWrapper.createFixedSize(asts.length);
      for (var i = 0; i < asts.length; ++i) {
        res[i] = asts[i].visit(this);
      }
      return res;
    };
    _ConvertAstIntoProtoRecords.prototype._addRecord = function(type, name, funcOrValue, args, fixedArgs, context) {
      var selfIndex = this._records.length + 1;
      if (context instanceof directive_record_1.DirectiveIndex) {
        this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
      } else {
        this._records.push(new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
      }
      return selfIndex;
    };
    return _ConvertAstIntoProtoRecords;
  })();
  function _arrayFn(length) {
    switch (length) {
      case 0:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
      case 1:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
      case 2:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
      case 3:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
      case 4:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
      case 5:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
      case 6:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
      case 7:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
      case 8:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
      case 9:
        return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
      default:
        throw new lang_1.BaseException("Does not support literal maps with more than 9 elements");
    }
  }
  function _mapPrimitiveName(keys) {
    var stringifiedKeys = collection_1.ListWrapper.join(collection_1.ListWrapper.map(keys, function(k) {
      return lang_1.isString(k) ? "\"" + k + "\"" : "" + k;
    }), ", ");
    return "mapFn([" + stringifiedKeys + "])";
  }
  function _operationToPrimitiveName(operation) {
    switch (operation) {
      case '+':
        return "operation_add";
      case '-':
        return "operation_subtract";
      case '*':
        return "operation_multiply";
      case '/':
        return "operation_divide";
      case '%':
        return "operation_remainder";
      case '==':
        return "operation_equals";
      case '!=':
        return "operation_not_equals";
      case '===':
        return "operation_identical";
      case '!==':
        return "operation_not_identical";
      case '<':
        return "operation_less_then";
      case '>':
        return "operation_greater_then";
      case '<=':
        return "operation_less_or_equals_then";
      case '>=':
        return "operation_greater_or_equals_then";
      case '&&':
        return "operation_logical_and";
      case '||':
        return "operation_logical_or";
      default:
        throw new lang_1.BaseException("Unsupported operation " + operation);
    }
  }
  function _operationToFunction(operation) {
    switch (operation) {
      case '+':
        return change_detection_util_1.ChangeDetectionUtil.operation_add;
      case '-':
        return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
      case '*':
        return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
      case '/':
        return change_detection_util_1.ChangeDetectionUtil.operation_divide;
      case '%':
        return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
      case '==':
        return change_detection_util_1.ChangeDetectionUtil.operation_equals;
      case '!=':
        return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
      case '===':
        return change_detection_util_1.ChangeDetectionUtil.operation_identical;
      case '!==':
        return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
      case '<':
        return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
      case '>':
        return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
      case '<=':
        return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
      case '>=':
        return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
      case '&&':
        return change_detection_util_1.ChangeDetectionUtil.operation_logical_and;
      case '||':
        return change_detection_util_1.ChangeDetectionUtil.operation_logical_or;
      default:
        throw new lang_1.BaseException("Unsupported operation " + operation);
    }
  }
  function s(v) {
    return lang_1.isPresent(v) ? "" + v : '';
  }
  function _interpolationFn(strings) {
    var length = strings.length;
    var c0 = length > 0 ? strings[0] : null;
    var c1 = length > 1 ? strings[1] : null;
    var c2 = length > 2 ? strings[2] : null;
    var c3 = length > 3 ? strings[3] : null;
    var c4 = length > 4 ? strings[4] : null;
    var c5 = length > 5 ? strings[5] : null;
    var c6 = length > 6 ? strings[6] : null;
    var c7 = length > 7 ? strings[7] : null;
    var c8 = length > 8 ? strings[8] : null;
    var c9 = length > 9 ? strings[9] : null;
    switch (length - 1) {
      case 1:
        return function(a1) {
          return c0 + s(a1) + c1;
        };
      case 2:
        return function(a1, a2) {
          return c0 + s(a1) + c1 + s(a2) + c2;
        };
      case 3:
        return function(a1, a2, a3) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;
        };
      case 4:
        return function(a1, a2, a3, a4) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;
        };
      case 5:
        return function(a1, a2, a3, a4, a5) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
        };
      case 6:
        return function(a1, a2, a3, a4, a5, a6) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
        };
      case 7:
        return function(a1, a2, a3, a4, a5, a6, a7) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;
        };
      case 8:
        return function(a1, a2, a3, a4, a5, a6, a7, a8) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;
        };
      case 9:
        return function(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
          return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;
        };
      default:
        throw new lang_1.BaseException("Does not support more than 9 expressions");
    }
  }
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("github:jspm/nodelibs-process@0.1.1", ["github:jspm/nodelibs-process@0.1.1/index"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("github:jspm/nodelibs-process@0.1.1/index");
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/di/injector", ["npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/di/binding", "npm:angular2@2.0.0-alpha.28/src/di/exceptions", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/di/key", "npm:angular2@2.0.0-alpha.28/src/di/forward_ref", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
    var binding_1 = require("npm:angular2@2.0.0-alpha.28/src/di/binding");
    var exceptions_1 = require("npm:angular2@2.0.0-alpha.28/src/di/exceptions");
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
    var key_1 = require("npm:angular2@2.0.0-alpha.28/src/di/key");
    var forward_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/di/forward_ref");
    var _constructing = lang_1.CONST_EXPR(new Object());
    var _notFound = lang_1.CONST_EXPR(new Object());
    var _Waiting = (function() {
      function _Waiting(promise) {
        this.promise = promise;
      }
      return _Waiting;
    })();
    function _isWaiting(obj) {
      return obj instanceof _Waiting;
    }
    var Injector = (function() {
      function Injector(_bindings, _parent, _defaultBindings) {
        this._bindings = _bindings;
        this._parent = _parent;
        this._defaultBindings = _defaultBindings;
        this._instances = this._createInstances();
        this._asyncStrategy = new _AsyncInjectorStrategy(this);
        this._syncStrategy = new _SyncInjectorStrategy(this);
      }
      Injector.resolve = function(bindings) {
        var resolvedBindings = resolveBindings(bindings);
        var flatten = _flattenBindings(resolvedBindings, new collection_1.Map());
        return _createListOfBindings(flatten);
      };
      Injector.resolveAndCreate = function(bindings, _a) {
        var _b = (_a === void 0 ? {} : _a).defaultBindings,
            defaultBindings = _b === void 0 ? false : _b;
        return new Injector(Injector.resolve(bindings), null, defaultBindings);
      };
      Injector.fromResolvedBindings = function(bindings, _a) {
        var _b = (_a === void 0 ? {} : _a).defaultBindings,
            defaultBindings = _b === void 0 ? false : _b;
        return new Injector(bindings, null, defaultBindings);
      };
      Object.defineProperty(Injector.prototype, "parent", {
        get: function() {
          return this._parent;
        },
        enumerable: true,
        configurable: true
      });
      Injector.prototype.get = function(token) {
        return this._getByKey(key_1.Key.get(token), false, false, false);
      };
      Injector.prototype.getOptional = function(token) {
        return this._getByKey(key_1.Key.get(token), false, false, true);
      };
      Injector.prototype.asyncGet = function(token) {
        return this._getByKey(key_1.Key.get(token), true, false, false);
      };
      Injector.prototype.resolveAndCreateChild = function(bindings) {
        return new Injector(Injector.resolve(bindings), this, false);
      };
      Injector.prototype.createChildFromResolved = function(bindings) {
        return new Injector(bindings, this, false);
      };
      Injector.prototype._createInstances = function() {
        return collection_1.ListWrapper.createFixedSize(key_1.Key.numberOfKeys + 1);
      };
      Injector.prototype._getByKey = function(key, returnPromise, returnLazy, optional) {
        var _this = this;
        if (returnLazy) {
          return function() {
            return _this._getByKey(key, returnPromise, false, optional);
          };
        }
        var strategy = returnPromise ? this._asyncStrategy : this._syncStrategy;
        var instance = strategy.readFromCache(key);
        if (instance !== _notFound)
          return instance;
        instance = strategy.instantiate(key);
        if (instance !== _notFound)
          return instance;
        if (lang_1.isPresent(this._parent)) {
          return this._parent._getByKey(key, returnPromise, returnLazy, optional);
        }
        if (optional) {
          return null;
        } else {
          throw new exceptions_1.NoBindingError(key);
        }
      };
      Injector.prototype._resolveDependencies = function(key, binding, forceAsync) {
        var _this = this;
        try {
          var getDependency = function(d) {
            return _this._getByKey(d.key, forceAsync || d.asPromise, d.lazy, d.optional);
          };
          return collection_1.ListWrapper.map(binding.dependencies, getDependency);
        } catch (e) {
          this._clear(key);
          if (e instanceof exceptions_1.AbstractBindingError)
            e.addKey(key);
          throw e;
        }
      };
      Injector.prototype._getInstance = function(key) {
        if (this._instances.length <= key.id)
          return null;
        return collection_1.ListWrapper.get(this._instances, key.id);
      };
      Injector.prototype._setInstance = function(key, obj) {
        collection_1.ListWrapper.set(this._instances, key.id, obj);
      };
      Injector.prototype._getBinding = function(key) {
        var binding = this._bindings.length <= key.id ? null : collection_1.ListWrapper.get(this._bindings, key.id);
        if (lang_1.isBlank(binding) && this._defaultBindings) {
          var token = key.token;
          return binding_1.bind(key.token).toClass(token).resolve();
        } else {
          return binding;
        }
      };
      Injector.prototype._markAsConstructing = function(key) {
        this._setInstance(key, _constructing);
      };
      Injector.prototype._clear = function(key) {
        this._setInstance(key, null);
      };
      return Injector;
    })();
    exports.Injector = Injector;
    var _SyncInjectorStrategy = (function() {
      function _SyncInjectorStrategy(_injector) {
        this._injector = _injector;
      }
      _SyncInjectorStrategy.prototype.readFromCache = function(key) {
        if (key.token === Injector) {
          return this._injector;
        }
        var instance = this._injector._getInstance(key);
        if (instance === _constructing) {
          throw new exceptions_1.CyclicDependencyError(key);
        } else if (lang_1.isPresent(instance) && !_isWaiting(instance)) {
          return instance;
        } else {
          return _notFound;
        }
      };
      _SyncInjectorStrategy.prototype.instantiate = function(key) {
        var binding = this._injector._getBinding(key);
        if (lang_1.isBlank(binding))
          return _notFound;
        if (binding.providedAsPromise)
          throw new exceptions_1.AsyncBindingError(key);
        this._injector._markAsConstructing(key);
        var deps = this._injector._resolveDependencies(key, binding, false);
        return this._createInstance(key, binding, deps);
      };
      _SyncInjectorStrategy.prototype._createInstance = function(key, binding, deps) {
        try {
          var instance = lang_1.FunctionWrapper.apply(binding.factory, deps);
          this._injector._setInstance(key, instance);
          return instance;
        } catch (e) {
          this._injector._clear(key);
          throw new exceptions_1.InstantiationError(e, key);
        }
      };
      return _SyncInjectorStrategy;
    })();
    var _AsyncInjectorStrategy = (function() {
      function _AsyncInjectorStrategy(_injector) {
        this._injector = _injector;
      }
      _AsyncInjectorStrategy.prototype.readFromCache = function(key) {
        if (key.token === Injector) {
          return async_1.PromiseWrapper.resolve(this._injector);
        }
        var instance = this._injector._getInstance(key);
        if (instance === _constructing) {
          throw new exceptions_1.CyclicDependencyError(key);
        } else if (_isWaiting(instance)) {
          return instance.promise;
        } else if (lang_1.isPresent(instance)) {
          return async_1.PromiseWrapper.resolve(instance);
        } else {
          return _notFound;
        }
      };
      _AsyncInjectorStrategy.prototype.instantiate = function(key) {
        var _this = this;
        var binding = this._injector._getBinding(key);
        if (lang_1.isBlank(binding))
          return _notFound;
        this._injector._markAsConstructing(key);
        var deps = this._injector._resolveDependencies(key, binding, true);
        var depsPromise = async_1.PromiseWrapper.all(deps);
        var promise = async_1.PromiseWrapper.then(depsPromise, null, function(e, s) {
          return _this._errorHandler(key, e, s);
        }).then(function(deps) {
          return _this._findOrCreate(key, binding, deps);
        }).then(function(instance) {
          return _this._cacheInstance(key, instance);
        });
        this._injector._setInstance(key, new _Waiting(promise));
        return promise;
      };
      _AsyncInjectorStrategy.prototype._errorHandler = function(key, e, stack) {
        if (e instanceof exceptions_1.AbstractBindingError)
          e.addKey(key);
        return async_1.PromiseWrapper.reject(e, stack);
      };
      _AsyncInjectorStrategy.prototype._findOrCreate = function(key, binding, deps) {
        try {
          var instance = this._injector._getInstance(key);
          if (!_isWaiting(instance))
            return instance;
          return lang_1.FunctionWrapper.apply(binding.factory, deps);
        } catch (e) {
          this._injector._clear(key);
          throw new exceptions_1.InstantiationError(e, key);
        }
      };
      _AsyncInjectorStrategy.prototype._cacheInstance = function(key, instance) {
        this._injector._setInstance(key, instance);
        return instance;
      };
      return _AsyncInjectorStrategy;
    })();
    function resolveBindings(bindings) {
      var resolvedList = collection_1.ListWrapper.createFixedSize(bindings.length);
      for (var i = 0; i < bindings.length; i++) {
        var unresolved = forward_ref_1.resolveForwardRef(bindings[i]);
        var resolved;
        if (unresolved instanceof binding_1.ResolvedBinding) {
          resolved = unresolved;
        } else if (unresolved instanceof lang_1.Type) {
          resolved = binding_1.bind(unresolved).toClass(unresolved).resolve();
        } else if (unresolved instanceof binding_1.Binding) {
          resolved = unresolved.resolve();
        } else if (unresolved instanceof collection_1.List) {
          resolved = resolveBindings(unresolved);
        } else if (unresolved instanceof binding_1.BindingBuilder) {
          throw new exceptions_1.InvalidBindingError(unresolved.token);
        } else {
          throw new exceptions_1.InvalidBindingError(unresolved);
        }
        resolvedList[i] = resolved;
      }
      return resolvedList;
    }
    exports.resolveBindings = resolveBindings;
    function flattenBindings(bindings) {
      var map = _flattenBindings(bindings, new collection_1.Map());
      var res = [];
      collection_1.MapWrapper.forEach(map, function(binding, keyId) {
        return res.push(binding);
      });
      return res;
    }
    function _createListOfBindings(flattenedBindings) {
      var bindings = collection_1.ListWrapper.createFixedSize(key_1.Key.numberOfKeys + 1);
      collection_1.MapWrapper.forEach(flattenedBindings, function(v, keyId) {
        return bindings[keyId] = v;
      });
      return bindings;
    }
    function _flattenBindings(bindings, res) {
      collection_1.ListWrapper.forEach(bindings, function(b) {
        if (b instanceof binding_1.ResolvedBinding) {
          res.set(b.key.id, b);
        } else if (b instanceof collection_1.List) {
          _flattenBindings(b, res);
        }
      });
      return res;
    }
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager_utils", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_pool", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_listener"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var view_manager_utils_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager_utils");
  var view_pool_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_pool");
  var view_listener_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_listener");
  var AppViewManager = (function() {
    function AppViewManager(_viewPool, _viewListener, _utils, _renderer) {
      this._viewPool = _viewPool;
      this._viewListener = _viewListener;
      this._utils = _utils;
      this._renderer = _renderer;
    }
    AppViewManager.prototype.getComponentView = function(hostLocation) {
      var hostView = view_ref_1.internalView(hostLocation.parentView);
      var boundElementIndex = hostLocation.boundElementIndex;
      return hostView.componentChildViews[boundElementIndex].ref;
    };
    AppViewManager.prototype.getViewContainer = function(location) {
      var hostView = view_ref_1.internalView(location.parentView);
      return hostView.elementInjectors[location.boundElementIndex].getViewContainerRef();
    };
    AppViewManager.prototype.getHostElement = function(hostViewRef) {
      return view_ref_1.internalView(hostViewRef).elementRefs[0];
    };
    AppViewManager.prototype.getNamedElementInComponentView = function(hostLocation, variableName) {
      var hostView = view_ref_1.internalView(hostLocation.parentView);
      var boundElementIndex = hostLocation.boundElementIndex;
      var componentView = hostView.componentChildViews[boundElementIndex];
      if (lang_1.isBlank(componentView)) {
        throw new lang_1.BaseException("There is no component directive at element " + boundElementIndex);
      }
      var elementIndex = componentView.proto.variableLocations.get(variableName);
      if (lang_1.isBlank(elementIndex)) {
        throw new lang_1.BaseException("Could not find variable " + variableName);
      }
      return componentView.elementRefs[elementIndex];
    };
    AppViewManager.prototype.getComponent = function(hostLocation) {
      var hostView = view_ref_1.internalView(hostLocation.parentView);
      var boundElementIndex = hostLocation.boundElementIndex;
      return this._utils.getComponentInstance(hostView, boundElementIndex);
    };
    AppViewManager.prototype.createRootHostView = function(hostProtoViewRef, overrideSelector, injector) {
      var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
      var hostElementSelector = overrideSelector;
      if (lang_1.isBlank(hostElementSelector)) {
        hostElementSelector = hostProtoView.elementBinders[0].componentDirective.metadata.selector;
      }
      var renderView = this._renderer.createRootHostView(hostProtoView.render, hostElementSelector);
      var hostView = this._utils.createView(hostProtoView, renderView, this, this._renderer);
      this._renderer.setEventDispatcher(hostView.render, hostView);
      this._createViewRecurse(hostView);
      this._viewListener.viewCreated(hostView);
      this._utils.hydrateRootHostView(hostView, injector);
      this._viewHydrateRecurse(hostView);
      return hostView.ref;
    };
    AppViewManager.prototype.destroyRootHostView = function(hostViewRef) {
      var hostView = view_ref_1.internalView(hostViewRef);
      this._viewDehydrateRecurse(hostView, true);
      this._renderer.destroyView(hostView.render);
      this._viewListener.viewDestroyed(hostView);
    };
    AppViewManager.prototype.createViewInContainer = function(viewContainerLocation, atIndex, protoViewRef, context, injector) {
      if (context === void 0) {
        context = null;
      }
      if (injector === void 0) {
        injector = null;
      }
      var protoView = view_ref_1.internalProtoView(protoViewRef);
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      var contextView = null;
      var contextBoundElementIndex = null;
      if (lang_1.isPresent(context)) {
        contextView = view_ref_1.internalView(context.parentView);
        contextBoundElementIndex = context.boundElementIndex;
      }
      var view = this._createPooledView(protoView);
      this._renderer.attachViewInContainer(viewContainerLocation, atIndex, view.render);
      this._utils.attachViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view);
      this._utils.hydrateViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, injector);
      this._viewHydrateRecurse(view);
      return view.ref;
    };
    AppViewManager.prototype.destroyViewInContainer = function(viewContainerLocation, atIndex) {
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      this._destroyViewInContainer(parentView, boundElementIndex, atIndex);
    };
    AppViewManager.prototype.attachViewInContainer = function(viewContainerLocation, atIndex, viewRef) {
      var view = view_ref_1.internalView(viewRef);
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      this._utils.attachViewInContainer(parentView, boundElementIndex, null, null, atIndex, view);
      this._renderer.attachViewInContainer(viewContainerLocation, atIndex, view.render);
      return viewRef;
    };
    AppViewManager.prototype.detachViewInContainer = function(viewContainerLocation, atIndex) {
      var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
      var boundElementIndex = viewContainerLocation.boundElementIndex;
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
      this._renderer.detachViewInContainer(viewContainerLocation, atIndex, view.render);
      return view.ref;
    };
    AppViewManager.prototype._createPooledView = function(protoView) {
      var view = this._viewPool.getView(protoView);
      if (lang_1.isBlank(view)) {
        view = this._utils.createView(protoView, this._renderer.createView(protoView.render), this, this._renderer);
        this._renderer.setEventDispatcher(view.render, view);
        this._createViewRecurse(view);
        this._viewListener.viewCreated(view);
      }
      return view;
    };
    AppViewManager.prototype._createViewRecurse = function(view) {
      var binders = view.proto.elementBinders;
      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
        var binder = binders[binderIdx];
        if (binder.hasStaticComponent()) {
          var childView = this._createPooledView(binder.nestedProtoView);
          this._renderer.attachComponentView(view.elementRefs[binderIdx], childView.render);
          this._utils.attachComponentView(view, binderIdx, childView);
        }
      }
    };
    AppViewManager.prototype._destroyPooledView = function(view) {
      var wasReturned = this._viewPool.returnView(view);
      if (!wasReturned) {
        this._renderer.destroyView(view.render);
        this._viewListener.viewDestroyed(view);
      }
    };
    AppViewManager.prototype._destroyViewInContainer = function(parentView, boundElementIndex, atIndex) {
      var viewContainer = parentView.viewContainers[boundElementIndex];
      var view = viewContainer.views[atIndex];
      this._viewDehydrateRecurse(view, false);
      this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
      this._renderer.detachViewInContainer(parentView.elementRefs[boundElementIndex], atIndex, view.render);
      this._destroyPooledView(view);
    };
    AppViewManager.prototype._destroyComponentView = function(hostView, boundElementIndex, componentView) {
      this._viewDehydrateRecurse(componentView, false);
      this._renderer.detachComponentView(hostView.elementRefs[boundElementIndex], componentView.render);
      this._utils.detachComponentView(hostView, boundElementIndex);
      this._destroyPooledView(componentView);
    };
    AppViewManager.prototype._viewHydrateRecurse = function(view) {
      this._renderer.hydrateView(view.render);
      var binders = view.proto.elementBinders;
      for (var i = 0; i < binders.length; ++i) {
        if (binders[i].hasStaticComponent()) {
          this._utils.hydrateComponentView(view, i);
          this._viewHydrateRecurse(view.componentChildViews[i]);
        }
      }
    };
    AppViewManager.prototype._viewDehydrateRecurse = function(view, forceDestroyComponents) {
      this._utils.dehydrateView(view);
      this._renderer.dehydrateView(view.render);
      var binders = view.proto.elementBinders;
      for (var i = 0; i < binders.length; i++) {
        var componentView = view.componentChildViews[i];
        if (lang_1.isPresent(componentView)) {
          if (forceDestroyComponents) {
            this._destroyComponentView(view, i, componentView);
          } else {
            this._viewDehydrateRecurse(componentView, false);
          }
        }
        var vc = view.viewContainers[i];
        if (lang_1.isPresent(vc)) {
          for (var j = vc.views.length - 1; j >= 0; j--) {
            this._destroyViewInContainer(view, i, j);
          }
        }
      }
    };
    AppViewManager = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [view_pool_1.AppViewPool, view_listener_1.AppViewListener, view_manager_utils_1.AppViewManagerUtils, api_1.Renderer])], AppViewManager);
    return AppViewManager;
  })();
  exports.AppViewManager = AppViewManager;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compiler", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_pipeline", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_loader", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_step_factory", "npm:angular2@2.0.0-alpha.28/change_detection", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var compile_pipeline_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_pipeline");
  var view_loader_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_loader");
  var compile_step_factory_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compile_step_factory");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
  var shadow_dom_strategy_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy");
  var DomCompiler = (function(_super) {
    __extends(DomCompiler, _super);
    function DomCompiler(_stepFactory, _viewLoader) {
      _super.call(this);
      this._stepFactory = _stepFactory;
      this._viewLoader = _viewLoader;
    }
    DomCompiler.prototype.compile = function(view) {
      var _this = this;
      var tplPromise = this._viewLoader.load(view);
      return async_1.PromiseWrapper.then(tplPromise, function(el) {
        return _this._compileTemplate(view, el, api_1.ViewType.COMPONENT);
      }, function(e) {
        throw new lang_1.BaseException("Failed to load the template for \"" + view.componentId + "\" : " + e);
      });
    };
    DomCompiler.prototype.compileHost = function(directiveMetadata) {
      var hostViewDef = new api_1.ViewDefinition({
        componentId: directiveMetadata.id,
        templateAbsUrl: null,
        template: null,
        styles: null,
        styleAbsUrls: null,
        directives: [directiveMetadata]
      });
      var element = dom_adapter_1.DOM.createElement(directiveMetadata.selector);
      return this._compileTemplate(hostViewDef, element, api_1.ViewType.HOST);
    };
    DomCompiler.prototype._compileTemplate = function(viewDef, tplElement, protoViewType) {
      var pipeline = new compile_pipeline_1.CompilePipeline(this._stepFactory.createSteps(viewDef));
      var compileElements = pipeline.process(tplElement, protoViewType, viewDef.componentId);
      return async_1.PromiseWrapper.resolve(compileElements[0].inheritedProtoView.build());
    };
    return DomCompiler;
  })(api_1.RenderCompiler);
  exports.DomCompiler = DomCompiler;
  var DefaultDomCompiler = (function(_super) {
    __extends(DefaultDomCompiler, _super);
    function DefaultDomCompiler(parser, shadowDomStrategy, viewLoader) {
      _super.call(this, new compile_step_factory_1.DefaultStepFactory(parser, shadowDomStrategy), viewLoader);
    }
    DefaultDomCompiler = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [change_detection_1.Parser, shadow_dom_strategy_1.ShadowDomStrategy, view_loader_1.ViewLoader])], DefaultDomCompiler);
    return DefaultDomCompiler;
  })(DomCompiler);
  exports.DefaultDomCompiler = DefaultDomCompiler;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/http/http", ["npm:angular2@2.0.0-alpha.28/src/di/decorators", "npm:angular2@2.0.0-alpha.28/src/http/static_request", "npm:angular2@2.0.0-alpha.28/src/http/backends/xhr_backend", "npm:angular2@2.0.0-alpha.28/src/http/base_request_options", "npm:angular2@2.0.0-alpha.28/src/http/enums", "npm:rx@2.5.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/di/decorators");
  var static_request_1 = require("npm:angular2@2.0.0-alpha.28/src/http/static_request");
  var xhr_backend_1 = require("npm:angular2@2.0.0-alpha.28/src/http/backends/xhr_backend");
  var base_request_options_1 = require("npm:angular2@2.0.0-alpha.28/src/http/base_request_options");
  var enums_1 = require("npm:angular2@2.0.0-alpha.28/src/http/enums");
  var Rx = require("npm:rx@2.5.1");
  function httpRequest(backend, request) {
    return (Observable.create(function(observer) {
      var connection = backend.createConnection(request);
      var internalSubscription = connection.response.subscribe(observer);
      return function() {
        internalSubscription.dispose();
        connection.dispose();
      };
    }));
  }
  var Http = (function() {
    function Http(_backend, _defaultOptions) {
      this._backend = _backend;
      this._defaultOptions = _defaultOptions;
    }
    Http.prototype.request = function(url, options) {
      if (typeof url === 'string') {
        return httpRequest(this._backend, new static_request_1.Request(url, this._defaultOptions.merge(options)));
      } else if (url instanceof static_request_1.Request) {
        return httpRequest(this._backend, url);
      }
    };
    Http.prototype.get = function(url, options) {
      return httpRequest(this._backend, new static_request_1.Request(url, this._defaultOptions.merge(options).merge({method: enums_1.RequestMethods.GET})));
    };
    Http.prototype.post = function(url, body, options) {
      return httpRequest(this._backend, new static_request_1.Request(url, this._defaultOptions.merge(options).merge({
        body: body,
        method: enums_1.RequestMethods.POST
      })));
    };
    Http.prototype.put = function(url, body, options) {
      return httpRequest(this._backend, new static_request_1.Request(url, this._defaultOptions.merge(options).merge({
        body: body,
        method: enums_1.RequestMethods.PUT
      })));
    };
    Http.prototype.delete = function(url, options) {
      return httpRequest(this._backend, new static_request_1.Request(url, this._defaultOptions.merge(options).merge({method: enums_1.RequestMethods.DELETE})));
    };
    Http.prototype.patch = function(url, body, options) {
      return httpRequest(this._backend, new static_request_1.Request(url, this._defaultOptions.merge(options).merge({
        body: body,
        method: enums_1.RequestMethods.PATCH
      })));
    };
    Http.prototype.head = function(url, options) {
      return httpRequest(this._backend, new static_request_1.Request(url, this._defaultOptions.merge(options).merge({method: enums_1.RequestMethods.HEAD})));
    };
    Http = __decorate([decorators_1.Injectable(), __metadata('design:paramtypes', [xhr_backend_1.XHRBackend, base_request_options_1.BaseRequestOptions])], Http);
    return Http;
  })();
  exports.Http = Http;
  var Observable;
  if (Rx.hasOwnProperty('default')) {
    Observable = Rx.default.Rx.Observable;
  } else {
    Observable = Rx.Observable;
  }
  function HttpFactory(backend, defaultOptions) {
    return function(url, options) {
      if (typeof url === 'string') {
        return httpRequest(backend, new static_request_1.Request(url, defaultOptions.merge(options)));
      } else if (url instanceof static_request_1.Request) {
        return httpRequest(backend, url);
      }
    };
  }
  exports.HttpFactory = HttpFactory;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/dist/rx", ["github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  "format cjs";
  (function(process) {
    ;
    (function(undefined) {
      var objectTypes = {
        'boolean': false,
        'function': true,
        'object': true,
        'number': false,
        'string': false,
        'undefined': false
      };
      var root = (objectTypes[typeof window] && window) || this,
          freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
          freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
          moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
          freeGlobal = objectTypes[typeof global] && global;
      if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        root = freeGlobal;
      }
      var Rx = {
        internals: {},
        config: {Promise: root.Promise},
        helpers: {}
      };
      var noop = Rx.helpers.noop = function() {},
          notDefined = Rx.helpers.notDefined = function(x) {
            return typeof x === 'undefined';
          },
          isScheduler = Rx.helpers.isScheduler = function(x) {
            return x instanceof Rx.Scheduler;
          },
          identity = Rx.helpers.identity = function(x) {
            return x;
          },
          pluck = Rx.helpers.pluck = function(property) {
            return function(x) {
              return x[property];
            };
          },
          just = Rx.helpers.just = function(value) {
            return function() {
              return value;
            };
          },
          defaultNow = Rx.helpers.defaultNow = Date.now,
          defaultComparer = Rx.helpers.defaultComparer = function(x, y) {
            return isEqual(x, y);
          },
          defaultSubComparer = Rx.helpers.defaultSubComparer = function(x, y) {
            return x > y ? 1 : (x < y ? -1 : 0);
          },
          defaultKeySerializer = Rx.helpers.defaultKeySerializer = function(x) {
            return x.toString();
          },
          defaultError = Rx.helpers.defaultError = function(err) {
            throw err;
          },
          isPromise = Rx.helpers.isPromise = function(p) {
            return !!p && typeof p.then === 'function';
          },
          asArray = Rx.helpers.asArray = function() {
            return Array.prototype.slice.call(arguments);
          },
          not = Rx.helpers.not = function(a) {
            return !a;
          },
          isFunction = Rx.helpers.isFunction = (function() {
            var isFn = function(value) {
              return typeof value == 'function' || false;
            };
            if (isFn(/x/)) {
              isFn = function(value) {
                return typeof value == 'function' && toString.call(value) == '[object Function]';
              };
            }
            return isFn;
          }());
      function cloneArray(arr) {
        for (var a = [],
            i = 0,
            len = arr.length; i < len; i++) {
          a.push(arr[i]);
        }
        return a;
      }
      Rx.config.longStackSupport = false;
      var hasStacks = false;
      try {
        throw new Error();
      } catch (e) {
        hasStacks = !!e.stack;
      }
      var rStartingLine = captureLine(),
          rFileName;
      var STACK_JUMP_SEPARATOR = "From previous event:";
      function makeStackTraceLong(error, observable) {
        if (hasStacks && observable.stack && typeof error === "object" && error !== null && error.stack && error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1) {
          var stacks = [];
          for (var o = observable; !!o; o = o.source) {
            if (o.stack) {
              stacks.unshift(o.stack);
            }
          }
          stacks.unshift(error.stack);
          var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
          error.stack = filterStackString(concatedStacks);
        }
      }
      function filterStackString(stackString) {
        var lines = stackString.split("\n"),
            desiredLines = [];
        for (var i = 0,
            len = lines.length; i < len; i++) {
          var line = lines[i];
          if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
          }
        }
        return desiredLines.join("\n");
      }
      function isInternalFrame(stackLine) {
        var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
        if (!fileNameAndLineNumber) {
          return false;
        }
        var fileName = fileNameAndLineNumber[0],
            lineNumber = fileNameAndLineNumber[1];
        return fileName === rFileName && lineNumber >= rStartingLine && lineNumber <= rEndingLine;
      }
      function isNodeFrame(stackLine) {
        return stackLine.indexOf("(module.js:") !== -1 || stackLine.indexOf("(node.js:") !== -1;
      }
      function captureLine() {
        if (!hasStacks) {
          return ;
        }
        try {
          throw new Error();
        } catch (e) {
          var lines = e.stack.split("\n");
          var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
          var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
          if (!fileNameAndLineNumber) {
            return ;
          }
          rFileName = fileNameAndLineNumber[0];
          return fileNameAndLineNumber[1];
        }
      }
      function getFileNameAndLineNumber(stackLine) {
        var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
        if (attempt1) {
          return [attempt1[1], Number(attempt1[2])];
        }
        var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
        if (attempt2) {
          return [attempt2[1], Number(attempt2[2])];
        }
        var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
        if (attempt3) {
          return [attempt3[1], Number(attempt3[2])];
        }
      }
      var EmptyError = Rx.EmptyError = function() {
        this.message = 'Sequence contains no elements.';
        Error.call(this);
      };
      EmptyError.prototype = Error.prototype;
      var ObjectDisposedError = Rx.ObjectDisposedError = function() {
        this.message = 'Object has been disposed';
        Error.call(this);
      };
      ObjectDisposedError.prototype = Error.prototype;
      var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function() {
        this.message = 'Argument out of range';
        Error.call(this);
      };
      ArgumentOutOfRangeError.prototype = Error.prototype;
      var NotSupportedError = Rx.NotSupportedError = function(message) {
        this.message = message || 'This operation is not supported';
        Error.call(this);
      };
      NotSupportedError.prototype = Error.prototype;
      var NotImplementedError = Rx.NotImplementedError = function(message) {
        this.message = message || 'This operation is not implemented';
        Error.call(this);
      };
      NotImplementedError.prototype = Error.prototype;
      var notImplemented = Rx.helpers.notImplemented = function() {
        throw new NotImplementedError();
      };
      var notSupported = Rx.helpers.notSupported = function() {
        throw new NotSupportedError();
      };
      var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) || '_es6shim_iterator_';
      if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
        $iterator$ = '@@iterator';
      }
      var doneEnumerator = Rx.doneEnumerator = {
        done: true,
        value: undefined
      };
      var isIterable = Rx.helpers.isIterable = function(o) {
        return o[$iterator$] !== undefined;
      };
      var isArrayLike = Rx.helpers.isArrayLike = function(o) {
        return o && o.length !== undefined;
      };
      Rx.helpers.iterator = $iterator$;
      var bindCallback = Rx.internals.bindCallback = function(func, thisArg, argCount) {
        if (typeof thisArg === 'undefined') {
          return func;
        }
        switch (argCount) {
          case 0:
            return function() {
              return func.call(thisArg);
            };
          case 1:
            return function(arg) {
              return func.call(thisArg, arg);
            };
          case 2:
            return function(value, index) {
              return func.call(thisArg, value, index);
            };
          case 3:
            return function(value, index, collection) {
              return func.call(thisArg, value, index, collection);
            };
        }
        return function() {
          return func.apply(thisArg, arguments);
        };
      };
      var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
          dontEnumsLength = dontEnums.length;
      var argsClass = '[object Arguments]',
          arrayClass = '[object Array]',
          boolClass = '[object Boolean]',
          dateClass = '[object Date]',
          errorClass = '[object Error]',
          funcClass = '[object Function]',
          numberClass = '[object Number]',
          objectClass = '[object Object]',
          regexpClass = '[object RegExp]',
          stringClass = '[object String]';
      var toString = Object.prototype.toString,
          hasOwnProperty = Object.prototype.hasOwnProperty,
          supportsArgsClass = toString.call(arguments) == argsClass,
          supportNodeClass,
          errorProto = Error.prototype,
          objectProto = Object.prototype,
          stringProto = String.prototype,
          propertyIsEnumerable = objectProto.propertyIsEnumerable;
      try {
        supportNodeClass = !(toString.call(document) == objectClass && !({'toString': 0} + ''));
      } catch (e) {
        supportNodeClass = true;
      }
      var nonEnumProps = {};
      nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = {
        'constructor': true,
        'toLocaleString': true,
        'toString': true,
        'valueOf': true
      };
      nonEnumProps[boolClass] = nonEnumProps[stringClass] = {
        'constructor': true,
        'toString': true,
        'valueOf': true
      };
      nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = {
        'constructor': true,
        'toString': true
      };
      nonEnumProps[objectClass] = {'constructor': true};
      var support = {};
      (function() {
        var ctor = function() {
          this.x = 1;
        },
            props = [];
        ctor.prototype = {
          'valueOf': 1,
          'y': 1
        };
        for (var key in new ctor) {
          props.push(key);
        }
        for (key in arguments) {}
        support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');
        support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');
        support.nonEnumArgs = key != 0;
        support.nonEnumShadows = !/valueOf/.test(props);
      }(1));
      var isObject = Rx.internals.isObject = function(value) {
        var type = typeof value;
        return value && (type == 'function' || type == 'object') || false;
      };
      function keysIn(object) {
        var result = [];
        if (!isObject(object)) {
          return result;
        }
        if (support.nonEnumArgs && object.length && isArguments(object)) {
          object = slice.call(object);
        }
        var skipProto = support.enumPrototypes && typeof object == 'function',
            skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);
        for (var key in object) {
          if (!(skipProto && key == 'prototype') && !(skipErrorProps && (key == 'message' || key == 'name'))) {
            result.push(key);
          }
        }
        if (support.nonEnumShadows && object !== objectProto) {
          var ctor = object.constructor,
              index = -1,
              length = dontEnumsLength;
          if (object === (ctor && ctor.prototype)) {
            var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
                nonEnum = nonEnumProps[className];
          }
          while (++index < length) {
            key = dontEnums[index];
            if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
              result.push(key);
            }
          }
        }
        return result;
      }
      function internalFor(object, callback, keysFunc) {
        var index = -1,
            props = keysFunc(object),
            length = props.length;
        while (++index < length) {
          var key = props[index];
          if (callback(object[key], key, object) === false) {
            break;
          }
        }
        return object;
      }
      function internalForIn(object, callback) {
        return internalFor(object, callback, keysIn);
      }
      function isNode(value) {
        return typeof value.toString != 'function' && typeof(value + '') == 'string';
      }
      var isArguments = function(value) {
        return (value && typeof value == 'object') ? toString.call(value) == argsClass : false;
      };
      if (!supportsArgsClass) {
        isArguments = function(value) {
          return (value && typeof value == 'object') ? hasOwnProperty.call(value, 'callee') : false;
        };
      }
      var isEqual = Rx.internals.isEqual = function(x, y) {
        return deepEquals(x, y, [], []);
      };
      function deepEquals(a, b, stackA, stackB) {
        if (a === b) {
          return a !== 0 || (1 / a == 1 / b);
        }
        var type = typeof a,
            otherType = typeof b;
        if (a === a && (a == null || b == null || (type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object'))) {
          return false;
        }
        var className = toString.call(a),
            otherClass = toString.call(b);
        if (className == argsClass) {
          className = objectClass;
        }
        if (otherClass == argsClass) {
          otherClass = objectClass;
        }
        if (className != otherClass) {
          return false;
        }
        switch (className) {
          case boolClass:
          case dateClass:
            return +a == +b;
          case numberClass:
            return (a != +a) ? b != +b : (a == 0 ? (1 / a == 1 / b) : a == +b);
          case regexpClass:
          case stringClass:
            return a == String(b);
        }
        var isArr = className == arrayClass;
        if (!isArr) {
          if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
            return false;
          }
          var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
              ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;
          if (ctorA != ctorB && !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && ('constructor' in a && 'constructor' in b)) {
            return false;
          }
        }
        var initedStack = !stackA;
        stackA || (stackA = []);
        stackB || (stackB = []);
        var length = stackA.length;
        while (length--) {
          if (stackA[length] == a) {
            return stackB[length] == b;
          }
        }
        var size = 0;
        var result = true;
        stackA.push(a);
        stackB.push(b);
        if (isArr) {
          length = a.length;
          size = b.length;
          result = size == length;
          if (result) {
            while (size--) {
              var index = length,
                  value = b[size];
              if (!(result = deepEquals(a[size], value, stackA, stackB))) {
                break;
              }
            }
          }
        } else {
          internalForIn(b, function(value, key, b) {
            if (hasOwnProperty.call(b, key)) {
              size++;
              return (result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB));
            }
          });
          if (result) {
            internalForIn(a, function(value, key, a) {
              if (hasOwnProperty.call(a, key)) {
                return (result = --size > -1);
              }
            });
          }
        }
        stackA.pop();
        stackB.pop();
        return result;
      }
      var hasProp = {}.hasOwnProperty,
          slice = Array.prototype.slice;
      var inherits = this.inherits = Rx.internals.inherits = function(child, parent) {
        function __() {
          this.constructor = child;
        }
        __.prototype = parent.prototype;
        child.prototype = new __();
      };
      var addProperties = Rx.internals.addProperties = function(obj) {
        for (var sources = [],
            i = 1,
            len = arguments.length; i < len; i++) {
          sources.push(arguments[i]);
        }
        for (var idx = 0,
            ln = sources.length; idx < ln; idx++) {
          var source = sources[idx];
          for (var prop in source) {
            obj[prop] = source[prop];
          }
        }
      };
      var addRef = Rx.internals.addRef = function(xs, r) {
        return new AnonymousObservable(function(observer) {
          return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
        });
      };
      function arrayInitialize(count, factory) {
        var a = new Array(count);
        for (var i = 0; i < count; i++) {
          a[i] = factory();
        }
        return a;
      }
      var errorObj = {e: {}};
      var tryCatchTarget;
      function tryCatcher() {
        try {
          return tryCatchTarget.apply(this, arguments);
        } catch (e) {
          errorObj.e = e;
          return errorObj;
        }
      }
      function tryCatch(fn) {
        if (!isFunction(fn)) {
          throw new TypeError('fn must be a function');
        }
        tryCatchTarget = fn;
        return tryCatcher;
      }
      function thrower(e) {
        throw e;
      }
      function IndexedItem(id, value) {
        this.id = id;
        this.value = value;
      }
      IndexedItem.prototype.compareTo = function(other) {
        var c = this.value.compareTo(other.value);
        c === 0 && (c = this.id - other.id);
        return c;
      };
      var PriorityQueue = Rx.internals.PriorityQueue = function(capacity) {
        this.items = new Array(capacity);
        this.length = 0;
      };
      var priorityProto = PriorityQueue.prototype;
      priorityProto.isHigherPriority = function(left, right) {
        return this.items[left].compareTo(this.items[right]) < 0;
      };
      priorityProto.percolate = function(index) {
        if (index >= this.length || index < 0) {
          return ;
        }
        var parent = index - 1 >> 1;
        if (parent < 0 || parent === index) {
          return ;
        }
        if (this.isHigherPriority(index, parent)) {
          var temp = this.items[index];
          this.items[index] = this.items[parent];
          this.items[parent] = temp;
          this.percolate(parent);
        }
      };
      priorityProto.heapify = function(index) {
        +index || (index = 0);
        if (index >= this.length || index < 0) {
          return ;
        }
        var left = 2 * index + 1,
            right = 2 * index + 2,
            first = index;
        if (left < this.length && this.isHigherPriority(left, first)) {
          first = left;
        }
        if (right < this.length && this.isHigherPriority(right, first)) {
          first = right;
        }
        if (first !== index) {
          var temp = this.items[index];
          this.items[index] = this.items[first];
          this.items[first] = temp;
          this.heapify(first);
        }
      };
      priorityProto.peek = function() {
        return this.items[0].value;
      };
      priorityProto.removeAt = function(index) {
        this.items[index] = this.items[--this.length];
        this.items[this.length] = undefined;
        this.heapify();
      };
      priorityProto.dequeue = function() {
        var result = this.peek();
        this.removeAt(0);
        return result;
      };
      priorityProto.enqueue = function(item) {
        var index = this.length++;
        this.items[index] = new IndexedItem(PriorityQueue.count++, item);
        this.percolate(index);
      };
      priorityProto.remove = function(item) {
        for (var i = 0; i < this.length; i++) {
          if (this.items[i].value === item) {
            this.removeAt(i);
            return true;
          }
        }
        return false;
      };
      PriorityQueue.count = 0;
      var CompositeDisposable = Rx.CompositeDisposable = function() {
        var args = [],
            i,
            len;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
          len = args.length;
        } else {
          len = arguments.length;
          args = new Array(len);
          for (i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        for (i = 0; i < len; i++) {
          if (!isDisposable(args[i])) {
            throw new TypeError('Not a disposable');
          }
        }
        this.disposables = args;
        this.isDisposed = false;
        this.length = args.length;
      };
      var CompositeDisposablePrototype = CompositeDisposable.prototype;
      CompositeDisposablePrototype.add = function(item) {
        if (this.isDisposed) {
          item.dispose();
        } else {
          this.disposables.push(item);
          this.length++;
        }
      };
      CompositeDisposablePrototype.remove = function(item) {
        var shouldDispose = false;
        if (!this.isDisposed) {
          var idx = this.disposables.indexOf(item);
          if (idx !== -1) {
            shouldDispose = true;
            this.disposables.splice(idx, 1);
            this.length--;
            item.dispose();
          }
        }
        return shouldDispose;
      };
      CompositeDisposablePrototype.dispose = function() {
        if (!this.isDisposed) {
          this.isDisposed = true;
          var len = this.disposables.length,
              currentDisposables = new Array(len);
          for (var i = 0; i < len; i++) {
            currentDisposables[i] = this.disposables[i];
          }
          this.disposables = [];
          this.length = 0;
          for (i = 0; i < len; i++) {
            currentDisposables[i].dispose();
          }
        }
      };
      var Disposable = Rx.Disposable = function(action) {
        this.isDisposed = false;
        this.action = action || noop;
      };
      Disposable.prototype.dispose = function() {
        if (!this.isDisposed) {
          this.action();
          this.isDisposed = true;
        }
      };
      var disposableCreate = Disposable.create = function(action) {
        return new Disposable(action);
      };
      var disposableEmpty = Disposable.empty = {dispose: noop};
      var isDisposable = Disposable.isDisposable = function(d) {
        return d && isFunction(d.dispose);
      };
      var checkDisposed = Disposable.checkDisposed = function(disposable) {
        if (disposable.isDisposed) {
          throw new ObjectDisposedError();
        }
      };
      var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = (function() {
        function BooleanDisposable() {
          this.isDisposed = false;
          this.current = null;
        }
        var booleanDisposablePrototype = BooleanDisposable.prototype;
        booleanDisposablePrototype.getDisposable = function() {
          return this.current;
        };
        booleanDisposablePrototype.setDisposable = function(value) {
          var shouldDispose = this.isDisposed;
          if (!shouldDispose) {
            var old = this.current;
            this.current = value;
          }
          old && old.dispose();
          shouldDispose && value && value.dispose();
        };
        booleanDisposablePrototype.dispose = function() {
          if (!this.isDisposed) {
            this.isDisposed = true;
            var old = this.current;
            this.current = null;
          }
          old && old.dispose();
        };
        return BooleanDisposable;
      }());
      var SerialDisposable = Rx.SerialDisposable = SingleAssignmentDisposable;
      var RefCountDisposable = Rx.RefCountDisposable = (function() {
        function InnerDisposable(disposable) {
          this.disposable = disposable;
          this.disposable.count++;
          this.isInnerDisposed = false;
        }
        InnerDisposable.prototype.dispose = function() {
          if (!this.disposable.isDisposed && !this.isInnerDisposed) {
            this.isInnerDisposed = true;
            this.disposable.count--;
            if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
              this.disposable.isDisposed = true;
              this.disposable.underlyingDisposable.dispose();
            }
          }
        };
        function RefCountDisposable(disposable) {
          this.underlyingDisposable = disposable;
          this.isDisposed = false;
          this.isPrimaryDisposed = false;
          this.count = 0;
        }
        RefCountDisposable.prototype.dispose = function() {
          if (!this.isDisposed && !this.isPrimaryDisposed) {
            this.isPrimaryDisposed = true;
            if (this.count === 0) {
              this.isDisposed = true;
              this.underlyingDisposable.dispose();
            }
          }
        };
        RefCountDisposable.prototype.getDisposable = function() {
          return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
        };
        return RefCountDisposable;
      })();
      function ScheduledDisposable(scheduler, disposable) {
        this.scheduler = scheduler;
        this.disposable = disposable;
        this.isDisposed = false;
      }
      function scheduleItem(s, self) {
        if (!self.isDisposed) {
          self.isDisposed = true;
          self.disposable.dispose();
        }
      }
      ScheduledDisposable.prototype.dispose = function() {
        this.scheduler.scheduleWithState(this, scheduleItem);
      };
      var ScheduledItem = Rx.internals.ScheduledItem = function(scheduler, state, action, dueTime, comparer) {
        this.scheduler = scheduler;
        this.state = state;
        this.action = action;
        this.dueTime = dueTime;
        this.comparer = comparer || defaultSubComparer;
        this.disposable = new SingleAssignmentDisposable();
      };
      ScheduledItem.prototype.invoke = function() {
        this.disposable.setDisposable(this.invokeCore());
      };
      ScheduledItem.prototype.compareTo = function(other) {
        return this.comparer(this.dueTime, other.dueTime);
      };
      ScheduledItem.prototype.isCancelled = function() {
        return this.disposable.isDisposed;
      };
      ScheduledItem.prototype.invokeCore = function() {
        return this.action(this.scheduler, this.state);
      };
      var Scheduler = Rx.Scheduler = (function() {
        function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
          this.now = now;
          this._schedule = schedule;
          this._scheduleRelative = scheduleRelative;
          this._scheduleAbsolute = scheduleAbsolute;
        }
        function invokeAction(scheduler, action) {
          action();
          return disposableEmpty;
        }
        var schedulerProto = Scheduler.prototype;
        schedulerProto.schedule = function(action) {
          return this._schedule(action, invokeAction);
        };
        schedulerProto.scheduleWithState = function(state, action) {
          return this._schedule(state, action);
        };
        schedulerProto.scheduleWithRelative = function(dueTime, action) {
          return this._scheduleRelative(action, dueTime, invokeAction);
        };
        schedulerProto.scheduleWithRelativeAndState = function(state, dueTime, action) {
          return this._scheduleRelative(state, dueTime, action);
        };
        schedulerProto.scheduleWithAbsolute = function(dueTime, action) {
          return this._scheduleAbsolute(action, dueTime, invokeAction);
        };
        schedulerProto.scheduleWithAbsoluteAndState = function(state, dueTime, action) {
          return this._scheduleAbsolute(state, dueTime, action);
        };
        Scheduler.now = defaultNow;
        Scheduler.normalize = function(timeSpan) {
          timeSpan < 0 && (timeSpan = 0);
          return timeSpan;
        };
        return Scheduler;
      }());
      var normalizeTime = Scheduler.normalize;
      (function(schedulerProto) {
        function invokeRecImmediate(scheduler, pair) {
          var state = pair[0],
              action = pair[1],
              group = new CompositeDisposable();
          function recursiveAction(state1) {
            action(state1, function(state2) {
              var isAdded = false,
                  isDone = false,
                  d = scheduler.scheduleWithState(state2, function(scheduler1, state3) {
                    if (isAdded) {
                      group.remove(d);
                    } else {
                      isDone = true;
                    }
                    recursiveAction(state3);
                    return disposableEmpty;
                  });
              if (!isDone) {
                group.add(d);
                isAdded = true;
              }
            });
          }
          recursiveAction(state);
          return group;
        }
        function invokeRecDate(scheduler, pair, method) {
          var state = pair[0],
              action = pair[1],
              group = new CompositeDisposable();
          function recursiveAction(state1) {
            action(state1, function(state2, dueTime1) {
              var isAdded = false,
                  isDone = false,
                  d = scheduler[method](state2, dueTime1, function(scheduler1, state3) {
                    if (isAdded) {
                      group.remove(d);
                    } else {
                      isDone = true;
                    }
                    recursiveAction(state3);
                    return disposableEmpty;
                  });
              if (!isDone) {
                group.add(d);
                isAdded = true;
              }
            });
          }
          ;
          recursiveAction(state);
          return group;
        }
        function scheduleInnerRecursive(action, self) {
          action(function(dt) {
            self(action, dt);
          });
        }
        schedulerProto.scheduleRecursive = function(action) {
          return this.scheduleRecursiveWithState(action, function(_action, self) {
            _action(function() {
              self(_action);
            });
          });
        };
        schedulerProto.scheduleRecursiveWithState = function(state, action) {
          return this.scheduleWithState([state, action], invokeRecImmediate);
        };
        schedulerProto.scheduleRecursiveWithRelative = function(dueTime, action) {
          return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
        };
        schedulerProto.scheduleRecursiveWithRelativeAndState = function(state, dueTime, action) {
          return this._scheduleRelative([state, action], dueTime, function(s, p) {
            return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
          });
        };
        schedulerProto.scheduleRecursiveWithAbsolute = function(dueTime, action) {
          return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
        };
        schedulerProto.scheduleRecursiveWithAbsoluteAndState = function(state, dueTime, action) {
          return this._scheduleAbsolute([state, action], dueTime, function(s, p) {
            return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
          });
        };
      }(Scheduler.prototype));
      (function(schedulerProto) {
        Scheduler.prototype.schedulePeriodic = function(period, action) {
          return this.schedulePeriodicWithState(null, period, action);
        };
        Scheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
          if (typeof root.setInterval === 'undefined') {
            throw new NotSupportedError();
          }
          period = normalizeTime(period);
          var s = state,
              id = root.setInterval(function() {
                s = action(s);
              }, period);
          return disposableCreate(function() {
            root.clearInterval(id);
          });
        };
      }(Scheduler.prototype));
      (function(schedulerProto) {
        schedulerProto.catchError = schedulerProto['catch'] = function(handler) {
          return new CatchScheduler(this, handler);
        };
      }(Scheduler.prototype));
      var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function() {
        function tick(command, recurse) {
          recurse(0, this._period);
          try {
            this._state = this._action(this._state);
          } catch (e) {
            this._cancel.dispose();
            throw e;
          }
        }
        function SchedulePeriodicRecursive(scheduler, state, period, action) {
          this._scheduler = scheduler;
          this._state = state;
          this._period = period;
          this._action = action;
        }
        SchedulePeriodicRecursive.prototype.start = function() {
          var d = new SingleAssignmentDisposable();
          this._cancel = d;
          d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));
          return d;
        };
        return SchedulePeriodicRecursive;
      }());
      var immediateScheduler = Scheduler.immediate = (function() {
        function scheduleNow(state, action) {
          return action(this, state);
        }
        return new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
      }());
      var currentThreadScheduler = Scheduler.currentThread = (function() {
        var queue;
        function runTrampoline() {
          while (queue.length > 0) {
            var item = queue.dequeue();
            !item.isCancelled() && item.invoke();
          }
        }
        function scheduleNow(state, action) {
          var si = new ScheduledItem(this, state, action, this.now());
          if (!queue) {
            queue = new PriorityQueue(4);
            queue.enqueue(si);
            var result = tryCatch(runTrampoline)();
            queue = null;
            if (result === errorObj) {
              return thrower(result.e);
            }
          } else {
            queue.enqueue(si);
          }
          return si.disposable;
        }
        var currentScheduler = new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
        currentScheduler.scheduleRequired = function() {
          return !queue;
        };
        return currentScheduler;
      }());
      var scheduleMethod,
          clearMethod;
      var localTimer = (function() {
        var localSetTimeout,
            localClearTimeout = noop;
        if (!!root.WScript) {
          localSetTimeout = function(fn, time) {
            root.WScript.Sleep(time);
            fn();
          };
        } else if (!!root.setTimeout) {
          localSetTimeout = root.setTimeout;
          localClearTimeout = root.clearTimeout;
        } else {
          throw new NotSupportedError();
        }
        return {
          setTimeout: localSetTimeout,
          clearTimeout: localClearTimeout
        };
      }());
      var localSetTimeout = localTimer.setTimeout,
          localClearTimeout = localTimer.clearTimeout;
      (function() {
        var nextHandle = 1,
            tasksByHandle = {},
            currentlyRunning = false;
        clearMethod = function(handle) {
          delete tasksByHandle[handle];
        };
        function runTask(handle) {
          if (currentlyRunning) {
            localSetTimeout(function() {
              runTask(handle);
            }, 0);
          } else {
            var task = tasksByHandle[handle];
            if (task) {
              currentlyRunning = true;
              var result = tryCatch(task)();
              clearMethod(handle);
              currentlyRunning = false;
              if (result === errorObj) {
                return thrower(result.e);
              }
            }
          }
        }
        var reNative = RegExp('^' + String(toString).replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/toString| for [^\]]+/g, '.*?') + '$');
        var setImmediate = typeof(setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' && !reNative.test(setImmediate) && setImmediate;
        function postMessageSupported() {
          if (!root.postMessage || root.importScripts) {
            return false;
          }
          var isAsync = false,
              oldHandler = root.onmessage;
          root.onmessage = function() {
            isAsync = true;
          };
          root.postMessage('', '*');
          root.onmessage = oldHandler;
          return isAsync;
        }
        if (isFunction(setImmediate)) {
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            setImmediate(function() {
              runTask(id);
            });
            return id;
          };
        } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            process.nextTick(function() {
              runTask(id);
            });
            return id;
          };
        } else if (postMessageSupported()) {
          var MSG_PREFIX = 'ms.rx.schedule' + Math.random();
          function onGlobalPostMessage(event) {
            if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
              runTask(event.data.substring(MSG_PREFIX.length));
            }
          }
          if (root.addEventListener) {
            root.addEventListener('message', onGlobalPostMessage, false);
          } else {
            root.attachEvent('onmessage', onGlobalPostMessage, false);
          }
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            root.postMessage(MSG_PREFIX + currentId, '*');
            return id;
          };
        } else if (!!root.MessageChannel) {
          var channel = new root.MessageChannel();
          channel.port1.onmessage = function(e) {
            runTask(e.data);
          };
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            channel.port2.postMessage(id);
            return id;
          };
        } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {
          scheduleMethod = function(action) {
            var scriptElement = root.document.createElement('script');
            var id = nextHandle++;
            tasksByHandle[id] = action;
            scriptElement.onreadystatechange = function() {
              runTask(id);
              scriptElement.onreadystatechange = null;
              scriptElement.parentNode.removeChild(scriptElement);
              scriptElement = null;
            };
            root.document.documentElement.appendChild(scriptElement);
            return id;
          };
        } else {
          scheduleMethod = function(action) {
            var id = nextHandle++;
            tasksByHandle[id] = action;
            localSetTimeout(function() {
              runTask(id);
            }, 0);
            return id;
          };
        }
      }());
      var timeoutScheduler = Scheduler.timeout = Scheduler.default = (function() {
        function scheduleNow(state, action) {
          var scheduler = this,
              disposable = new SingleAssignmentDisposable();
          var id = scheduleMethod(function() {
            if (!disposable.isDisposed) {
              disposable.setDisposable(action(scheduler, state));
            }
          });
          return new CompositeDisposable(disposable, disposableCreate(function() {
            clearMethod(id);
          }));
        }
        function scheduleRelative(state, dueTime, action) {
          var scheduler = this,
              dt = Scheduler.normalize(dueTime);
          if (dt === 0) {
            return scheduler.scheduleWithState(state, action);
          }
          var disposable = new SingleAssignmentDisposable();
          var id = localSetTimeout(function() {
            if (!disposable.isDisposed) {
              disposable.setDisposable(action(scheduler, state));
            }
          }, dt);
          return new CompositeDisposable(disposable, disposableCreate(function() {
            localClearTimeout(id);
          }));
        }
        function scheduleAbsolute(state, dueTime, action) {
          return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
        }
        return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
      })();
      var CatchScheduler = (function(__super__) {
        function scheduleNow(state, action) {
          return this._scheduler.scheduleWithState(state, this._wrap(action));
        }
        function scheduleRelative(state, dueTime, action) {
          return this._scheduler.scheduleWithRelativeAndState(state, dueTime, this._wrap(action));
        }
        function scheduleAbsolute(state, dueTime, action) {
          return this._scheduler.scheduleWithAbsoluteAndState(state, dueTime, this._wrap(action));
        }
        inherits(CatchScheduler, __super__);
        function CatchScheduler(scheduler, handler) {
          this._scheduler = scheduler;
          this._handler = handler;
          this._recursiveOriginal = null;
          this._recursiveWrapper = null;
          __super__.call(this, this._scheduler.now.bind(this._scheduler), scheduleNow, scheduleRelative, scheduleAbsolute);
        }
        CatchScheduler.prototype._clone = function(scheduler) {
          return new CatchScheduler(scheduler, this._handler);
        };
        CatchScheduler.prototype._wrap = function(action) {
          var parent = this;
          return function(self, state) {
            try {
              return action(parent._getRecursiveWrapper(self), state);
            } catch (e) {
              if (!parent._handler(e)) {
                throw e;
              }
              return disposableEmpty;
            }
          };
        };
        CatchScheduler.prototype._getRecursiveWrapper = function(scheduler) {
          if (this._recursiveOriginal !== scheduler) {
            this._recursiveOriginal = scheduler;
            var wrapper = this._clone(scheduler);
            wrapper._recursiveOriginal = scheduler;
            wrapper._recursiveWrapper = wrapper;
            this._recursiveWrapper = wrapper;
          }
          return this._recursiveWrapper;
        };
        CatchScheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
          var self = this,
              failed = false,
              d = new SingleAssignmentDisposable();
          d.setDisposable(this._scheduler.schedulePeriodicWithState(state, period, function(state1) {
            if (failed) {
              return null;
            }
            try {
              return action(state1);
            } catch (e) {
              failed = true;
              if (!self._handler(e)) {
                throw e;
              }
              d.dispose();
              return null;
            }
          }));
          return d;
        };
        return CatchScheduler;
      }(Scheduler));
      var Notification = Rx.Notification = (function() {
        function Notification(kind, value, exception, accept, acceptObservable, toString) {
          this.kind = kind;
          this.value = value;
          this.exception = exception;
          this._accept = accept;
          this._acceptObservable = acceptObservable;
          this.toString = toString;
        }
        Notification.prototype.accept = function(observerOrOnNext, onError, onCompleted) {
          return observerOrOnNext && typeof observerOrOnNext === 'object' ? this._acceptObservable(observerOrOnNext) : this._accept(observerOrOnNext, onError, onCompleted);
        };
        Notification.prototype.toObservable = function(scheduler) {
          var self = this;
          isScheduler(scheduler) || (scheduler = immediateScheduler);
          return new AnonymousObservable(function(observer) {
            return scheduler.scheduleWithState(self, function(_, notification) {
              notification._acceptObservable(observer);
              notification.kind === 'N' && observer.onCompleted();
            });
          });
        };
        return Notification;
      })();
      var notificationCreateOnNext = Notification.createOnNext = (function() {
        function _accept(onNext) {
          return onNext(this.value);
        }
        function _acceptObservable(observer) {
          return observer.onNext(this.value);
        }
        function toString() {
          return 'OnNext(' + this.value + ')';
        }
        return function(value) {
          return new Notification('N', value, null, _accept, _acceptObservable, toString);
        };
      }());
      var notificationCreateOnError = Notification.createOnError = (function() {
        function _accept(onNext, onError) {
          return onError(this.exception);
        }
        function _acceptObservable(observer) {
          return observer.onError(this.exception);
        }
        function toString() {
          return 'OnError(' + this.exception + ')';
        }
        return function(e) {
          return new Notification('E', null, e, _accept, _acceptObservable, toString);
        };
      }());
      var notificationCreateOnCompleted = Notification.createOnCompleted = (function() {
        function _accept(onNext, onError, onCompleted) {
          return onCompleted();
        }
        function _acceptObservable(observer) {
          return observer.onCompleted();
        }
        function toString() {
          return 'OnCompleted()';
        }
        return function() {
          return new Notification('C', null, null, _accept, _acceptObservable, toString);
        };
      }());
      var Enumerator = Rx.internals.Enumerator = function(next) {
        this._next = next;
      };
      Enumerator.prototype.next = function() {
        return this._next();
      };
      Enumerator.prototype[$iterator$] = function() {
        return this;
      };
      var Enumerable = Rx.internals.Enumerable = function(iterator) {
        this._iterator = iterator;
      };
      Enumerable.prototype[$iterator$] = function() {
        return this._iterator();
      };
      Enumerable.prototype.concat = function() {
        var sources = this;
        return new AnonymousObservable(function(o) {
          var e = sources[$iterator$]();
          var isDisposed,
              subscription = new SerialDisposable();
          var cancelable = immediateScheduler.scheduleRecursive(function(self) {
            if (isDisposed) {
              return ;
            }
            try {
              var currentItem = e.next();
            } catch (ex) {
              return o.onError(ex);
            }
            if (currentItem.done) {
              return o.onCompleted();
            }
            var currentValue = currentItem.value;
            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
            var d = new SingleAssignmentDisposable();
            subscription.setDisposable(d);
            d.setDisposable(currentValue.subscribe(function(x) {
              o.onNext(x);
            }, function(err) {
              o.onError(err);
            }, self));
          });
          return new CompositeDisposable(subscription, cancelable, disposableCreate(function() {
            isDisposed = true;
          }));
        });
      };
      Enumerable.prototype.catchError = function() {
        var sources = this;
        return new AnonymousObservable(function(o) {
          var e = sources[$iterator$]();
          var isDisposed,
              subscription = new SerialDisposable();
          var cancelable = immediateScheduler.scheduleRecursiveWithState(null, function(lastException, self) {
            if (isDisposed) {
              return ;
            }
            try {
              var currentItem = e.next();
            } catch (ex) {
              return observer.onError(ex);
            }
            if (currentItem.done) {
              if (lastException !== null) {
                o.onError(lastException);
              } else {
                o.onCompleted();
              }
              return ;
            }
            var currentValue = currentItem.value;
            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
            var d = new SingleAssignmentDisposable();
            subscription.setDisposable(d);
            d.setDisposable(currentValue.subscribe(function(x) {
              o.onNext(x);
            }, self, function() {
              o.onCompleted();
            }));
          });
          return new CompositeDisposable(subscription, cancelable, disposableCreate(function() {
            isDisposed = true;
          }));
        });
      };
      Enumerable.prototype.catchErrorWhen = function(notificationHandler) {
        var sources = this;
        return new AnonymousObservable(function(o) {
          var exceptions = new Subject(),
              notifier = new Subject(),
              handled = notificationHandler(exceptions),
              notificationDisposable = handled.subscribe(notifier);
          var e = sources[$iterator$]();
          var isDisposed,
              lastException,
              subscription = new SerialDisposable();
          var cancelable = immediateScheduler.scheduleRecursive(function(self) {
            if (isDisposed) {
              return ;
            }
            try {
              var currentItem = e.next();
            } catch (ex) {
              return o.onError(ex);
            }
            if (currentItem.done) {
              if (lastException) {
                o.onError(lastException);
              } else {
                o.onCompleted();
              }
              return ;
            }
            var currentValue = currentItem.value;
            isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
            var outer = new SingleAssignmentDisposable();
            var inner = new SingleAssignmentDisposable();
            subscription.setDisposable(new CompositeDisposable(inner, outer));
            outer.setDisposable(currentValue.subscribe(function(x) {
              o.onNext(x);
            }, function(exn) {
              inner.setDisposable(notifier.subscribe(self, function(ex) {
                o.onError(ex);
              }, function() {
                o.onCompleted();
              }));
              exceptions.onNext(exn);
            }, function() {
              o.onCompleted();
            }));
          });
          return new CompositeDisposable(notificationDisposable, subscription, cancelable, disposableCreate(function() {
            isDisposed = true;
          }));
        });
      };
      var enumerableRepeat = Enumerable.repeat = function(value, repeatCount) {
        if (repeatCount == null) {
          repeatCount = -1;
        }
        return new Enumerable(function() {
          var left = repeatCount;
          return new Enumerator(function() {
            if (left === 0) {
              return doneEnumerator;
            }
            if (left > 0) {
              left--;
            }
            return {
              done: false,
              value: value
            };
          });
        });
      };
      var enumerableOf = Enumerable.of = function(source, selector, thisArg) {
        if (selector) {
          var selectorFn = bindCallback(selector, thisArg, 3);
        }
        return new Enumerable(function() {
          var index = -1;
          return new Enumerator(function() {
            return ++index < source.length ? {
              done: false,
              value: !selector ? source[index] : selectorFn(source[index], index, source)
            } : doneEnumerator;
          });
        });
      };
      var Observer = Rx.Observer = function() {};
      Observer.prototype.toNotifier = function() {
        var observer = this;
        return function(n) {
          return n.accept(observer);
        };
      };
      Observer.prototype.asObserver = function() {
        return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
      };
      Observer.prototype.checked = function() {
        return new CheckedObserver(this);
      };
      var observerCreate = Observer.create = function(onNext, onError, onCompleted) {
        onNext || (onNext = noop);
        onError || (onError = defaultError);
        onCompleted || (onCompleted = noop);
        return new AnonymousObserver(onNext, onError, onCompleted);
      };
      Observer.fromNotifier = function(handler, thisArg) {
        return new AnonymousObserver(function(x) {
          return handler.call(thisArg, notificationCreateOnNext(x));
        }, function(e) {
          return handler.call(thisArg, notificationCreateOnError(e));
        }, function() {
          return handler.call(thisArg, notificationCreateOnCompleted());
        });
      };
      Observer.prototype.notifyOn = function(scheduler) {
        return new ObserveOnObserver(scheduler, this);
      };
      Observer.prototype.makeSafe = function(disposable) {
        return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
      };
      var AbstractObserver = Rx.internals.AbstractObserver = (function(__super__) {
        inherits(AbstractObserver, __super__);
        function AbstractObserver() {
          this.isStopped = false;
          __super__.call(this);
        }
        AbstractObserver.prototype.next = notImplemented;
        AbstractObserver.prototype.error = notImplemented;
        AbstractObserver.prototype.completed = notImplemented;
        AbstractObserver.prototype.onNext = function(value) {
          if (!this.isStopped) {
            this.next(value);
          }
        };
        AbstractObserver.prototype.onError = function(error) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.error(error);
          }
        };
        AbstractObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            this.completed();
          }
        };
        AbstractObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        AbstractObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.error(e);
            return true;
          }
          return false;
        };
        return AbstractObserver;
      }(Observer));
      var AnonymousObserver = Rx.AnonymousObserver = (function(__super__) {
        inherits(AnonymousObserver, __super__);
        function AnonymousObserver(onNext, onError, onCompleted) {
          __super__.call(this);
          this._onNext = onNext;
          this._onError = onError;
          this._onCompleted = onCompleted;
        }
        AnonymousObserver.prototype.next = function(value) {
          this._onNext(value);
        };
        AnonymousObserver.prototype.error = function(error) {
          this._onError(error);
        };
        AnonymousObserver.prototype.completed = function() {
          this._onCompleted();
        };
        return AnonymousObserver;
      }(AbstractObserver));
      var CheckedObserver = (function(__super__) {
        inherits(CheckedObserver, __super__);
        function CheckedObserver(observer) {
          __super__.call(this);
          this._observer = observer;
          this._state = 0;
        }
        var CheckedObserverPrototype = CheckedObserver.prototype;
        CheckedObserverPrototype.onNext = function(value) {
          this.checkAccess();
          var res = tryCatch(this._observer.onNext).call(this._observer, value);
          this._state = 0;
          res === errorObj && thrower(res.e);
        };
        CheckedObserverPrototype.onError = function(err) {
          this.checkAccess();
          var res = tryCatch(this._observer.onError).call(this._observer, err);
          this._state = 2;
          res === errorObj && thrower(res.e);
        };
        CheckedObserverPrototype.onCompleted = function() {
          this.checkAccess();
          var res = tryCatch(this._observer.onCompleted).call(this._observer);
          this._state = 2;
          res === errorObj && thrower(res.e);
        };
        CheckedObserverPrototype.checkAccess = function() {
          if (this._state === 1) {
            throw new Error('Re-entrancy detected');
          }
          if (this._state === 2) {
            throw new Error('Observer completed');
          }
          if (this._state === 0) {
            this._state = 1;
          }
        };
        return CheckedObserver;
      }(Observer));
      var ScheduledObserver = Rx.internals.ScheduledObserver = (function(__super__) {
        inherits(ScheduledObserver, __super__);
        function ScheduledObserver(scheduler, observer) {
          __super__.call(this);
          this.scheduler = scheduler;
          this.observer = observer;
          this.isAcquired = false;
          this.hasFaulted = false;
          this.queue = [];
          this.disposable = new SerialDisposable();
        }
        ScheduledObserver.prototype.next = function(value) {
          var self = this;
          this.queue.push(function() {
            self.observer.onNext(value);
          });
        };
        ScheduledObserver.prototype.error = function(e) {
          var self = this;
          this.queue.push(function() {
            self.observer.onError(e);
          });
        };
        ScheduledObserver.prototype.completed = function() {
          var self = this;
          this.queue.push(function() {
            self.observer.onCompleted();
          });
        };
        ScheduledObserver.prototype.ensureActive = function() {
          var isOwner = false,
              parent = this;
          if (!this.hasFaulted && this.queue.length > 0) {
            isOwner = !this.isAcquired;
            this.isAcquired = true;
          }
          if (isOwner) {
            this.disposable.setDisposable(this.scheduler.scheduleRecursive(function(self) {
              var work;
              if (parent.queue.length > 0) {
                work = parent.queue.shift();
              } else {
                parent.isAcquired = false;
                return ;
              }
              try {
                work();
              } catch (ex) {
                parent.queue = [];
                parent.hasFaulted = true;
                throw ex;
              }
              self();
            }));
          }
        };
        ScheduledObserver.prototype.dispose = function() {
          __super__.prototype.dispose.call(this);
          this.disposable.dispose();
        };
        return ScheduledObserver;
      }(AbstractObserver));
      var ObserveOnObserver = (function(__super__) {
        inherits(ObserveOnObserver, __super__);
        function ObserveOnObserver(scheduler, observer, cancel) {
          __super__.call(this, scheduler, observer);
          this._cancel = cancel;
        }
        ObserveOnObserver.prototype.next = function(value) {
          __super__.prototype.next.call(this, value);
          this.ensureActive();
        };
        ObserveOnObserver.prototype.error = function(e) {
          __super__.prototype.error.call(this, e);
          this.ensureActive();
        };
        ObserveOnObserver.prototype.completed = function() {
          __super__.prototype.completed.call(this);
          this.ensureActive();
        };
        ObserveOnObserver.prototype.dispose = function() {
          __super__.prototype.dispose.call(this);
          this._cancel && this._cancel.dispose();
          this._cancel = null;
        };
        return ObserveOnObserver;
      })(ScheduledObserver);
      var observableProto;
      var Observable = Rx.Observable = (function() {
        function Observable(subscribe) {
          if (Rx.config.longStackSupport && hasStacks) {
            try {
              throw new Error();
            } catch (e) {
              this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
            }
            var self = this;
            this._subscribe = function(observer) {
              var oldOnError = observer.onError.bind(observer);
              observer.onError = function(err) {
                makeStackTraceLong(err, self);
                oldOnError(err);
              };
              return subscribe.call(self, observer);
            };
          } else {
            this._subscribe = subscribe;
          }
        }
        observableProto = Observable.prototype;
        observableProto.subscribe = observableProto.forEach = function(observerOrOnNext, onError, onCompleted) {
          return this._subscribe(typeof observerOrOnNext === 'object' ? observerOrOnNext : observerCreate(observerOrOnNext, onError, onCompleted));
        };
        observableProto.subscribeOnNext = function(onNext, thisArg) {
          return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) {
            onNext.call(thisArg, x);
          } : onNext));
        };
        observableProto.subscribeOnError = function(onError, thisArg) {
          return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) {
            onError.call(thisArg, e);
          } : onError));
        };
        observableProto.subscribeOnCompleted = function(onCompleted, thisArg) {
          return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() {
            onCompleted.call(thisArg);
          } : onCompleted));
        };
        return Observable;
      })();
      var ObservableBase = Rx.ObservableBase = (function(__super__) {
        inherits(ObservableBase, __super__);
        function fixSubscriber(subscriber) {
          return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
        }
        function setDisposable(s, state) {
          var ado = state[0],
              self = state[1];
          var sub = tryCatch(self.subscribeCore).call(self, ado);
          if (sub === errorObj) {
            if (!ado.fail(errorObj.e)) {
              return thrower(errorObj.e);
            }
          }
          ado.setDisposable(fixSubscriber(sub));
        }
        function subscribe(observer) {
          var ado = new AutoDetachObserver(observer),
              state = [ado, this];
          if (currentThreadScheduler.scheduleRequired()) {
            currentThreadScheduler.scheduleWithState(state, setDisposable);
          } else {
            setDisposable(null, state);
          }
          return ado;
        }
        function ObservableBase() {
          __super__.call(this, subscribe);
        }
        ObservableBase.prototype.subscribeCore = notImplemented;
        return ObservableBase;
      }(Observable));
      observableProto.observeOn = function(scheduler) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          return source.subscribe(new ObserveOnObserver(scheduler, observer));
        }, source);
      };
      observableProto.subscribeOn = function(scheduler) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var m = new SingleAssignmentDisposable(),
              d = new SerialDisposable();
          d.setDisposable(m);
          m.setDisposable(scheduler.schedule(function() {
            d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
          }));
          return d;
        }, source);
      };
      var observableFromPromise = Observable.fromPromise = function(promise) {
        return observableDefer(function() {
          var subject = new Rx.AsyncSubject();
          promise.then(function(value) {
            subject.onNext(value);
            subject.onCompleted();
          }, subject.onError.bind(subject));
          return subject;
        });
      };
      observableProto.toPromise = function(promiseCtor) {
        promiseCtor || (promiseCtor = Rx.config.Promise);
        if (!promiseCtor) {
          throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise');
        }
        var source = this;
        return new promiseCtor(function(resolve, reject) {
          var value,
              hasValue = false;
          source.subscribe(function(v) {
            value = v;
            hasValue = true;
          }, reject, function() {
            hasValue && resolve(value);
          });
        });
      };
      var ToArrayObservable = (function(__super__) {
        inherits(ToArrayObservable, __super__);
        function ToArrayObservable(source) {
          this.source = source;
          __super__.call(this);
        }
        ToArrayObservable.prototype.subscribeCore = function(observer) {
          return this.source.subscribe(new ToArrayObserver(observer));
        };
        return ToArrayObservable;
      }(ObservableBase));
      function ToArrayObserver(observer) {
        this.observer = observer;
        this.a = [];
        this.isStopped = false;
      }
      ToArrayObserver.prototype.onNext = function(x) {
        if (!this.isStopped) {
          this.a.push(x);
        }
      };
      ToArrayObserver.prototype.onError = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
        }
      };
      ToArrayObserver.prototype.onCompleted = function() {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onNext(this.a);
          this.observer.onCompleted();
        }
      };
      ToArrayObserver.prototype.dispose = function() {
        this.isStopped = true;
      };
      ToArrayObserver.prototype.fail = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
          return true;
        }
        return false;
      };
      observableProto.toArray = function() {
        return new ToArrayObservable(this);
      };
      Observable.create = Observable.createWithDisposable = function(subscribe, parent) {
        return new AnonymousObservable(subscribe, parent);
      };
      var observableDefer = Observable.defer = function(observableFactory) {
        return new AnonymousObservable(function(observer) {
          var result;
          try {
            result = observableFactory();
          } catch (e) {
            return observableThrow(e).subscribe(observer);
          }
          isPromise(result) && (result = observableFromPromise(result));
          return result.subscribe(observer);
        });
      };
      var observableEmpty = Observable.empty = function(scheduler) {
        isScheduler(scheduler) || (scheduler = immediateScheduler);
        return new AnonymousObservable(function(observer) {
          return scheduler.scheduleWithState(null, function() {
            observer.onCompleted();
          });
        });
      };
      var FromObservable = (function(__super__) {
        inherits(FromObservable, __super__);
        function FromObservable(iterable, mapper, scheduler) {
          this.iterable = iterable;
          this.mapper = mapper;
          this.scheduler = scheduler;
          __super__.call(this);
        }
        FromObservable.prototype.subscribeCore = function(observer) {
          var sink = new FromSink(observer, this);
          return sink.run();
        };
        return FromObservable;
      }(ObservableBase));
      var FromSink = (function() {
        function FromSink(observer, parent) {
          this.observer = observer;
          this.parent = parent;
        }
        FromSink.prototype.run = function() {
          var list = Object(this.parent.iterable),
              it = getIterable(list),
              observer = this.observer,
              mapper = this.parent.mapper;
          function loopRecursive(i, recurse) {
            try {
              var next = it.next();
            } catch (e) {
              return observer.onError(e);
            }
            if (next.done) {
              return observer.onCompleted();
            }
            var result = next.value;
            if (mapper) {
              try {
                result = mapper(result, i);
              } catch (e) {
                return observer.onError(e);
              }
            }
            observer.onNext(result);
            recurse(i + 1);
          }
          return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
        };
        return FromSink;
      }());
      var maxSafeInteger = Math.pow(2, 53) - 1;
      function StringIterable(str) {
        this._s = s;
      }
      StringIterable.prototype[$iterator$] = function() {
        return new StringIterator(this._s);
      };
      function StringIterator(str) {
        this._s = s;
        this._l = s.length;
        this._i = 0;
      }
      StringIterator.prototype[$iterator$] = function() {
        return this;
      };
      StringIterator.prototype.next = function() {
        return this._i < this._l ? {
          done: false,
          value: this._s.charAt(this._i++)
        } : doneEnumerator;
      };
      function ArrayIterable(a) {
        this._a = a;
      }
      ArrayIterable.prototype[$iterator$] = function() {
        return new ArrayIterator(this._a);
      };
      function ArrayIterator(a) {
        this._a = a;
        this._l = toLength(a);
        this._i = 0;
      }
      ArrayIterator.prototype[$iterator$] = function() {
        return this;
      };
      ArrayIterator.prototype.next = function() {
        return this._i < this._l ? {
          done: false,
          value: this._a[this._i++]
        } : doneEnumerator;
      };
      function numberIsFinite(value) {
        return typeof value === 'number' && root.isFinite(value);
      }
      function isNan(n) {
        return n !== n;
      }
      function getIterable(o) {
        var i = o[$iterator$],
            it;
        if (!i && typeof o === 'string') {
          it = new StringIterable(o);
          return it[$iterator$]();
        }
        if (!i && o.length !== undefined) {
          it = new ArrayIterable(o);
          return it[$iterator$]();
        }
        if (!i) {
          throw new TypeError('Object is not iterable');
        }
        return o[$iterator$]();
      }
      function sign(value) {
        var number = +value;
        if (number === 0) {
          return number;
        }
        if (isNaN(number)) {
          return number;
        }
        return number < 0 ? -1 : 1;
      }
      function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
          return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
          return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
          return 0;
        }
        if (len > maxSafeInteger) {
          return maxSafeInteger;
        }
        return len;
      }
      var observableFrom = Observable.from = function(iterable, mapFn, thisArg, scheduler) {
        if (iterable == null) {
          throw new Error('iterable cannot be null.');
        }
        if (mapFn && !isFunction(mapFn)) {
          throw new Error('mapFn when provided must be a function');
        }
        if (mapFn) {
          var mapper = bindCallback(mapFn, thisArg, 2);
        }
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new FromObservable(iterable, mapper, scheduler);
      };
      var FromArrayObservable = (function(__super__) {
        inherits(FromArrayObservable, __super__);
        function FromArrayObservable(args, scheduler) {
          this.args = args;
          this.scheduler = scheduler;
          __super__.call(this);
        }
        FromArrayObservable.prototype.subscribeCore = function(observer) {
          var sink = new FromArraySink(observer, this);
          return sink.run();
        };
        return FromArrayObservable;
      }(ObservableBase));
      function FromArraySink(observer, parent) {
        this.observer = observer;
        this.parent = parent;
      }
      FromArraySink.prototype.run = function() {
        var observer = this.observer,
            args = this.parent.args,
            len = args.length;
        function loopRecursive(i, recurse) {
          if (i < len) {
            observer.onNext(args[i]);
            recurse(i + 1);
          } else {
            observer.onCompleted();
          }
        }
        return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
      };
      var observableFromArray = Observable.fromArray = function(array, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new FromArrayObservable(array, scheduler);
      };
      Observable.generate = function(initialState, condition, iterate, resultSelector, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new AnonymousObservable(function(o) {
          var first = true;
          return scheduler.scheduleRecursiveWithState(initialState, function(state, self) {
            var hasResult,
                result;
            try {
              if (first) {
                first = false;
              } else {
                state = iterate(state);
              }
              hasResult = condition(state);
              hasResult && (result = resultSelector(state));
            } catch (e) {
              return o.onError(e);
            }
            if (hasResult) {
              o.onNext(result);
              self(state);
            } else {
              o.onCompleted();
            }
          });
        });
      };
      var observableNever = Observable.never = function() {
        return new AnonymousObservable(function() {
          return disposableEmpty;
        });
      };
      function observableOf(scheduler, array) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new FromArrayObservable(array, scheduler);
      }
      Observable.of = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        return new FromArrayObservable(args, currentThreadScheduler);
      };
      Observable.ofWithScheduler = function(scheduler) {
        var len = arguments.length,
            args = new Array(len - 1);
        for (var i = 1; i < len; i++) {
          args[i - 1] = arguments[i];
        }
        return new FromArrayObservable(args, scheduler);
      };
      Observable.pairs = function(obj, scheduler) {
        scheduler || (scheduler = Rx.Scheduler.currentThread);
        return new AnonymousObservable(function(observer) {
          var keys = Object.keys(obj),
              len = keys.length;
          return scheduler.scheduleRecursiveWithState(0, function(idx, self) {
            if (idx < len) {
              var key = keys[idx];
              observer.onNext([key, obj[key]]);
              self(idx + 1);
            } else {
              observer.onCompleted();
            }
          });
        });
      };
      var RangeObservable = (function(__super__) {
        inherits(RangeObservable, __super__);
        function RangeObservable(start, count, scheduler) {
          this.start = start;
          this.count = count;
          this.scheduler = scheduler;
          __super__.call(this);
        }
        RangeObservable.prototype.subscribeCore = function(observer) {
          var sink = new RangeSink(observer, this);
          return sink.run();
        };
        return RangeObservable;
      }(ObservableBase));
      var RangeSink = (function() {
        function RangeSink(observer, parent) {
          this.observer = observer;
          this.parent = parent;
        }
        RangeSink.prototype.run = function() {
          var start = this.parent.start,
              count = this.parent.count,
              observer = this.observer;
          function loopRecursive(i, recurse) {
            if (i < count) {
              observer.onNext(start + i);
              recurse(i + 1);
            } else {
              observer.onCompleted();
            }
          }
          return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
        };
        return RangeSink;
      }());
      Observable.range = function(start, count, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return new RangeObservable(start, count, scheduler);
      };
      Observable.repeat = function(value, repeatCount, scheduler) {
        isScheduler(scheduler) || (scheduler = currentThreadScheduler);
        return observableReturn(value, scheduler).repeat(repeatCount == null ? -1 : repeatCount);
      };
      var observableReturn = Observable['return'] = Observable.just = Observable.returnValue = function(value, scheduler) {
        isScheduler(scheduler) || (scheduler = immediateScheduler);
        return new AnonymousObservable(function(o) {
          return scheduler.scheduleWithState(value, function(_, v) {
            o.onNext(v);
            o.onCompleted();
          });
        });
      };
      var observableThrow = Observable['throw'] = Observable.throwError = function(error, scheduler) {
        isScheduler(scheduler) || (scheduler = immediateScheduler);
        return new AnonymousObservable(function(observer) {
          return scheduler.schedule(function() {
            observer.onError(error);
          });
        });
      };
      Observable.throwException = function() {
        return Observable.throwError.apply(null, arguments);
      };
      Observable.using = function(resourceFactory, observableFactory) {
        return new AnonymousObservable(function(observer) {
          var disposable = disposableEmpty,
              resource,
              source;
          try {
            resource = resourceFactory();
            resource && (disposable = resource);
            source = observableFactory(resource);
          } catch (exception) {
            return new CompositeDisposable(observableThrow(exception).subscribe(observer), disposable);
          }
          return new CompositeDisposable(source.subscribe(observer), disposable);
        });
      };
      observableProto.amb = function(rightSource) {
        var leftSource = this;
        return new AnonymousObservable(function(observer) {
          var choice,
              leftChoice = 'L',
              rightChoice = 'R',
              leftSubscription = new SingleAssignmentDisposable(),
              rightSubscription = new SingleAssignmentDisposable();
          isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));
          function choiceL() {
            if (!choice) {
              choice = leftChoice;
              rightSubscription.dispose();
            }
          }
          function choiceR() {
            if (!choice) {
              choice = rightChoice;
              leftSubscription.dispose();
            }
          }
          leftSubscription.setDisposable(leftSource.subscribe(function(left) {
            choiceL();
            if (choice === leftChoice) {
              observer.onNext(left);
            }
          }, function(err) {
            choiceL();
            if (choice === leftChoice) {
              observer.onError(err);
            }
          }, function() {
            choiceL();
            if (choice === leftChoice) {
              observer.onCompleted();
            }
          }));
          rightSubscription.setDisposable(rightSource.subscribe(function(right) {
            choiceR();
            if (choice === rightChoice) {
              observer.onNext(right);
            }
          }, function(err) {
            choiceR();
            if (choice === rightChoice) {
              observer.onError(err);
            }
          }, function() {
            choiceR();
            if (choice === rightChoice) {
              observer.onCompleted();
            }
          }));
          return new CompositeDisposable(leftSubscription, rightSubscription);
        });
      };
      Observable.amb = function() {
        var acc = observableNever(),
            items = [];
        if (Array.isArray(arguments[0])) {
          items = arguments[0];
        } else {
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            items.push(arguments[i]);
          }
        }
        function func(previous, current) {
          return previous.amb(current);
        }
        for (var i = 0,
            len = items.length; i < len; i++) {
          acc = func(acc, items[i]);
        }
        return acc;
      };
      function observableCatchHandler(source, handler) {
        return new AnonymousObservable(function(o) {
          var d1 = new SingleAssignmentDisposable(),
              subscription = new SerialDisposable();
          subscription.setDisposable(d1);
          d1.setDisposable(source.subscribe(function(x) {
            o.onNext(x);
          }, function(e) {
            try {
              var result = handler(e);
            } catch (ex) {
              return o.onError(ex);
            }
            isPromise(result) && (result = observableFromPromise(result));
            var d = new SingleAssignmentDisposable();
            subscription.setDisposable(d);
            d.setDisposable(result.subscribe(o));
          }, function(x) {
            o.onCompleted(x);
          }));
          return subscription;
        }, source);
      }
      observableProto['catch'] = observableProto.catchError = observableProto.catchException = function(handlerOrSecond) {
        return typeof handlerOrSecond === 'function' ? observableCatchHandler(this, handlerOrSecond) : observableCatch([this, handlerOrSecond]);
      };
      var observableCatch = Observable.catchError = Observable['catch'] = Observable.catchException = function() {
        var items = [];
        if (Array.isArray(arguments[0])) {
          items = arguments[0];
        } else {
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            items.push(arguments[i]);
          }
        }
        return enumerableOf(items).catchError();
      };
      observableProto.combineLatest = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        if (Array.isArray(args[0])) {
          args[0].unshift(this);
        } else {
          args.unshift(this);
        }
        return combineLatest.apply(this, args);
      };
      var combineLatest = Observable.combineLatest = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var resultSelector = args.pop();
        Array.isArray(args[0]) && (args = args[0]);
        return new AnonymousObservable(function(o) {
          var n = args.length,
              falseFactory = function() {
                return false;
              },
              hasValue = arrayInitialize(n, falseFactory),
              hasValueAll = false,
              isDone = arrayInitialize(n, falseFactory),
              values = new Array(n);
          function next(i) {
            hasValue[i] = true;
            if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
              try {
                var res = resultSelector.apply(null, values);
              } catch (e) {
                return o.onError(e);
              }
              o.onNext(res);
            } else if (isDone.filter(function(x, j) {
              return j !== i;
            }).every(identity)) {
              o.onCompleted();
            }
          }
          function done(i) {
            isDone[i] = true;
            isDone.every(identity) && o.onCompleted();
          }
          var subscriptions = new Array(n);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              var source = args[i],
                  sad = new SingleAssignmentDisposable();
              isPromise(source) && (source = observableFromPromise(source));
              sad.setDisposable(source.subscribe(function(x) {
                values[i] = x;
                next(i);
              }, function(e) {
                o.onError(e);
              }, function() {
                done(i);
              }));
              subscriptions[i] = sad;
            }(idx));
          }
          return new CompositeDisposable(subscriptions);
        }, this);
      };
      observableProto.concat = function() {
        for (var args = [],
            i = 0,
            len = arguments.length; i < len; i++) {
          args.push(arguments[i]);
        }
        args.unshift(this);
        return observableConcat.apply(null, args);
      };
      var observableConcat = Observable.concat = function() {
        var args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          args = new Array(arguments.length);
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        return enumerableOf(args).concat();
      };
      observableProto.concatAll = observableProto.concatObservable = function() {
        return this.merge(1);
      };
      var MergeObservable = (function(__super__) {
        inherits(MergeObservable, __super__);
        function MergeObservable(source, maxConcurrent) {
          this.source = source;
          this.maxConcurrent = maxConcurrent;
          __super__.call(this);
        }
        MergeObservable.prototype.subscribeCore = function(observer) {
          var g = new CompositeDisposable();
          g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
          return g;
        };
        return MergeObservable;
      }(ObservableBase));
      var MergeObserver = (function() {
        function MergeObserver(o, max, g) {
          this.o = o;
          this.max = max;
          this.g = g;
          this.done = false;
          this.q = [];
          this.activeCount = 0;
          this.isStopped = false;
        }
        MergeObserver.prototype.handleSubscribe = function(xs) {
          var sad = new SingleAssignmentDisposable();
          this.g.add(sad);
          isPromise(xs) && (xs = observableFromPromise(xs));
          sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
        };
        MergeObserver.prototype.onNext = function(innerSource) {
          if (this.isStopped) {
            return ;
          }
          if (this.activeCount < this.max) {
            this.activeCount++;
            this.handleSubscribe(innerSource);
          } else {
            this.q.push(innerSource);
          }
        };
        MergeObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
          }
        };
        MergeObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            this.done = true;
            this.activeCount === 0 && this.o.onCompleted();
          }
        };
        MergeObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        MergeObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
            return true;
          }
          return false;
        };
        function InnerObserver(parent, sad) {
          this.parent = parent;
          this.sad = sad;
          this.isStopped = false;
        }
        InnerObserver.prototype.onNext = function(x) {
          if (!this.isStopped) {
            this.parent.o.onNext(x);
          }
        };
        InnerObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
          }
        };
        InnerObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            var parent = this.parent;
            parent.g.remove(this.sad);
            if (parent.q.length > 0) {
              parent.handleSubscribe(parent.q.shift());
            } else {
              parent.activeCount--;
              parent.done && parent.activeCount === 0 && parent.o.onCompleted();
            }
          }
        };
        InnerObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        InnerObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
            return true;
          }
          return false;
        };
        return MergeObserver;
      }());
      observableProto.merge = function(maxConcurrentOrOther) {
        return typeof maxConcurrentOrOther !== 'number' ? observableMerge(this, maxConcurrentOrOther) : new MergeObservable(this, maxConcurrentOrOther);
      };
      var observableMerge = Observable.merge = function() {
        var scheduler,
            sources = [],
            i,
            len = arguments.length;
        if (!arguments[0]) {
          scheduler = immediateScheduler;
          for (i = 1; i < len; i++) {
            sources.push(arguments[i]);
          }
        } else if (isScheduler(arguments[0])) {
          scheduler = arguments[0];
          for (i = 1; i < len; i++) {
            sources.push(arguments[i]);
          }
        } else {
          scheduler = immediateScheduler;
          for (i = 0; i < len; i++) {
            sources.push(arguments[i]);
          }
        }
        if (Array.isArray(sources[0])) {
          sources = sources[0];
        }
        return observableOf(scheduler, sources).mergeAll();
      };
      var CompositeError = Rx.CompositeError = function(errors) {
        this.name = "NotImplementedError";
        this.innerErrors = errors;
        this.message = 'This contains multiple errors. Check the innerErrors';
        Error.call(this);
      };
      CompositeError.prototype = Error.prototype;
      Observable.mergeDelayError = function() {
        var args;
        if (Array.isArray(arguments[0])) {
          args = arguments[0];
        } else {
          var len = arguments.length;
          args = new Array(len);
          for (var i = 0; i < len; i++) {
            args[i] = arguments[i];
          }
        }
        var source = observableOf(null, args);
        return new AnonymousObservable(function(o) {
          var group = new CompositeDisposable(),
              m = new SingleAssignmentDisposable(),
              isStopped = false,
              errors = [];
          function setCompletion() {
            if (errors.length === 0) {
              o.onCompleted();
            } else if (errors.length === 1) {
              o.onError(errors[0]);
            } else {
              o.onError(new CompositeError(errors));
            }
          }
          group.add(m);
          m.setDisposable(source.subscribe(function(innerSource) {
            var innerSubscription = new SingleAssignmentDisposable();
            group.add(innerSubscription);
            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
            innerSubscription.setDisposable(innerSource.subscribe(function(x) {
              o.onNext(x);
            }, function(e) {
              errors.push(e);
              group.remove(innerSubscription);
              isStopped && group.length === 1 && setCompletion();
            }, function() {
              group.remove(innerSubscription);
              isStopped && group.length === 1 && setCompletion();
            }));
          }, function(e) {
            errors.push(e);
            isStopped = true;
            group.length === 1 && setCompletion();
          }, function() {
            isStopped = true;
            group.length === 1 && setCompletion();
          }));
          return group;
        });
      };
      var MergeAllObservable = (function(__super__) {
        inherits(MergeAllObservable, __super__);
        function MergeAllObservable(source) {
          this.source = source;
          __super__.call(this);
        }
        MergeAllObservable.prototype.subscribeCore = function(observer) {
          var g = new CompositeDisposable(),
              m = new SingleAssignmentDisposable();
          g.add(m);
          m.setDisposable(this.source.subscribe(new MergeAllObserver(observer, g)));
          return g;
        };
        return MergeAllObservable;
      }(ObservableBase));
      var MergeAllObserver = (function() {
        function MergeAllObserver(o, g) {
          this.o = o;
          this.g = g;
          this.isStopped = false;
          this.done = false;
        }
        MergeAllObserver.prototype.onNext = function(innerSource) {
          if (this.isStopped) {
            return ;
          }
          var sad = new SingleAssignmentDisposable();
          this.g.add(sad);
          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
          sad.setDisposable(innerSource.subscribe(new InnerObserver(this, this.g, sad)));
        };
        MergeAllObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
          }
        };
        MergeAllObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            this.isStopped = true;
            this.done = true;
            this.g.length === 1 && this.o.onCompleted();
          }
        };
        MergeAllObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        MergeAllObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.o.onError(e);
            return true;
          }
          return false;
        };
        function InnerObserver(parent, g, sad) {
          this.parent = parent;
          this.g = g;
          this.sad = sad;
          this.isStopped = false;
        }
        InnerObserver.prototype.onNext = function(x) {
          if (!this.isStopped) {
            this.parent.o.onNext(x);
          }
        };
        InnerObserver.prototype.onError = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
          }
        };
        InnerObserver.prototype.onCompleted = function() {
          if (!this.isStopped) {
            var parent = this.parent;
            this.isStopped = true;
            parent.g.remove(this.sad);
            parent.done && parent.g.length === 1 && parent.o.onCompleted();
          }
        };
        InnerObserver.prototype.dispose = function() {
          this.isStopped = true;
        };
        InnerObserver.prototype.fail = function(e) {
          if (!this.isStopped) {
            this.isStopped = true;
            this.parent.o.onError(e);
            return true;
          }
          return false;
        };
        return MergeAllObserver;
      }());
      observableProto.mergeAll = observableProto.mergeObservable = function() {
        return new MergeAllObservable(this);
      };
      observableProto.onErrorResumeNext = function(second) {
        if (!second) {
          throw new Error('Second observable is required');
        }
        return onErrorResumeNext([this, second]);
      };
      var onErrorResumeNext = Observable.onErrorResumeNext = function() {
        var sources = [];
        if (Array.isArray(arguments[0])) {
          sources = arguments[0];
        } else {
          for (var i = 0,
              len = arguments.length; i < len; i++) {
            sources.push(arguments[i]);
          }
        }
        return new AnonymousObservable(function(observer) {
          var pos = 0,
              subscription = new SerialDisposable(),
              cancelable = immediateScheduler.scheduleRecursive(function(self) {
                var current,
                    d;
                if (pos < sources.length) {
                  current = sources[pos++];
                  isPromise(current) && (current = observableFromPromise(current));
                  d = new SingleAssignmentDisposable();
                  subscription.setDisposable(d);
                  d.setDisposable(current.subscribe(observer.onNext.bind(observer), self, self));
                } else {
                  observer.onCompleted();
                }
              });
          return new CompositeDisposable(subscription, cancelable);
        });
      };
      observableProto.skipUntil = function(other) {
        var source = this;
        return new AnonymousObservable(function(o) {
          var isOpen = false;
          var disposables = new CompositeDisposable(source.subscribe(function(left) {
            isOpen && o.onNext(left);
          }, function(e) {
            o.onError(e);
          }, function() {
            isOpen && o.onCompleted();
          }));
          isPromise(other) && (other = observableFromPromise(other));
          var rightSubscription = new SingleAssignmentDisposable();
          disposables.add(rightSubscription);
          rightSubscription.setDisposable(other.subscribe(function() {
            isOpen = true;
            rightSubscription.dispose();
          }, function(e) {
            o.onError(e);
          }, function() {
            rightSubscription.dispose();
          }));
          return disposables;
        }, source);
      };
      observableProto['switch'] = observableProto.switchLatest = function() {
        var sources = this;
        return new AnonymousObservable(function(observer) {
          var hasLatest = false,
              innerSubscription = new SerialDisposable(),
              isStopped = false,
              latest = 0,
              subscription = sources.subscribe(function(innerSource) {
                var d = new SingleAssignmentDisposable(),
                    id = ++latest;
                hasLatest = true;
                innerSubscription.setDisposable(d);
                isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
                d.setDisposable(innerSource.subscribe(function(x) {
                  latest === id && observer.onNext(x);
                }, function(e) {
                  latest === id && observer.onError(e);
                }, function() {
                  if (latest === id) {
                    hasLatest = false;
                    isStopped && observer.onCompleted();
                  }
                }));
              }, function(e) {
                observer.onError(e);
              }, function() {
                isStopped = true;
                !hasLatest && observer.onCompleted();
              });
          return new CompositeDisposable(subscription, innerSubscription);
        }, sources);
      };
      observableProto.takeUntil = function(other) {
        var source = this;
        return new AnonymousObservable(function(o) {
          isPromise(other) && (other = observableFromPromise(other));
          return new CompositeDisposable(source.subscribe(o), other.subscribe(function() {
            o.onCompleted();
          }, function(e) {
            o.onError(e);
          }, noop));
        }, source);
      };
      observableProto.withLatestFrom = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var resultSelector = args.pop(),
            source = this;
        if (typeof source === 'undefined') {
          throw new Error('Source observable not found for withLatestFrom().');
        }
        if (typeof resultSelector !== 'function') {
          throw new Error('withLatestFrom() expects a resultSelector function.');
        }
        if (Array.isArray(args[0])) {
          args = args[0];
        }
        return new AnonymousObservable(function(observer) {
          var falseFactory = function() {
            return false;
          },
              n = args.length,
              hasValue = arrayInitialize(n, falseFactory),
              hasValueAll = false,
              values = new Array(n);
          var subscriptions = new Array(n + 1);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              var other = args[i],
                  sad = new SingleAssignmentDisposable();
              isPromise(other) && (other = observableFromPromise(other));
              sad.setDisposable(other.subscribe(function(x) {
                values[i] = x;
                hasValue[i] = true;
                hasValueAll = hasValue.every(identity);
              }, observer.onError.bind(observer), function() {}));
              subscriptions[i] = sad;
            }(idx));
          }
          var sad = new SingleAssignmentDisposable();
          sad.setDisposable(source.subscribe(function(x) {
            var res;
            var allValues = [x].concat(values);
            if (!hasValueAll)
              return ;
            try {
              res = resultSelector.apply(null, allValues);
            } catch (ex) {
              observer.onError(ex);
              return ;
            }
            observer.onNext(res);
          }, observer.onError.bind(observer), function() {
            observer.onCompleted();
          }));
          subscriptions[n] = sad;
          return new CompositeDisposable(subscriptions);
        }, this);
      };
      function zipArray(second, resultSelector) {
        var first = this;
        return new AnonymousObservable(function(observer) {
          var index = 0,
              len = second.length;
          return first.subscribe(function(left) {
            if (index < len) {
              var right = second[index++],
                  result;
              try {
                result = resultSelector(left, right);
              } catch (e) {
                return observer.onError(e);
              }
              observer.onNext(result);
            } else {
              observer.onCompleted();
            }
          }, function(e) {
            observer.onError(e);
          }, function() {
            observer.onCompleted();
          });
        }, first);
      }
      function falseFactory() {
        return false;
      }
      function emptyArrayFactory() {
        return [];
      }
      observableProto.zip = function() {
        if (Array.isArray(arguments[0])) {
          return zipArray.apply(this, arguments);
        }
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var parent = this,
            resultSelector = args.pop();
        args.unshift(parent);
        return new AnonymousObservable(function(observer) {
          var n = args.length,
              queues = arrayInitialize(n, emptyArrayFactory),
              isDone = arrayInitialize(n, falseFactory);
          function next(i) {
            var res,
                queuedValues;
            if (queues.every(function(x) {
              return x.length > 0;
            })) {
              try {
                queuedValues = queues.map(function(x) {
                  return x.shift();
                });
                res = resultSelector.apply(parent, queuedValues);
              } catch (ex) {
                observer.onError(ex);
                return ;
              }
              observer.onNext(res);
            } else if (isDone.filter(function(x, j) {
              return j !== i;
            }).every(identity)) {
              observer.onCompleted();
            }
          }
          ;
          function done(i) {
            isDone[i] = true;
            if (isDone.every(function(x) {
              return x;
            })) {
              observer.onCompleted();
            }
          }
          var subscriptions = new Array(n);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              var source = args[i],
                  sad = new SingleAssignmentDisposable();
              isPromise(source) && (source = observableFromPromise(source));
              sad.setDisposable(source.subscribe(function(x) {
                queues[i].push(x);
                next(i);
              }, function(e) {
                observer.onError(e);
              }, function() {
                done(i);
              }));
              subscriptions[i] = sad;
            })(idx);
          }
          return new CompositeDisposable(subscriptions);
        }, parent);
      };
      Observable.zip = function() {
        var len = arguments.length,
            args = new Array(len);
        for (var i = 0; i < len; i++) {
          args[i] = arguments[i];
        }
        var first = args.shift();
        return first.zip.apply(first, args);
      };
      Observable.zipArray = function() {
        var sources;
        if (Array.isArray(arguments[0])) {
          sources = arguments[0];
        } else {
          var len = arguments.length;
          sources = new Array(len);
          for (var i = 0; i < len; i++) {
            sources[i] = arguments[i];
          }
        }
        return new AnonymousObservable(function(observer) {
          var n = sources.length,
              queues = arrayInitialize(n, function() {
                return [];
              }),
              isDone = arrayInitialize(n, function() {
                return false;
              });
          function next(i) {
            if (queues.every(function(x) {
              return x.length > 0;
            })) {
              var res = queues.map(function(x) {
                return x.shift();
              });
              observer.onNext(res);
            } else if (isDone.filter(function(x, j) {
              return j !== i;
            }).every(identity)) {
              observer.onCompleted();
              return ;
            }
          }
          ;
          function done(i) {
            isDone[i] = true;
            if (isDone.every(identity)) {
              observer.onCompleted();
              return ;
            }
          }
          var subscriptions = new Array(n);
          for (var idx = 0; idx < n; idx++) {
            (function(i) {
              subscriptions[i] = new SingleAssignmentDisposable();
              subscriptions[i].setDisposable(sources[i].subscribe(function(x) {
                queues[i].push(x);
                next(i);
              }, function(e) {
                observer.onError(e);
              }, function() {
                done(i);
              }));
            })(idx);
          }
          return new CompositeDisposable(subscriptions);
        });
      };
      observableProto.asObservable = function() {
        var source = this;
        return new AnonymousObservable(function(o) {
          return source.subscribe(o);
        }, this);
      };
      observableProto.bufferWithCount = function(count, skip) {
        if (typeof skip !== 'number') {
          skip = count;
        }
        return this.windowWithCount(count, skip).selectMany(function(x) {
          return x.toArray();
        }).where(function(x) {
          return x.length > 0;
        });
      };
      observableProto.dematerialize = function() {
        var source = this;
        return new AnonymousObservable(function(o) {
          return source.subscribe(function(x) {
            return x.accept(o);
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, this);
      };
      observableProto.distinctUntilChanged = function(keySelector, comparer) {
        var source = this;
        comparer || (comparer = defaultComparer);
        return new AnonymousObservable(function(o) {
          var hasCurrentKey = false,
              currentKey;
          return source.subscribe(function(value) {
            var key = value;
            if (keySelector) {
              try {
                key = keySelector(value);
              } catch (e) {
                o.onError(e);
                return ;
              }
            }
            if (hasCurrentKey) {
              try {
                var comparerEquals = comparer(currentKey, key);
              } catch (e) {
                o.onError(e);
                return ;
              }
            }
            if (!hasCurrentKey || !comparerEquals) {
              hasCurrentKey = true;
              currentKey = key;
              o.onNext(value);
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, this);
      };
      observableProto['do'] = observableProto.tap = observableProto.doAction = function(observerOrOnNext, onError, onCompleted) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var tapObserver = !observerOrOnNext || isFunction(observerOrOnNext) ? observerCreate(observerOrOnNext || noop, onError || noop, onCompleted || noop) : observerOrOnNext;
          return source.subscribe(function(x) {
            try {
              tapObserver.onNext(x);
            } catch (e) {
              observer.onError(e);
            }
            observer.onNext(x);
          }, function(err) {
            try {
              tapObserver.onError(err);
            } catch (e) {
              observer.onError(e);
            }
            observer.onError(err);
          }, function() {
            try {
              tapObserver.onCompleted();
            } catch (e) {
              observer.onError(e);
            }
            observer.onCompleted();
          });
        }, this);
      };
      observableProto.doOnNext = observableProto.tapOnNext = function(onNext, thisArg) {
        return this.tap(typeof thisArg !== 'undefined' ? function(x) {
          onNext.call(thisArg, x);
        } : onNext);
      };
      observableProto.doOnError = observableProto.tapOnError = function(onError, thisArg) {
        return this.tap(noop, typeof thisArg !== 'undefined' ? function(e) {
          onError.call(thisArg, e);
        } : onError);
      };
      observableProto.doOnCompleted = observableProto.tapOnCompleted = function(onCompleted, thisArg) {
        return this.tap(noop, null, typeof thisArg !== 'undefined' ? function() {
          onCompleted.call(thisArg);
        } : onCompleted);
      };
      observableProto['finally'] = observableProto.ensure = function(action) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var subscription;
          try {
            subscription = source.subscribe(observer);
          } catch (e) {
            action();
            throw e;
          }
          return disposableCreate(function() {
            try {
              subscription.dispose();
            } catch (e) {
              throw e;
            } finally {
              action();
            }
          });
        }, this);
      };
      observableProto.finallyAction = function(action) {
        return this.ensure(action);
      };
      observableProto.ignoreElements = function() {
        var source = this;
        return new AnonymousObservable(function(o) {
          return source.subscribe(noop, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.materialize = function() {
        var source = this;
        return new AnonymousObservable(function(observer) {
          return source.subscribe(function(value) {
            observer.onNext(notificationCreateOnNext(value));
          }, function(e) {
            observer.onNext(notificationCreateOnError(e));
            observer.onCompleted();
          }, function() {
            observer.onNext(notificationCreateOnCompleted());
            observer.onCompleted();
          });
        }, source);
      };
      observableProto.repeat = function(repeatCount) {
        return enumerableRepeat(this, repeatCount).concat();
      };
      observableProto.retry = function(retryCount) {
        return enumerableRepeat(this, retryCount).catchError();
      };
      observableProto.retryWhen = function(notifier) {
        return enumerableRepeat(this).catchErrorWhen(notifier);
      };
      observableProto.scan = function() {
        var hasSeed = false,
            seed,
            accumulator,
            source = this;
        if (arguments.length === 2) {
          hasSeed = true;
          seed = arguments[0];
          accumulator = arguments[1];
        } else {
          accumulator = arguments[0];
        }
        return new AnonymousObservable(function(o) {
          var hasAccumulation,
              accumulation,
              hasValue;
          return source.subscribe(function(x) {
            !hasValue && (hasValue = true);
            try {
              if (hasAccumulation) {
                accumulation = accumulator(accumulation, x);
              } else {
                accumulation = hasSeed ? accumulator(seed, x) : x;
                hasAccumulation = true;
              }
            } catch (e) {
              o.onError(e);
              return ;
            }
            o.onNext(accumulation);
          }, function(e) {
            o.onError(e);
          }, function() {
            !hasValue && hasSeed && o.onNext(seed);
            o.onCompleted();
          });
        }, source);
      };
      observableProto.skipLast = function(count) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var q = [];
          return source.subscribe(function(x) {
            q.push(x);
            q.length > count && o.onNext(q.shift());
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.startWith = function() {
        var values,
            scheduler,
            start = 0;
        if (!!arguments.length && isScheduler(arguments[0])) {
          scheduler = arguments[0];
          start = 1;
        } else {
          scheduler = immediateScheduler;
        }
        for (var args = [],
            i = start,
            len = arguments.length; i < len; i++) {
          args.push(arguments[i]);
        }
        return enumerableOf([observableFromArray(args, scheduler), this]).concat();
      };
      observableProto.takeLast = function(count) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var q = [];
          return source.subscribe(function(x) {
            q.push(x);
            q.length > count && q.shift();
          }, function(e) {
            o.onError(e);
          }, function() {
            while (q.length > 0) {
              o.onNext(q.shift());
            }
            o.onCompleted();
          });
        }, source);
      };
      observableProto.takeLastBuffer = function(count) {
        var source = this;
        return new AnonymousObservable(function(o) {
          var q = [];
          return source.subscribe(function(x) {
            q.push(x);
            q.length > count && q.shift();
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onNext(q);
            o.onCompleted();
          });
        }, source);
      };
      observableProto.windowWithCount = function(count, skip) {
        var source = this;
        +count || (count = 0);
        Math.abs(count) === Infinity && (count = 0);
        if (count <= 0) {
          throw new ArgumentOutOfRangeError();
        }
        skip == null && (skip = count);
        +skip || (skip = 0);
        Math.abs(skip) === Infinity && (skip = 0);
        if (skip <= 0) {
          throw new ArgumentOutOfRangeError();
        }
        return new AnonymousObservable(function(observer) {
          var m = new SingleAssignmentDisposable(),
              refCountDisposable = new RefCountDisposable(m),
              n = 0,
              q = [];
          function createWindow() {
            var s = new Subject();
            q.push(s);
            observer.onNext(addRef(s, refCountDisposable));
          }
          createWindow();
          m.setDisposable(source.subscribe(function(x) {
            for (var i = 0,
                len = q.length; i < len; i++) {
              q[i].onNext(x);
            }
            var c = n - count + 1;
            c >= 0 && c % skip === 0 && q.shift().onCompleted();
            ++n % skip === 0 && createWindow();
          }, function(e) {
            while (q.length > 0) {
              q.shift().onError(e);
            }
            observer.onError(e);
          }, function() {
            while (q.length > 0) {
              q.shift().onCompleted();
            }
            observer.onCompleted();
          }));
          return refCountDisposable;
        }, source);
      };
      function concatMap(source, selector, thisArg) {
        var selectorFunc = bindCallback(selector, thisArg, 3);
        return source.map(function(x, i) {
          var result = selectorFunc(x, i, source);
          isPromise(result) && (result = observableFromPromise(result));
          (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
          return result;
        }).concatAll();
      }
      observableProto.selectConcat = observableProto.concatMap = function(selector, resultSelector, thisArg) {
        if (isFunction(selector) && isFunction(resultSelector)) {
          return this.concatMap(function(x, i) {
            var selectorResult = selector(x, i);
            isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
            (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
            return selectorResult.map(function(y, i2) {
              return resultSelector(x, y, i, i2);
            });
          });
        }
        return isFunction(selector) ? concatMap(this, selector, thisArg) : concatMap(this, function() {
          return selector;
        });
      };
      observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
        var source = this,
            onNextFunc = bindCallback(onNext, thisArg, 2),
            onErrorFunc = bindCallback(onError, thisArg, 1),
            onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
        return new AnonymousObservable(function(observer) {
          var index = 0;
          return source.subscribe(function(x) {
            var result;
            try {
              result = onNextFunc(x, index++);
            } catch (e) {
              observer.onError(e);
              return ;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
          }, function(err) {
            var result;
            try {
              result = onErrorFunc(err);
            } catch (e) {
              observer.onError(e);
              return ;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          }, function() {
            var result;
            try {
              result = onCompletedFunc();
            } catch (e) {
              observer.onError(e);
              return ;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          });
        }, this).concatAll();
      };
      observableProto.defaultIfEmpty = function(defaultValue) {
        var source = this;
        defaultValue === undefined && (defaultValue = null);
        return new AnonymousObservable(function(observer) {
          var found = false;
          return source.subscribe(function(x) {
            found = true;
            observer.onNext(x);
          }, function(e) {
            observer.onError(e);
          }, function() {
            !found && observer.onNext(defaultValue);
            observer.onCompleted();
          });
        }, source);
      };
      function arrayIndexOfComparer(array, item, comparer) {
        for (var i = 0,
            len = array.length; i < len; i++) {
          if (comparer(array[i], item)) {
            return i;
          }
        }
        return -1;
      }
      function HashSet(comparer) {
        this.comparer = comparer;
        this.set = [];
      }
      HashSet.prototype.push = function(value) {
        var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
        retValue && this.set.push(value);
        return retValue;
      };
      observableProto.distinct = function(keySelector, comparer) {
        var source = this;
        comparer || (comparer = defaultComparer);
        return new AnonymousObservable(function(o) {
          var hashSet = new HashSet(comparer);
          return source.subscribe(function(x) {
            var key = x;
            if (keySelector) {
              try {
                key = keySelector(x);
              } catch (e) {
                o.onError(e);
                return ;
              }
            }
            hashSet.push(key) && o.onNext(x);
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, this);
      };
      var MapObservable = (function(__super__) {
        inherits(MapObservable, __super__);
        function MapObservable(source, selector, thisArg) {
          this.source = source;
          this.selector = bindCallback(selector, thisArg, 3);
          __super__.call(this);
        }
        MapObservable.prototype.internalMap = function(selector, thisArg) {
          var self = this;
          return new MapObservable(this.source, function(x, i, o) {
            return selector.call(this, self.selector(x, i, o), i, o);
          }, thisArg);
        };
        MapObservable.prototype.subscribeCore = function(observer) {
          return this.source.subscribe(new MapObserver(observer, this.selector, this));
        };
        return MapObservable;
      }(ObservableBase));
      function MapObserver(observer, selector, source) {
        this.observer = observer;
        this.selector = selector;
        this.source = source;
        this.i = 0;
        this.isStopped = false;
      }
      MapObserver.prototype.onNext = function(x) {
        if (this.isStopped) {
          return ;
        }
        var result = tryCatch(this.selector).call(this, x, this.i++, this.source);
        if (result === errorObj) {
          return this.observer.onError(result.e);
        }
        this.observer.onNext(result);
      };
      MapObserver.prototype.onError = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
        }
      };
      MapObserver.prototype.onCompleted = function() {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onCompleted();
        }
      };
      MapObserver.prototype.dispose = function() {
        this.isStopped = true;
      };
      MapObserver.prototype.fail = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
          return true;
        }
        return false;
      };
      observableProto.map = observableProto.select = function(selector, thisArg) {
        var selectorFn = typeof selector === 'function' ? selector : function() {
          return selector;
        };
        return this instanceof MapObservable ? this.internalMap(selectorFn, thisArg) : new MapObservable(this, selectorFn, thisArg);
      };
      observableProto.pluck = function() {
        var args = arguments,
            len = arguments.length;
        if (len === 0) {
          throw new Error('List of properties cannot be empty.');
        }
        return this.map(function(x) {
          var currentProp = x;
          for (var i = 0; i < len; i++) {
            var p = currentProp[args[i]];
            if (typeof p !== 'undefined') {
              currentProp = p;
            } else {
              return undefined;
            }
          }
          return currentProp;
        });
      };
      observableProto.flatMapObserver = observableProto.selectManyObserver = function(onNext, onError, onCompleted, thisArg) {
        var source = this;
        return new AnonymousObservable(function(observer) {
          var index = 0;
          return source.subscribe(function(x) {
            var result;
            try {
              result = onNext.call(thisArg, x, index++);
            } catch (e) {
              observer.onError(e);
              return ;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
          }, function(err) {
            var result;
            try {
              result = onError.call(thisArg, err);
            } catch (e) {
              observer.onError(e);
              return ;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          }, function() {
            var result;
            try {
              result = onCompleted.call(thisArg);
            } catch (e) {
              observer.onError(e);
              return ;
            }
            isPromise(result) && (result = observableFromPromise(result));
            observer.onNext(result);
            observer.onCompleted();
          });
        }, source).mergeAll();
      };
      function flatMap(source, selector, thisArg) {
        var selectorFunc = bindCallback(selector, thisArg, 3);
        return source.map(function(x, i) {
          var result = selectorFunc(x, i, source);
          isPromise(result) && (result = observableFromPromise(result));
          (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
          return result;
        }).mergeAll();
      }
      observableProto.selectMany = observableProto.flatMap = function(selector, resultSelector, thisArg) {
        if (isFunction(selector) && isFunction(resultSelector)) {
          return this.flatMap(function(x, i) {
            var selectorResult = selector(x, i);
            isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
            (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
            return selectorResult.map(function(y, i2) {
              return resultSelector(x, y, i, i2);
            });
          }, thisArg);
        }
        return isFunction(selector) ? flatMap(this, selector, thisArg) : flatMap(this, function() {
          return selector;
        });
      };
      observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function(selector, thisArg) {
        return this.select(selector, thisArg).switchLatest();
      };
      observableProto.skip = function(count) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var remaining = count;
          return source.subscribe(function(x) {
            if (remaining <= 0) {
              o.onNext(x);
            } else {
              remaining--;
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.skipWhile = function(predicate, thisArg) {
        var source = this,
            callback = bindCallback(predicate, thisArg, 3);
        return new AnonymousObservable(function(o) {
          var i = 0,
              running = false;
          return source.subscribe(function(x) {
            if (!running) {
              try {
                running = !callback(x, i++, source);
              } catch (e) {
                o.onError(e);
                return ;
              }
            }
            running && o.onNext(x);
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.take = function(count, scheduler) {
        if (count < 0) {
          throw new ArgumentOutOfRangeError();
        }
        if (count === 0) {
          return observableEmpty(scheduler);
        }
        var source = this;
        return new AnonymousObservable(function(o) {
          var remaining = count;
          return source.subscribe(function(x) {
            if (remaining-- > 0) {
              o.onNext(x);
              remaining === 0 && o.onCompleted();
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      observableProto.takeWhile = function(predicate, thisArg) {
        var source = this,
            callback = bindCallback(predicate, thisArg, 3);
        return new AnonymousObservable(function(o) {
          var i = 0,
              running = true;
          return source.subscribe(function(x) {
            if (running) {
              try {
                running = callback(x, i++, source);
              } catch (e) {
                o.onError(e);
                return ;
              }
              if (running) {
                o.onNext(x);
              } else {
                o.onCompleted();
              }
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            o.onCompleted();
          });
        }, source);
      };
      var FilterObservable = (function(__super__) {
        inherits(FilterObservable, __super__);
        function FilterObservable(source, predicate, thisArg) {
          this.source = source;
          this.predicate = bindCallback(predicate, thisArg, 3);
          __super__.call(this);
        }
        FilterObservable.prototype.subscribeCore = function(observer) {
          return this.source.subscribe(new FilterObserver(observer, this.predicate, this));
        };
        FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
          var self = this;
          return new FilterObservable(this.source, function(x, i, o) {
            return self.predicate(x, i, o) && predicate.call(this, x, i, o);
          }, thisArg);
        };
        return FilterObservable;
      }(ObservableBase));
      function FilterObserver(observer, predicate, source) {
        this.observer = observer;
        this.predicate = predicate;
        this.source = source;
        this.i = 0;
        this.isStopped = false;
      }
      FilterObserver.prototype.onNext = function(x) {
        if (this.isStopped) {
          return ;
        }
        var shouldYield = tryCatch(this.predicate).call(this, x, this.i++, this.source);
        if (shouldYield === errorObj) {
          return this.observer.onError(shouldYield.e);
        }
        shouldYield && this.observer.onNext(x);
      };
      FilterObserver.prototype.onError = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
        }
      };
      FilterObserver.prototype.onCompleted = function() {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onCompleted();
        }
      };
      FilterObserver.prototype.dispose = function() {
        this.isStopped = true;
      };
      FilterObserver.prototype.fail = function(e) {
        if (!this.isStopped) {
          this.isStopped = true;
          this.observer.onError(e);
          return true;
        }
        return false;
      };
      observableProto.filter = observableProto.where = function(predicate, thisArg) {
        return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) : new FilterObservable(this, predicate, thisArg);
      };
      observableProto.transduce = function(transducer) {
        var source = this;
        function transformForObserver(o) {
          return {
            '@@transducer/init': function() {
              return o;
            },
            '@@transducer/step': function(obs, input) {
              return obs.onNext(input);
            },
            '@@transducer/result': function(obs) {
              return obs.onCompleted();
            }
          };
        }
        return new AnonymousObservable(function(o) {
          var xform = transducer(transformForObserver(o));
          return source.subscribe(function(v) {
            try {
              xform['@@transducer/step'](o, v);
            } catch (e) {
              o.onError(e);
            }
          }, function(e) {
            o.onError(e);
          }, function() {
            xform['@@transducer/result'](o);
          });
        }, source);
      };
      var AnonymousObservable = Rx.AnonymousObservable = (function(__super__) {
        inherits(AnonymousObservable, __super__);
        function fixSubscriber(subscriber) {
          return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
        }
        function setDisposable(s, state) {
          var ado = state[0],
              subscribe = state[1];
          var sub = tryCatch(subscribe)(ado);
          if (sub === errorObj) {
            if (!ado.fail(errorObj.e)) {
              return thrower(errorObj.e);
            }
          }
          ado.setDisposable(fixSubscriber(sub));
        }
        function AnonymousObservable(subscribe, parent) {
          this.source = parent;
          function s(observer) {
            var ado = new AutoDetachObserver(observer),
                state = [ado, subscribe];
            if (currentThreadScheduler.scheduleRequired()) {
              currentThreadScheduler.scheduleWithState(state, setDisposable);
            } else {
              setDisposable(null, state);
            }
            return ado;
          }
          __super__.call(this, s);
        }
        return AnonymousObservable;
      }(Observable));
      var AutoDetachObserver = (function(__super__) {
        inherits(AutoDetachObserver, __super__);
        function AutoDetachObserver(observer) {
          __super__.call(this);
          this.observer = observer;
          this.m = new SingleAssignmentDisposable();
        }
        var AutoDetachObserverPrototype = AutoDetachObserver.prototype;
        AutoDetachObserverPrototype.next = function(value) {
          var result = tryCatch(this.observer.onNext).call(this.observer, value);
          if (result === errorObj) {
            this.dispose();
            thrower(result.e);
          }
        };
        AutoDetachObserverPrototype.error = function(err) {
          var result = tryCatch(this.observer.onError).call(this.observer, err);
          this.dispose();
          result === errorObj && thrower(result.e);
        };
        AutoDetachObserverPrototype.completed = function() {
          var result = tryCatch(this.observer.onCompleted).call(this.observer);
          this.dispose();
          result === errorObj && thrower(result.e);
        };
        AutoDetachObserverPrototype.setDisposable = function(value) {
          this.m.setDisposable(value);
        };
        AutoDetachObserverPrototype.getDisposable = function() {
          return this.m.getDisposable();
        };
        AutoDetachObserverPrototype.dispose = function() {
          __super__.prototype.dispose.call(this);
          this.m.dispose();
        };
        return AutoDetachObserver;
      }(AbstractObserver));
      var InnerSubscription = function(subject, observer) {
        this.subject = subject;
        this.observer = observer;
      };
      InnerSubscription.prototype.dispose = function() {
        if (!this.subject.isDisposed && this.observer !== null) {
          var idx = this.subject.observers.indexOf(this.observer);
          this.subject.observers.splice(idx, 1);
          this.observer = null;
        }
      };
      var Subject = Rx.Subject = (function(__super__) {
        function subscribe(observer) {
          checkDisposed(this);
          if (!this.isStopped) {
            this.observers.push(observer);
            return new InnerSubscription(this, observer);
          }
          if (this.hasError) {
            observer.onError(this.error);
            return disposableEmpty;
          }
          observer.onCompleted();
          return disposableEmpty;
        }
        inherits(Subject, __super__);
        function Subject() {
          __super__.call(this, subscribe);
          this.isDisposed = false, this.isStopped = false, this.observers = [];
          this.hasError = false;
        }
        addProperties(Subject.prototype, Observer.prototype, {
          hasObservers: function() {
            return this.observers.length > 0;
          },
          onCompleted: function() {
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onCompleted();
              }
              this.observers.length = 0;
            }
          },
          onError: function(error) {
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              this.error = error;
              this.hasError = true;
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onError(error);
              }
              this.observers.length = 0;
            }
          },
          onNext: function(value) {
            checkDisposed(this);
            if (!this.isStopped) {
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onNext(value);
              }
            }
          },
          dispose: function() {
            this.isDisposed = true;
            this.observers = null;
          }
        });
        Subject.create = function(observer, observable) {
          return new AnonymousSubject(observer, observable);
        };
        return Subject;
      }(Observable));
      var AsyncSubject = Rx.AsyncSubject = (function(__super__) {
        function subscribe(observer) {
          checkDisposed(this);
          if (!this.isStopped) {
            this.observers.push(observer);
            return new InnerSubscription(this, observer);
          }
          if (this.hasError) {
            observer.onError(this.error);
          } else if (this.hasValue) {
            observer.onNext(this.value);
            observer.onCompleted();
          } else {
            observer.onCompleted();
          }
          return disposableEmpty;
        }
        inherits(AsyncSubject, __super__);
        function AsyncSubject() {
          __super__.call(this, subscribe);
          this.isDisposed = false;
          this.isStopped = false;
          this.hasValue = false;
          this.observers = [];
          this.hasError = false;
        }
        addProperties(AsyncSubject.prototype, Observer, {
          hasObservers: function() {
            checkDisposed(this);
            return this.observers.length > 0;
          },
          onCompleted: function() {
            var i,
                len;
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              var os = cloneArray(this.observers),
                  len = os.length;
              if (this.hasValue) {
                for (i = 0; i < len; i++) {
                  var o = os[i];
                  o.onNext(this.value);
                  o.onCompleted();
                }
              } else {
                for (i = 0; i < len; i++) {
                  os[i].onCompleted();
                }
              }
              this.observers.length = 0;
            }
          },
          onError: function(error) {
            checkDisposed(this);
            if (!this.isStopped) {
              this.isStopped = true;
              this.hasError = true;
              this.error = error;
              for (var i = 0,
                  os = cloneArray(this.observers),
                  len = os.length; i < len; i++) {
                os[i].onError(error);
              }
              this.observers.length = 0;
            }
          },
          onNext: function(value) {
            checkDisposed(this);
            if (this.isStopped) {
              return ;
            }
            this.value = value;
            this.hasValue = true;
          },
          dispose: function() {
            this.isDisposed = true;
            this.observers = null;
            this.exception = null;
            this.value = null;
          }
        });
        return AsyncSubject;
      }(Observable));
      var AnonymousSubject = Rx.AnonymousSubject = (function(__super__) {
        inherits(AnonymousSubject, __super__);
        function subscribe(observer) {
          return this.observable.subscribe(observer);
        }
        function AnonymousSubject(observer, observable) {
          this.observer = observer;
          this.observable = observable;
          __super__.call(this, subscribe);
        }
        addProperties(AnonymousSubject.prototype, Observer.prototype, {
          onCompleted: function() {
            this.observer.onCompleted();
          },
          onError: function(error) {
            this.observer.onError(error);
          },
          onNext: function(value) {
            this.observer.onNext(value);
          }
        });
        return AnonymousSubject;
      }(Observable));
      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        root.Rx = Rx;
        define(function() {
          return Rx;
        });
      } else if (freeExports && freeModule) {
        if (moduleExports) {
          (freeModule.exports = Rx).Rx = Rx;
        } else {
          freeExports.Rx = Rx;
        }
      } else {
        root.Rx = Rx;
      }
      var rEndingLine = captureLine();
    }.call(this));
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/di", ["npm:angular2@2.0.0-alpha.28/src/di/annotations", "npm:angular2@2.0.0-alpha.28/src/di/decorators", "npm:angular2@2.0.0-alpha.28/src/di/forward_ref", "npm:angular2@2.0.0-alpha.28/src/di/injector", "npm:angular2@2.0.0-alpha.28/src/di/binding", "npm:angular2@2.0.0-alpha.28/src/di/key", "npm:angular2@2.0.0-alpha.28/src/di/exceptions", "npm:angular2@2.0.0-alpha.28/src/di/opaque_token"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/src/di/annotations");
  exports.InjectAnnotation = annotations_1.InjectAnnotation;
  exports.InjectPromiseAnnotation = annotations_1.InjectPromiseAnnotation;
  exports.InjectLazyAnnotation = annotations_1.InjectLazyAnnotation;
  exports.OptionalAnnotation = annotations_1.OptionalAnnotation;
  exports.InjectableAnnotation = annotations_1.InjectableAnnotation;
  exports.DependencyAnnotation = annotations_1.DependencyAnnotation;
  var decorators_1 = require("npm:angular2@2.0.0-alpha.28/src/di/decorators");
  exports.Inject = decorators_1.Inject;
  exports.InjectPromise = decorators_1.InjectPromise;
  exports.InjectLazy = decorators_1.InjectLazy;
  exports.Optional = decorators_1.Optional;
  exports.Injectable = decorators_1.Injectable;
  var forward_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/di/forward_ref");
  exports.forwardRef = forward_ref_1.forwardRef;
  exports.resolveForwardRef = forward_ref_1.resolveForwardRef;
  var injector_1 = require("npm:angular2@2.0.0-alpha.28/src/di/injector");
  exports.resolveBindings = injector_1.resolveBindings;
  exports.Injector = injector_1.Injector;
  var binding_1 = require("npm:angular2@2.0.0-alpha.28/src/di/binding");
  exports.Binding = binding_1.Binding;
  exports.BindingBuilder = binding_1.BindingBuilder;
  exports.ResolvedBinding = binding_1.ResolvedBinding;
  exports.Dependency = binding_1.Dependency;
  exports.bind = binding_1.bind;
  var key_1 = require("npm:angular2@2.0.0-alpha.28/src/di/key");
  exports.Key = key_1.Key;
  exports.KeyRegistry = key_1.KeyRegistry;
  exports.TypeLiteral = key_1.TypeLiteral;
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.28/src/di/exceptions");
  exports.NoBindingError = exceptions_1.NoBindingError;
  exports.AbstractBindingError = exceptions_1.AbstractBindingError;
  exports.AsyncBindingError = exceptions_1.AsyncBindingError;
  exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
  exports.InstantiationError = exceptions_1.InstantiationError;
  exports.InvalidBindingError = exceptions_1.InvalidBindingError;
  exports.NoAnnotationError = exceptions_1.NoAnnotationError;
  var opaque_token_1 = require("npm:angular2@2.0.0-alpha.28/src/di/opaque_token");
  exports.OpaqueToken = opaque_token_1.OpaqueToken;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_injector", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/visibility", "npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/di", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_container_ref", "npm:angular2@2.0.0-alpha.28/src/core/compiler/element_ref", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref", "npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/annotations", "npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_lifecycle_reflector", "npm:angular2@2.0.0-alpha.28/change_detection", "npm:angular2@2.0.0-alpha.28/src/core/compiler/query_list", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection", "npm:angular2@2.0.0-alpha.28/src/render/api"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var visibility_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/visibility");
  var di_2 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/di");
  var avmModule = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager");
  var view_container_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_container_ref");
  var element_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_ref");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref");
  var annotations_1 = require("npm:angular2@2.0.0-alpha.28/src/core/annotations_impl/annotations");
  var directive_lifecycle_reflector_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_lifecycle_reflector");
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
  var query_list_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/query_list");
  var reflection_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection");
  var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var _MAX_DIRECTIVE_CONSTRUCTION_COUNTER = 10;
  var _undefined = lang_1.CONST_EXPR(new Object());
  var _staticKeys;
  var StaticKeys = (function() {
    function StaticKeys() {
      this.viewManagerId = di_1.Key.get(avmModule.AppViewManager).id;
      this.protoViewId = di_1.Key.get(view_ref_1.ProtoViewRef).id;
      this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
      this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
      this.elementRefId = di_1.Key.get(element_ref_1.ElementRef).id;
    }
    StaticKeys.instance = function() {
      if (lang_1.isBlank(_staticKeys))
        _staticKeys = new StaticKeys();
      return _staticKeys;
    };
    return StaticKeys;
  })();
  var TreeNode = (function() {
    function TreeNode(parent) {
      this._head = null;
      this._tail = null;
      this._next = null;
      if (lang_1.isPresent(parent))
        parent.addChild(this);
    }
    TreeNode.prototype.addChild = function(child) {
      if (lang_1.isPresent(this._tail)) {
        this._tail._next = child;
        this._tail = child;
      } else {
        this._tail = this._head = child;
      }
      child._next = null;
      child._parent = this;
    };
    TreeNode.prototype.addChildAfter = function(child, prevSibling) {
      if (lang_1.isBlank(prevSibling)) {
        var prevHead = this._head;
        this._head = child;
        child._next = prevHead;
        if (lang_1.isBlank(this._tail))
          this._tail = child;
      } else if (lang_1.isBlank(prevSibling._next)) {
        this.addChild(child);
        return ;
      } else {
        child._next = prevSibling._next;
        prevSibling._next = child;
      }
      child._parent = this;
    };
    TreeNode.prototype.remove = function() {
      if (lang_1.isBlank(this.parent))
        return ;
      var nextSibling = this._next;
      var prevSibling = this._findPrev();
      if (lang_1.isBlank(prevSibling)) {
        this.parent._head = this._next;
      } else {
        prevSibling._next = this._next;
      }
      if (lang_1.isBlank(nextSibling)) {
        this._parent._tail = prevSibling;
      }
      this._parent = null;
      this._next = null;
    };
    TreeNode.prototype._findPrev = function() {
      var node = this.parent._head;
      if (node == this)
        return null;
      while (node._next !== this)
        node = node._next;
      return node;
    };
    Object.defineProperty(TreeNode.prototype, "parent", {
      get: function() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "children", {
      get: function() {
        var res = [];
        var child = this._head;
        while (child != null) {
          res.push(child);
          child = child._next;
        }
        return res;
      },
      enumerable: true,
      configurable: true
    });
    return TreeNode;
  })();
  exports.TreeNode = TreeNode;
  var DependencyWithVisibility = (function(_super) {
    __extends(DependencyWithVisibility, _super);
    function DependencyWithVisibility(key, asPromise, lazy, optional, properties, visibility) {
      _super.call(this, key, asPromise, lazy, optional, properties);
      this.visibility = visibility;
    }
    DependencyWithVisibility.createFrom = function(d) {
      return new DependencyWithVisibility(d.key, d.asPromise, d.lazy, d.optional, d.properties, DependencyWithVisibility._visibility(d.properties));
    };
    DependencyWithVisibility._visibility = function(properties) {
      if (properties.length == 0)
        return visibility_1.self;
      var p = collection_1.ListWrapper.find(properties, function(p) {
        return p instanceof visibility_1.Visibility;
      });
      return lang_1.isPresent(p) ? p : visibility_1.self;
    };
    return DependencyWithVisibility;
  })(di_1.Dependency);
  exports.DependencyWithVisibility = DependencyWithVisibility;
  var DirectiveDependency = (function(_super) {
    __extends(DirectiveDependency, _super);
    function DirectiveDependency(key, asPromise, lazy, optional, properties, visibility, attributeName, queryDecorator) {
      _super.call(this, key, asPromise, lazy, optional, properties, visibility);
      this.attributeName = attributeName;
      this.queryDecorator = queryDecorator;
      this._verify();
    }
    DirectiveDependency.prototype._verify = function() {
      var count = 0;
      if (lang_1.isPresent(this.queryDecorator))
        count++;
      if (lang_1.isPresent(this.attributeName))
        count++;
      if (count > 1)
        throw new lang_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
    };
    DirectiveDependency.createFrom = function(d) {
      return new DirectiveDependency(d.key, d.asPromise, d.lazy, d.optional, d.properties, DependencyWithVisibility._visibility(d.properties), DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
    };
    DirectiveDependency._attributeName = function(properties) {
      var p = collection_1.ListWrapper.find(properties, function(p) {
        return p instanceof di_2.Attribute;
      });
      return lang_1.isPresent(p) ? p.attributeName : null;
    };
    DirectiveDependency._query = function(properties) {
      return collection_1.ListWrapper.find(properties, function(p) {
        return p instanceof di_2.Query;
      });
    };
    return DirectiveDependency;
  })(DependencyWithVisibility);
  exports.DirectiveDependency = DirectiveDependency;
  var DirectiveBinding = (function(_super) {
    __extends(DirectiveBinding, _super);
    function DirectiveBinding(key, factory, dependencies, providedAsPromise, resolvedAppInjectables, resolvedHostInjectables, resolvedViewInjectables, metadata) {
      _super.call(this, key, factory, dependencies, providedAsPromise);
      this.resolvedAppInjectables = resolvedAppInjectables;
      this.resolvedHostInjectables = resolvedHostInjectables;
      this.resolvedViewInjectables = resolvedViewInjectables;
      this.metadata = metadata;
    }
    Object.defineProperty(DirectiveBinding.prototype, "callOnDestroy", {
      get: function() {
        return this.metadata.callOnDestroy;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "callOnChange", {
      get: function() {
        return this.metadata.callOnChange;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "callOnAllChangesDone", {
      get: function() {
        return this.metadata.callOnAllChangesDone;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "displayName", {
      get: function() {
        return this.key.displayName;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "eventEmitters", {
      get: function() {
        return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.events) ? this.metadata.events : [];
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "hostActions", {
      get: function() {
        return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.hostActions) ? this.metadata.hostActions : new Map();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DirectiveBinding.prototype, "changeDetection", {
      get: function() {
        return this.metadata.changeDetection;
      },
      enumerable: true,
      configurable: true
    });
    DirectiveBinding.createFromBinding = function(binding, ann) {
      if (lang_1.isBlank(ann)) {
        ann = new annotations_1.Directive();
      }
      var rb = binding.resolve();
      var deps = collection_1.ListWrapper.map(rb.dependencies, DirectiveDependency.createFrom);
      var resolvedAppInjectables = ann instanceof annotations_1.Component && lang_1.isPresent(ann.appInjector) ? di_1.Injector.resolve(ann.appInjector) : [];
      var resolvedHostInjectables = lang_1.isPresent(ann.hostInjector) ? di_1.resolveBindings(ann.hostInjector) : [];
      var resolvedViewInjectables = ann instanceof annotations_1.Component && lang_1.isPresent(ann.viewInjector) ? di_1.resolveBindings(ann.viewInjector) : [];
      var metadata = api_1.DirectiveMetadata.create({
        id: lang_1.stringify(rb.key.token),
        type: ann instanceof annotations_1.Component ? api_1.DirectiveMetadata.COMPONENT_TYPE : api_1.DirectiveMetadata.DIRECTIVE_TYPE,
        selector: ann.selector,
        compileChildren: ann.compileChildren,
        events: ann.events,
        host: lang_1.isPresent(ann.host) ? collection_1.MapWrapper.createFromStringMap(ann.host) : null,
        properties: ann.properties,
        readAttributes: DirectiveBinding._readAttributes(deps),
        callOnDestroy: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.onDestroy, rb.key.token, ann),
        callOnChange: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.onChange, rb.key.token, ann),
        callOnCheck: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.onCheck, rb.key.token, ann),
        callOnInit: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.onInit, rb.key.token, ann),
        callOnAllChangesDone: directive_lifecycle_reflector_1.hasLifecycleHook(annotations_1.onAllChangesDone, rb.key.token, ann),
        changeDetection: ann instanceof annotations_1.Component ? ann.changeDetection : null,
        exportAs: ann.exportAs
      });
      return new DirectiveBinding(rb.key, rb.factory, deps, rb.providedAsPromise, resolvedAppInjectables, resolvedHostInjectables, resolvedViewInjectables, metadata);
    };
    DirectiveBinding._readAttributes = function(deps) {
      var readAttributes = [];
      collection_1.ListWrapper.forEach(deps, function(dep) {
        if (lang_1.isPresent(dep.attributeName)) {
          readAttributes.push(dep.attributeName);
        }
      });
      return readAttributes;
    };
    DirectiveBinding.createFromType = function(type, annotation) {
      var binding = new di_1.Binding(type, {toClass: type});
      return DirectiveBinding.createFromBinding(binding, annotation);
    };
    return DirectiveBinding;
  })(di_1.ResolvedBinding);
  exports.DirectiveBinding = DirectiveBinding;
  var PreBuiltObjects = (function() {
    function PreBuiltObjects(viewManager, view, protoView) {
      this.viewManager = viewManager;
      this.view = view;
      this.protoView = protoView;
    }
    return PreBuiltObjects;
  })();
  exports.PreBuiltObjects = PreBuiltObjects;
  var EventEmitterAccessor = (function() {
    function EventEmitterAccessor(eventName, getter) {
      this.eventName = eventName;
      this.getter = getter;
    }
    EventEmitterAccessor.prototype.subscribe = function(view, boundElementIndex, directive) {
      var _this = this;
      var eventEmitter = this.getter(directive);
      return async_1.ObservableWrapper.subscribe(eventEmitter, function(eventObj) {
        return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex);
      });
    };
    return EventEmitterAccessor;
  })();
  exports.EventEmitterAccessor = EventEmitterAccessor;
  var HostActionAccessor = (function() {
    function HostActionAccessor(methodName, getter) {
      this.methodName = methodName;
      this.getter = getter;
    }
    HostActionAccessor.prototype.subscribe = function(view, boundElementIndex, directive) {
      var _this = this;
      var eventEmitter = this.getter(directive);
      return async_1.ObservableWrapper.subscribe(eventEmitter, function(actionArgs) {
        return view.invokeElementMethod(boundElementIndex, _this.methodName, actionArgs);
      });
    };
    return HostActionAccessor;
  })();
  exports.HostActionAccessor = HostActionAccessor;
  var LIGHT_DOM = 1;
  var SHADOW_DOM = 2;
  var LIGHT_DOM_AND_SHADOW_DOM = 3;
  var BindingData = (function() {
    function BindingData(binding, visibility) {
      this.binding = binding;
      this.visibility = visibility;
    }
    BindingData.prototype.getKeyId = function() {
      return this.binding.key.id;
    };
    BindingData.prototype.createEventEmitterAccessors = function() {
      if (!(this.binding instanceof DirectiveBinding))
        return [];
      var db = this.binding;
      return collection_1.ListWrapper.map(db.eventEmitters, function(eventConfig) {
        var fieldName;
        var eventName;
        var colonIdx = eventConfig.indexOf(':');
        if (colonIdx > -1) {
          fieldName = lang_1.StringWrapper.substring(eventConfig, 0, colonIdx).trim();
          eventName = lang_1.StringWrapper.substring(eventConfig, colonIdx + 1).trim();
        } else {
          fieldName = eventName = eventConfig;
        }
        return new EventEmitterAccessor(eventName, reflection_1.reflector.getter(fieldName));
      });
    };
    BindingData.prototype.createHostActionAccessors = function() {
      if (!(this.binding instanceof DirectiveBinding))
        return [];
      var res = [];
      var db = this.binding;
      collection_1.MapWrapper.forEach(db.hostActions, function(actionExpression, actionName) {
        res.push(new HostActionAccessor(actionExpression, reflection_1.reflector.getter(actionName)));
      });
      return res;
    };
    return BindingData;
  })();
  exports.BindingData = BindingData;
  var ProtoElementInjector = (function() {
    function ProtoElementInjector(parent, index, bd, distanceToParent, _firstBindingIsComponent, directiveVariableBindings) {
      this.parent = parent;
      this.index = index;
      this.distanceToParent = distanceToParent;
      this._firstBindingIsComponent = _firstBindingIsComponent;
      this.directiveVariableBindings = directiveVariableBindings;
      var length = bd.length;
      this.eventEmitterAccessors = collection_1.ListWrapper.createFixedSize(length);
      this.hostActionAccessors = collection_1.ListWrapper.createFixedSize(length);
      this._strategy = length > _MAX_DIRECTIVE_CONSTRUCTION_COUNTER ? new _ProtoElementInjectorDynamicStrategy(this, bd) : new _ProtoElementInjectorInlineStrategy(this, bd);
    }
    ProtoElementInjector.create = function(parent, index, bindings, firstBindingIsComponent, distanceToParent, directiveVariableBindings) {
      var bd = [];
      ProtoElementInjector._createDirectiveBindingData(bindings, bd, firstBindingIsComponent);
      if (firstBindingIsComponent) {
        ProtoElementInjector._createViewInjectorBindingData(bindings, bd);
      }
      ProtoElementInjector._createHostInjectorBindingData(bindings, bd, firstBindingIsComponent);
      return new ProtoElementInjector(parent, index, bd, distanceToParent, firstBindingIsComponent, directiveVariableBindings);
    };
    ProtoElementInjector._createDirectiveBindingData = function(dirBindings, bd, firstBindingIsComponent) {
      collection_1.ListWrapper.forEach(dirBindings, function(dirBinding) {
        bd.push(ProtoElementInjector._createBindingData(firstBindingIsComponent, dirBinding, dirBindings, dirBinding));
      });
    };
    ProtoElementInjector._createHostInjectorBindingData = function(dirBindings, bd, firstBindingIsComponent) {
      collection_1.ListWrapper.forEach(dirBindings, function(dirBinding) {
        collection_1.ListWrapper.forEach(dirBinding.resolvedHostInjectables, function(b) {
          bd.push(ProtoElementInjector._createBindingData(firstBindingIsComponent, dirBinding, dirBindings, ProtoElementInjector._createBinding(b)));
        });
      });
    };
    ProtoElementInjector._createBindingData = function(firstBindingIsComponent, dirBinding, dirBindings, binding) {
      var isComponent = firstBindingIsComponent && dirBindings[0] === dirBinding;
      return new BindingData(binding, isComponent ? LIGHT_DOM_AND_SHADOW_DOM : LIGHT_DOM);
    };
    ProtoElementInjector._createViewInjectorBindingData = function(bindings, bd) {
      var db = bindings[0];
      collection_1.ListWrapper.forEach(db.resolvedViewInjectables, function(b) {
        return bd.push(new BindingData(ProtoElementInjector._createBinding(b), SHADOW_DOM));
      });
    };
    ProtoElementInjector._createBinding = function(b) {
      var deps = collection_1.ListWrapper.map(b.dependencies, function(d) {
        return DependencyWithVisibility.createFrom(d);
      });
      return new di_1.ResolvedBinding(b.key, b.factory, deps, b.providedAsPromise);
    };
    ProtoElementInjector.prototype.instantiate = function(parent) {
      return new ElementInjector(this, parent);
    };
    ProtoElementInjector.prototype.directParent = function() {
      return this.distanceToParent < 2 ? this.parent : null;
    };
    Object.defineProperty(ProtoElementInjector.prototype, "hasBindings", {
      get: function() {
        return this._strategy.hasBindings();
      },
      enumerable: true,
      configurable: true
    });
    ProtoElementInjector.prototype.getBindingAtIndex = function(index) {
      return this._strategy.getBindingAtIndex(index);
    };
    return ProtoElementInjector;
  })();
  exports.ProtoElementInjector = ProtoElementInjector;
  var _ProtoElementInjectorInlineStrategy = (function() {
    function _ProtoElementInjectorInlineStrategy(protoEI, bd) {
      this._binding0 = null;
      this._binding1 = null;
      this._binding2 = null;
      this._binding3 = null;
      this._binding4 = null;
      this._binding5 = null;
      this._binding6 = null;
      this._binding7 = null;
      this._binding8 = null;
      this._binding9 = null;
      this._keyId0 = null;
      this._keyId1 = null;
      this._keyId2 = null;
      this._keyId3 = null;
      this._keyId4 = null;
      this._keyId5 = null;
      this._keyId6 = null;
      this._keyId7 = null;
      this._keyId8 = null;
      this._keyId9 = null;
      this._visibility0 = null;
      this._visibility1 = null;
      this._visibility2 = null;
      this._visibility3 = null;
      this._visibility4 = null;
      this._visibility5 = null;
      this._visibility6 = null;
      this._visibility7 = null;
      this._visibility8 = null;
      this._visibility9 = null;
      var length = bd.length;
      if (length > 0) {
        this._binding0 = bd[0].binding;
        this._keyId0 = bd[0].getKeyId();
        this._visibility0 = bd[0].visibility;
        protoEI.eventEmitterAccessors[0] = bd[0].createEventEmitterAccessors();
        protoEI.hostActionAccessors[0] = bd[0].createHostActionAccessors();
      }
      if (length > 1) {
        this._binding1 = bd[1].binding;
        this._keyId1 = bd[1].getKeyId();
        this._visibility1 = bd[1].visibility;
        protoEI.eventEmitterAccessors[1] = bd[1].createEventEmitterAccessors();
        protoEI.hostActionAccessors[1] = bd[1].createHostActionAccessors();
      }
      if (length > 2) {
        this._binding2 = bd[2].binding;
        this._keyId2 = bd[2].getKeyId();
        this._visibility2 = bd[2].visibility;
        protoEI.eventEmitterAccessors[2] = bd[2].createEventEmitterAccessors();
        protoEI.hostActionAccessors[2] = bd[2].createHostActionAccessors();
      }
      if (length > 3) {
        this._binding3 = bd[3].binding;
        this._keyId3 = bd[3].getKeyId();
        this._visibility3 = bd[3].visibility;
        protoEI.eventEmitterAccessors[3] = bd[3].createEventEmitterAccessors();
        protoEI.hostActionAccessors[3] = bd[3].createHostActionAccessors();
      }
      if (length > 4) {
        this._binding4 = bd[4].binding;
        this._keyId4 = bd[4].getKeyId();
        this._visibility4 = bd[4].visibility;
        protoEI.eventEmitterAccessors[4] = bd[4].createEventEmitterAccessors();
        protoEI.hostActionAccessors[4] = bd[4].createHostActionAccessors();
      }
      if (length > 5) {
        this._binding5 = bd[5].binding;
        this._keyId5 = bd[5].getKeyId();
        this._visibility5 = bd[5].visibility;
        protoEI.eventEmitterAccessors[5] = bd[5].createEventEmitterAccessors();
        protoEI.hostActionAccessors[5] = bd[5].createHostActionAccessors();
      }
      if (length > 6) {
        this._binding6 = bd[6].binding;
        this._keyId6 = bd[6].getKeyId();
        this._visibility6 = bd[6].visibility;
        protoEI.eventEmitterAccessors[6] = bd[6].createEventEmitterAccessors();
        protoEI.hostActionAccessors[6] = bd[6].createHostActionAccessors();
      }
      if (length > 7) {
        this._binding7 = bd[7].binding;
        this._keyId7 = bd[7].getKeyId();
        this._visibility7 = bd[7].visibility;
        protoEI.eventEmitterAccessors[7] = bd[7].createEventEmitterAccessors();
        protoEI.hostActionAccessors[7] = bd[7].createHostActionAccessors();
      }
      if (length > 8) {
        this._binding8 = bd[8].binding;
        this._keyId8 = bd[8].getKeyId();
        this._visibility8 = bd[8].visibility;
        protoEI.eventEmitterAccessors[8] = bd[8].createEventEmitterAccessors();
        protoEI.hostActionAccessors[8] = bd[8].createHostActionAccessors();
      }
      if (length > 9) {
        this._binding9 = bd[9].binding;
        this._keyId9 = bd[9].getKeyId();
        this._visibility9 = bd[9].visibility;
        protoEI.eventEmitterAccessors[9] = bd[9].createEventEmitterAccessors();
        protoEI.hostActionAccessors[9] = bd[9].createHostActionAccessors();
      }
    }
    _ProtoElementInjectorInlineStrategy.prototype.hasBindings = function() {
      return lang_1.isPresent(this._binding0);
    };
    _ProtoElementInjectorInlineStrategy.prototype.getBindingAtIndex = function(index) {
      if (index == 0)
        return this._binding0;
      if (index == 1)
        return this._binding1;
      if (index == 2)
        return this._binding2;
      if (index == 3)
        return this._binding3;
      if (index == 4)
        return this._binding4;
      if (index == 5)
        return this._binding5;
      if (index == 6)
        return this._binding6;
      if (index == 7)
        return this._binding7;
      if (index == 8)
        return this._binding8;
      if (index == 9)
        return this._binding9;
      throw new OutOfBoundsAccess(index);
    };
    _ProtoElementInjectorInlineStrategy.prototype.createElementInjectorStrategy = function(ei) {
      return new ElementInjectorInlineStrategy(this, ei);
    };
    return _ProtoElementInjectorInlineStrategy;
  })();
  var _ProtoElementInjectorDynamicStrategy = (function() {
    function _ProtoElementInjectorDynamicStrategy(protoInj, bd) {
      var len = bd.length;
      this._bindings = collection_1.ListWrapper.createFixedSize(len);
      this._keyIds = collection_1.ListWrapper.createFixedSize(len);
      this._visibilities = collection_1.ListWrapper.createFixedSize(len);
      for (var i = 0; i < len; i++) {
        this._bindings[i] = bd[i].binding;
        this._keyIds[i] = bd[i].getKeyId();
        this._visibilities[i] = bd[i].visibility;
        protoInj.eventEmitterAccessors[i] = bd[i].createEventEmitterAccessors();
        protoInj.hostActionAccessors[i] = bd[i].createHostActionAccessors();
      }
    }
    _ProtoElementInjectorDynamicStrategy.prototype.hasBindings = function() {
      return lang_1.isPresent(this._bindings[0]);
    };
    _ProtoElementInjectorDynamicStrategy.prototype.getBindingAtIndex = function(index) {
      if (index < 0 || index >= this._bindings.length) {
        throw new OutOfBoundsAccess(index);
      }
      return this._bindings[index];
    };
    _ProtoElementInjectorDynamicStrategy.prototype.createElementInjectorStrategy = function(ei) {
      return new ElementInjectorDynamicStrategy(this, ei);
    };
    return _ProtoElementInjectorDynamicStrategy;
  })();
  var ElementInjector = (function(_super) {
    __extends(ElementInjector, _super);
    function ElementInjector(_proto, parent) {
      _super.call(this, parent);
      this._proto = _proto;
      this._lightDomAppInjector = null;
      this._shadowDomAppInjector = null;
      this._preBuiltObjects = null;
      this._constructionCounter = 0;
      this._strategy = _proto._strategy.createElementInjectorStrategy(this);
      this._constructionCounter = 0;
      this.hydrated = false;
      this._buildQueries();
      this._addParentQueries();
    }
    ElementInjector.prototype.dehydrate = function() {
      this.hydrated = false;
      this._host = null;
      this._preBuiltObjects = null;
      this._lightDomAppInjector = null;
      this._shadowDomAppInjector = null;
      this._strategy.callOnDestroy();
      this._strategy.clearInstances();
      this._constructionCounter = 0;
    };
    ElementInjector.prototype.onAllChangesDone = function() {
      if (lang_1.isPresent(this._query0) && this._query0.originator === this) {
        this._query0.list.fireCallbacks();
      }
      if (lang_1.isPresent(this._query1) && this._query1.originator === this) {
        this._query1.list.fireCallbacks();
      }
      if (lang_1.isPresent(this._query2) && this._query2.originator === this) {
        this._query2.list.fireCallbacks();
      }
    };
    ElementInjector.prototype.hydrate = function(injector, host, preBuiltObjects) {
      var p = this._proto;
      this._host = host;
      this._lightDomAppInjector = injector;
      this._preBuiltObjects = preBuiltObjects;
      if (p._firstBindingIsComponent) {
        this._shadowDomAppInjector = this._createShadowDomAppInjector(this._strategy.getComponentBinding(), injector);
      }
      this._checkShadowDomAppInjector(this._shadowDomAppInjector);
      this._strategy.hydrate();
      this._addVarBindingsToQueries();
      this.hydrated = true;
    };
    ElementInjector.prototype.hasVariableBinding = function(name) {
      var vb = this._proto.directiveVariableBindings;
      return lang_1.isPresent(vb) && vb.has(name);
    };
    ElementInjector.prototype.getVariableBinding = function(name) {
      var index = this._proto.directiveVariableBindings.get(name);
      return lang_1.isPresent(index) ? this.getDirectiveAtIndex(index) : this.getElementRef();
    };
    ElementInjector.prototype._createShadowDomAppInjector = function(componentDirective, appInjector) {
      if (!collection_1.ListWrapper.isEmpty(componentDirective.resolvedAppInjectables)) {
        return appInjector.createChildFromResolved(componentDirective.resolvedAppInjectables);
      } else {
        return appInjector;
      }
    };
    ElementInjector.prototype._checkShadowDomAppInjector = function(shadowDomAppInjector) {
      if (this._proto._firstBindingIsComponent && lang_1.isBlank(shadowDomAppInjector)) {
        throw new lang_1.BaseException('A shadowDomAppInjector is required as this ElementInjector contains a component');
      } else if (!this._proto._firstBindingIsComponent && lang_1.isPresent(shadowDomAppInjector)) {
        throw new lang_1.BaseException('No shadowDomAppInjector allowed as there is not component stored in this ElementInjector');
      }
    };
    ElementInjector.prototype.get = function(token) {
      return this._getByKey(di_1.Key.get(token), visibility_1.self, false, null);
    };
    ElementInjector.prototype.hasDirective = function(type) {
      return this._strategy.getObjByKeyId(di_1.Key.get(type).id, LIGHT_DOM_AND_SHADOW_DOM) !== _undefined;
    };
    ElementInjector.prototype.getEventEmitterAccessors = function() {
      return this._proto.eventEmitterAccessors;
    };
    ElementInjector.prototype.getHostActionAccessors = function() {
      return this._proto.hostActionAccessors;
    };
    ElementInjector.prototype.getDirectiveVariableBindings = function() {
      return this._proto.directiveVariableBindings;
    };
    ElementInjector.prototype.getComponent = function() {
      return this._strategy.getComponent();
    };
    ElementInjector.prototype.getElementRef = function() {
      return this._preBuiltObjects.view.elementRefs[this._proto.index];
    };
    ElementInjector.prototype.getViewContainerRef = function() {
      return new view_container_ref_1.ViewContainerRef(this._preBuiltObjects.viewManager, this.getElementRef());
    };
    ElementInjector.prototype.directParent = function() {
      return this._proto.distanceToParent < 2 ? this.parent : null;
    };
    ElementInjector.prototype._isComponentKey = function(key) {
      return this._strategy.isComponentKey(key);
    };
    ElementInjector.prototype._new = function(binding) {
      if (this._constructionCounter++ > this._strategy.getMaxDirectives()) {
        throw new di_1.CyclicDependencyError(binding.key);
      }
      var factory = binding.factory;
      var deps = binding.dependencies;
      var length = deps.length;
      var d0,
          d1,
          d2,
          d3,
          d4,
          d5,
          d6,
          d7,
          d8,
          d9;
      try {
        d0 = length > 0 ? this._getByDependency(deps[0], binding.key) : null;
        d1 = length > 1 ? this._getByDependency(deps[1], binding.key) : null;
        d2 = length > 2 ? this._getByDependency(deps[2], binding.key) : null;
        d3 = length > 3 ? this._getByDependency(deps[3], binding.key) : null;
        d4 = length > 4 ? this._getByDependency(deps[4], binding.key) : null;
        d5 = length > 5 ? this._getByDependency(deps[5], binding.key) : null;
        d6 = length > 6 ? this._getByDependency(deps[6], binding.key) : null;
        d7 = length > 7 ? this._getByDependency(deps[7], binding.key) : null;
        d8 = length > 8 ? this._getByDependency(deps[8], binding.key) : null;
        d9 = length > 9 ? this._getByDependency(deps[9], binding.key) : null;
      } catch (e) {
        if (e instanceof di_1.AbstractBindingError)
          e.addKey(binding.key);
        throw e;
      }
      var obj;
      switch (length) {
        case 0:
          obj = factory();
          break;
        case 1:
          obj = factory(d0);
          break;
        case 2:
          obj = factory(d0, d1);
          break;
        case 3:
          obj = factory(d0, d1, d2);
          break;
        case 4:
          obj = factory(d0, d1, d2, d3);
          break;
        case 5:
          obj = factory(d0, d1, d2, d3, d4);
          break;
        case 6:
          obj = factory(d0, d1, d2, d3, d4, d5);
          break;
        case 7:
          obj = factory(d0, d1, d2, d3, d4, d5, d6);
          break;
        case 8:
          obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
          break;
        case 9:
          obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
          break;
        case 10:
          obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
          break;
      }
      this._addToQueries(obj, binding.key.token);
      return obj;
    };
    ElementInjector.prototype._getByDependency = function(dep, requestor) {
      if (!(dep instanceof DirectiveDependency)) {
        return this._getByKey(dep.key, dep.visibility, dep.optional, requestor);
      }
      var dirDep = dep;
      if (lang_1.isPresent(dirDep.attributeName))
        return this._buildAttribute(dirDep);
      if (lang_1.isPresent(dirDep.queryDecorator))
        return this._findQuery(dirDep.queryDecorator).list;
      if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
        var componentView = this._preBuiltObjects.view.componentChildViews[this._proto.index];
        return componentView.changeDetector.ref;
      }
      if (dirDep.key.id === StaticKeys.instance().elementRefId) {
        return this.getElementRef();
      }
      if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
        return this.getViewContainerRef();
      }
      if (dirDep.key.id === StaticKeys.instance().protoViewId) {
        if (lang_1.isBlank(this._preBuiltObjects.protoView)) {
          if (dirDep.optional) {
            return null;
          }
          throw new di_1.NoBindingError(dirDep.key);
        }
        return new view_ref_1.ProtoViewRef(this._preBuiltObjects.protoView);
      }
      return this._getByKey(dirDep.key, dirDep.visibility, dirDep.optional, requestor);
    };
    ElementInjector.prototype._buildAttribute = function(dep) {
      var attributes = this._proto.attributes;
      if (lang_1.isPresent(attributes) && attributes.has(dep.attributeName)) {
        return attributes.get(dep.attributeName);
      } else {
        return null;
      }
    };
    ElementInjector.prototype._buildQueriesForDeps = function(deps) {
      for (var i = 0; i < deps.length; i++) {
        var dep = deps[i];
        if (lang_1.isPresent(dep.queryDecorator)) {
          this._createQueryRef(dep.queryDecorator);
        }
      }
    };
    ElementInjector.prototype._addVarBindingsToQueries = function() {
      this._addVarBindingsToQuery(this._query0);
      this._addVarBindingsToQuery(this._query1);
      this._addVarBindingsToQuery(this._query2);
    };
    ElementInjector.prototype._addVarBindingsToQuery = function(queryRef) {
      if (lang_1.isBlank(queryRef) || !queryRef.query.isVarBindingQuery)
        return ;
      var vb = queryRef.query.varBindings;
      for (var i = 0; i < vb.length; ++i) {
        if (this.hasVariableBinding(vb[i])) {
          queryRef.list.add(this.getVariableBinding(vb[i]));
        }
      }
    };
    ElementInjector.prototype._createQueryRef = function(query) {
      var queryList = new query_list_1.QueryList();
      if (lang_1.isBlank(this._query0)) {
        this._query0 = new QueryRef(query, queryList, this);
      } else if (lang_1.isBlank(this._query1)) {
        this._query1 = new QueryRef(query, queryList, this);
      } else if (lang_1.isBlank(this._query2)) {
        this._query2 = new QueryRef(query, queryList, this);
      } else
        throw new QueryError();
    };
    ElementInjector.prototype._addToQueries = function(obj, token) {
      if (lang_1.isPresent(this._query0) && (this._query0.query.selector === token)) {
        this._query0.list.add(obj);
      }
      if (lang_1.isPresent(this._query1) && (this._query1.query.selector === token)) {
        this._query1.list.add(obj);
      }
      if (lang_1.isPresent(this._query2) && (this._query2.query.selector === token)) {
        this._query2.list.add(obj);
      }
    };
    ElementInjector.prototype.addDirectivesMatchingQuery = function(query, list) {
      this._strategy.addDirectivesMatchingQuery(query, list);
    };
    ElementInjector.prototype._buildQueries = function() {
      if (lang_1.isPresent(this._proto)) {
        this._strategy.buildQueries();
      }
    };
    ElementInjector.prototype._findQuery = function(query) {
      if (lang_1.isPresent(this._query0) && this._query0.query === query) {
        return this._query0;
      }
      if (lang_1.isPresent(this._query1) && this._query1.query === query) {
        return this._query1;
      }
      if (lang_1.isPresent(this._query2) && this._query2.query === query) {
        return this._query2;
      }
      throw new lang_1.BaseException("Cannot find query for directive " + query + ".");
    };
    ElementInjector.prototype._hasQuery = function(query) {
      return this._query0 == query || this._query1 == query || this._query2 == query;
    };
    ElementInjector.prototype.link = function(parent) {
      parent.addChild(this);
      this._addParentQueries();
    };
    ElementInjector.prototype.linkAfter = function(parent, prevSibling) {
      parent.addChildAfter(this, prevSibling);
      this._addParentQueries();
    };
    ElementInjector.prototype._addParentQueries = function() {
      if (lang_1.isBlank(this.parent))
        return ;
      if (lang_1.isPresent(this.parent._query0)) {
        this._addQueryToTree(this.parent._query0);
        if (this.hydrated)
          this.parent._query0.update();
      }
      if (lang_1.isPresent(this.parent._query1)) {
        this._addQueryToTree(this.parent._query1);
        if (this.hydrated)
          this.parent._query1.update();
      }
      if (lang_1.isPresent(this.parent._query2)) {
        this._addQueryToTree(this.parent._query2);
        if (this.hydrated)
          this.parent._query2.update();
      }
    };
    ElementInjector.prototype.unlink = function() {
      var queriesToUpdate = [];
      if (lang_1.isPresent(this.parent._query0)) {
        this._pruneQueryFromTree(this.parent._query0);
        queriesToUpdate.push(this.parent._query0);
      }
      if (lang_1.isPresent(this.parent._query1)) {
        this._pruneQueryFromTree(this.parent._query1);
        queriesToUpdate.push(this.parent._query1);
      }
      if (lang_1.isPresent(this.parent._query2)) {
        this._pruneQueryFromTree(this.parent._query2);
        queriesToUpdate.push(this.parent._query2);
      }
      this.remove();
      collection_1.ListWrapper.forEach(queriesToUpdate, function(q) {
        return q.update();
      });
    };
    ElementInjector.prototype._pruneQueryFromTree = function(query) {
      this._removeQueryRef(query);
      var child = this._head;
      while (lang_1.isPresent(child)) {
        child._pruneQueryFromTree(query);
        child = child._next;
      }
    };
    ElementInjector.prototype._addQueryToTree = function(queryRef) {
      if (queryRef.query.descendants == false) {
        if (this == queryRef.originator) {
          this._addQueryToTreeSelfAndRecurse(queryRef);
        } else if (this.parent == queryRef.originator) {
          this._assignQueryRef(queryRef);
        }
      } else {
        this._addQueryToTreeSelfAndRecurse(queryRef);
      }
    };
    ElementInjector.prototype._addQueryToTreeSelfAndRecurse = function(queryRef) {
      this._assignQueryRef(queryRef);
      var child = this._head;
      while (lang_1.isPresent(child)) {
        child._addQueryToTree(queryRef);
        child = child._next;
      }
    };
    ElementInjector.prototype._assignQueryRef = function(query) {
      if (lang_1.isBlank(this._query0)) {
        this._query0 = query;
        return ;
      } else if (lang_1.isBlank(this._query1)) {
        this._query1 = query;
        return ;
      } else if (lang_1.isBlank(this._query2)) {
        this._query2 = query;
        return ;
      }
      throw new QueryError();
    };
    ElementInjector.prototype._removeQueryRef = function(query) {
      if (this._query0 == query)
        this._query0 = null;
      if (this._query1 == query)
        this._query1 = null;
      if (this._query2 == query)
        this._query2 = null;
    };
    ElementInjector.prototype._getByKey = function(key, visibility, optional, requestor) {
      var ei = this;
      var currentVisibility = this._isComponentKey(requestor) ? LIGHT_DOM_AND_SHADOW_DOM : LIGHT_DOM;
      var depth = visibility.depth;
      if (!visibility.includeSelf) {
        depth -= ei._proto.distanceToParent;
        if (lang_1.isPresent(ei._parent)) {
          ei = ei._parent;
        } else {
          ei = ei._host;
          currentVisibility = visibility.crossComponentBoundaries ? LIGHT_DOM : SHADOW_DOM;
        }
      }
      while (ei != null && depth >= 0) {
        var preBuiltObj = ei._getPreBuiltObjectByKeyId(key.id);
        if (preBuiltObj !== _undefined)
          return preBuiltObj;
        var dir = ei._getObjByKeyId(key.id, currentVisibility);
        if (dir !== _undefined)
          return dir;
        depth -= ei._proto.distanceToParent;
        if (currentVisibility === SHADOW_DOM)
          break;
        if (lang_1.isPresent(ei._parent)) {
          ei = ei._parent;
        } else {
          ei = ei._host;
          currentVisibility = visibility.crossComponentBoundaries ? LIGHT_DOM : SHADOW_DOM;
        }
      }
      if (lang_1.isPresent(this._host) && this._host._isComponentKey(key)) {
        return this._host.getComponent();
      } else if (optional) {
        return this._appInjector(requestor).getOptional(key);
      } else {
        return this._appInjector(requestor).get(key);
      }
    };
    ElementInjector.prototype._appInjector = function(requestor) {
      if (lang_1.isPresent(requestor) && this._isComponentKey(requestor)) {
        return this._shadowDomAppInjector;
      } else {
        return this._lightDomAppInjector;
      }
    };
    ElementInjector.prototype._getPreBuiltObjectByKeyId = function(keyId) {
      var staticKeys = StaticKeys.instance();
      if (keyId === staticKeys.viewManagerId)
        return this._preBuiltObjects.viewManager;
      return _undefined;
    };
    ElementInjector.prototype._getObjByKeyId = function(keyId, visibility) {
      return this._strategy.getObjByKeyId(keyId, visibility);
    };
    ElementInjector.prototype.getDirectiveAtIndex = function(index) {
      return this._strategy.getDirectiveAtIndex(index);
    };
    ElementInjector.prototype.hasInstances = function() {
      return this._constructionCounter > 0;
    };
    ElementInjector.prototype.getLightDomAppInjector = function() {
      return this._lightDomAppInjector;
    };
    ElementInjector.prototype.getShadowDomAppInjector = function() {
      return this._shadowDomAppInjector;
    };
    ElementInjector.prototype.getHost = function() {
      return this._host;
    };
    ElementInjector.prototype.getBoundElementIndex = function() {
      return this._proto.index;
    };
    return ElementInjector;
  })(TreeNode);
  exports.ElementInjector = ElementInjector;
  var ElementInjectorInlineStrategy = (function() {
    function ElementInjectorInlineStrategy(_protoStrategy, _ei) {
      this._protoStrategy = _protoStrategy;
      this._ei = _ei;
      this._obj0 = null;
      this._obj1 = null;
      this._obj2 = null;
      this._obj3 = null;
      this._obj4 = null;
      this._obj5 = null;
      this._obj6 = null;
      this._obj7 = null;
      this._obj8 = null;
      this._obj9 = null;
    }
    ElementInjectorInlineStrategy.prototype.callOnDestroy = function() {
      var p = this._protoStrategy;
      if (p._binding0 instanceof DirectiveBinding && p._binding0.callOnDestroy) {
        this._obj0.onDestroy();
      }
      if (p._binding1 instanceof DirectiveBinding && p._binding1.callOnDestroy) {
        this._obj1.onDestroy();
      }
      if (p._binding2 instanceof DirectiveBinding && p._binding2.callOnDestroy) {
        this._obj2.onDestroy();
      }
      if (p._binding3 instanceof DirectiveBinding && p._binding3.callOnDestroy) {
        this._obj3.onDestroy();
      }
      if (p._binding4 instanceof DirectiveBinding && p._binding4.callOnDestroy) {
        this._obj4.onDestroy();
      }
      if (p._binding5 instanceof DirectiveBinding && p._binding5.callOnDestroy) {
        this._obj5.onDestroy();
      }
      if (p._binding6 instanceof DirectiveBinding && p._binding6.callOnDestroy) {
        this._obj6.onDestroy();
      }
      if (p._binding7 instanceof DirectiveBinding && p._binding7.callOnDestroy) {
        this._obj7.onDestroy();
      }
      if (p._binding8 instanceof DirectiveBinding && p._binding8.callOnDestroy) {
        this._obj8.onDestroy();
      }
      if (p._binding9 instanceof DirectiveBinding && p._binding9.callOnDestroy) {
        this._obj9.onDestroy();
      }
    };
    ElementInjectorInlineStrategy.prototype.clearInstances = function() {
      this._obj0 = null;
      this._obj1 = null;
      this._obj2 = null;
      this._obj3 = null;
      this._obj4 = null;
      this._obj5 = null;
      this._obj6 = null;
      this._obj7 = null;
      this._obj8 = null;
      this._obj9 = null;
    };
    ElementInjectorInlineStrategy.prototype.hydrate = function() {
      var p = this._protoStrategy;
      var e = this._ei;
      if (lang_1.isPresent(p._keyId0) && lang_1.isBlank(this._obj0))
        this._obj0 = e._new(p._binding0);
      if (lang_1.isPresent(p._keyId1) && lang_1.isBlank(this._obj1))
        this._obj1 = e._new(p._binding1);
      if (lang_1.isPresent(p._keyId2) && lang_1.isBlank(this._obj2))
        this._obj2 = e._new(p._binding2);
      if (lang_1.isPresent(p._keyId3) && lang_1.isBlank(this._obj3))
        this._obj3 = e._new(p._binding3);
      if (lang_1.isPresent(p._keyId4) && lang_1.isBlank(this._obj4))
        this._obj4 = e._new(p._binding4);
      if (lang_1.isPresent(p._keyId5) && lang_1.isBlank(this._obj5))
        this._obj5 = e._new(p._binding5);
      if (lang_1.isPresent(p._keyId6) && lang_1.isBlank(this._obj6))
        this._obj6 = e._new(p._binding6);
      if (lang_1.isPresent(p._keyId7) && lang_1.isBlank(this._obj7))
        this._obj7 = e._new(p._binding7);
      if (lang_1.isPresent(p._keyId8) && lang_1.isBlank(this._obj8))
        this._obj8 = e._new(p._binding8);
      if (lang_1.isPresent(p._keyId9) && lang_1.isBlank(this._obj9))
        this._obj9 = e._new(p._binding9);
    };
    ElementInjectorInlineStrategy.prototype.getComponent = function() {
      return this._obj0;
    };
    ElementInjectorInlineStrategy.prototype.isComponentKey = function(key) {
      return this._ei._proto._firstBindingIsComponent && lang_1.isPresent(key) && key.id === this._protoStrategy._keyId0;
    };
    ElementInjectorInlineStrategy.prototype.buildQueries = function() {
      var p = this._protoStrategy;
      if (p._binding0 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding0.dependencies);
      }
      if (p._binding1 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding1.dependencies);
      }
      if (p._binding2 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding2.dependencies);
      }
      if (p._binding3 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding3.dependencies);
      }
      if (p._binding4 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding4.dependencies);
      }
      if (p._binding5 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding5.dependencies);
      }
      if (p._binding6 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding6.dependencies);
      }
      if (p._binding7 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding7.dependencies);
      }
      if (p._binding8 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding8.dependencies);
      }
      if (p._binding9 instanceof DirectiveBinding) {
        this._ei._buildQueriesForDeps(p._binding9.dependencies);
      }
    };
    ElementInjectorInlineStrategy.prototype.addDirectivesMatchingQuery = function(query, list) {
      var p = this._protoStrategy;
      if (lang_1.isPresent(p._binding0) && p._binding0.key.token === query.selector)
        list.push(this._obj0);
      if (lang_1.isPresent(p._binding1) && p._binding1.key.token === query.selector)
        list.push(this._obj1);
      if (lang_1.isPresent(p._binding2) && p._binding2.key.token === query.selector)
        list.push(this._obj2);
      if (lang_1.isPresent(p._binding3) && p._binding3.key.token === query.selector)
        list.push(this._obj3);
      if (lang_1.isPresent(p._binding4) && p._binding4.key.token === query.selector)
        list.push(this._obj4);
      if (lang_1.isPresent(p._binding5) && p._binding5.key.token === query.selector)
        list.push(this._obj5);
      if (lang_1.isPresent(p._binding6) && p._binding6.key.token === query.selector)
        list.push(this._obj6);
      if (lang_1.isPresent(p._binding7) && p._binding7.key.token === query.selector)
        list.push(this._obj7);
      if (lang_1.isPresent(p._binding8) && p._binding8.key.token === query.selector)
        list.push(this._obj8);
      if (lang_1.isPresent(p._binding9) && p._binding9.key.token === query.selector)
        list.push(this._obj9);
    };
    ElementInjectorInlineStrategy.prototype.getObjByKeyId = function(keyId, visibility) {
      var p = this._protoStrategy;
      if (p._keyId0 === keyId && (p._visibility0 & visibility) > 0) {
        if (lang_1.isBlank(this._obj0)) {
          this._obj0 = this._ei._new(p._binding0);
        }
        return this._obj0;
      }
      if (p._keyId1 === keyId && (p._visibility1 & visibility) > 0) {
        if (lang_1.isBlank(this._obj1)) {
          this._obj1 = this._ei._new(p._binding1);
        }
        return this._obj1;
      }
      if (p._keyId2 === keyId && (p._visibility2 & visibility) > 0) {
        if (lang_1.isBlank(this._obj2)) {
          this._obj2 = this._ei._new(p._binding2);
        }
        return this._obj2;
      }
      if (p._keyId3 === keyId && (p._visibility3 & visibility) > 0) {
        if (lang_1.isBlank(this._obj3)) {
          this._obj3 = this._ei._new(p._binding3);
        }
        return this._obj3;
      }
      if (p._keyId4 === keyId && (p._visibility4 & visibility) > 0) {
        if (lang_1.isBlank(this._obj4)) {
          this._obj4 = this._ei._new(p._binding4);
        }
        return this._obj4;
      }
      if (p._keyId5 === keyId && (p._visibility5 & visibility) > 0) {
        if (lang_1.isBlank(this._obj5)) {
          this._obj5 = this._ei._new(p._binding5);
        }
        return this._obj5;
      }
      if (p._keyId6 === keyId && (p._visibility6 & visibility) > 0) {
        if (lang_1.isBlank(this._obj6)) {
          this._obj6 = this._ei._new(p._binding6);
        }
        return this._obj6;
      }
      if (p._keyId7 === keyId && (p._visibility7 & visibility) > 0) {
        if (lang_1.isBlank(this._obj7)) {
          this._obj7 = this._ei._new(p._binding7);
        }
        return this._obj7;
      }
      if (p._keyId8 === keyId && (p._visibility8 & visibility) > 0) {
        if (lang_1.isBlank(this._obj8)) {
          this._obj8 = this._ei._new(p._binding8);
        }
        return this._obj8;
      }
      if (p._keyId9 === keyId && (p._visibility9 & visibility) > 0) {
        if (lang_1.isBlank(this._obj9)) {
          this._obj9 = this._ei._new(p._binding9);
        }
        return this._obj9;
      }
      return _undefined;
    };
    ElementInjectorInlineStrategy.prototype.getDirectiveAtIndex = function(index) {
      if (index == 0)
        return this._obj0;
      if (index == 1)
        return this._obj1;
      if (index == 2)
        return this._obj2;
      if (index == 3)
        return this._obj3;
      if (index == 4)
        return this._obj4;
      if (index == 5)
        return this._obj5;
      if (index == 6)
        return this._obj6;
      if (index == 7)
        return this._obj7;
      if (index == 8)
        return this._obj8;
      if (index == 9)
        return this._obj9;
      throw new OutOfBoundsAccess(index);
    };
    ElementInjectorInlineStrategy.prototype.getComponentBinding = function() {
      return this._protoStrategy._binding0;
    };
    ElementInjectorInlineStrategy.prototype.getMaxDirectives = function() {
      return _MAX_DIRECTIVE_CONSTRUCTION_COUNTER;
    };
    return ElementInjectorInlineStrategy;
  })();
  var ElementInjectorDynamicStrategy = (function() {
    function ElementInjectorDynamicStrategy(_protoStrategy, _ei) {
      this._protoStrategy = _protoStrategy;
      this._ei = _ei;
      this._objs = collection_1.ListWrapper.createFixedSize(_protoStrategy._bindings.length);
    }
    ElementInjectorDynamicStrategy.prototype.callOnDestroy = function() {
      var p = this._protoStrategy;
      for (var i = 0; i < p._bindings.length; i++) {
        if (p._bindings[i] instanceof DirectiveBinding && p._bindings[i].callOnDestroy) {
          this._objs[i].onDestroy();
        }
      }
    };
    ElementInjectorDynamicStrategy.prototype.clearInstances = function() {
      collection_1.ListWrapper.fill(this._objs, null);
    };
    ElementInjectorDynamicStrategy.prototype.hydrate = function() {
      var p = this._protoStrategy;
      for (var i = 0; i < p._keyIds.length; i++) {
        if (lang_1.isPresent(p._keyIds[i]) && lang_1.isBlank(this._objs[i])) {
          this._objs[i] = this._ei._new(p._bindings[i]);
        }
      }
    };
    ElementInjectorDynamicStrategy.prototype.getComponent = function() {
      return this._objs[0];
    };
    ElementInjectorDynamicStrategy.prototype.isComponentKey = function(key) {
      return this._ei._proto._firstBindingIsComponent && lang_1.isPresent(key) && key.id === this._protoStrategy._keyIds[0];
    };
    ElementInjectorDynamicStrategy.prototype.buildQueries = function() {
      var p = this._protoStrategy;
      for (var i = 0; i < p._bindings.length; i++) {
        if (p._bindings[i] instanceof DirectiveBinding) {
          this._ei._buildQueriesForDeps(p._bindings[i].dependencies);
        }
      }
    };
    ElementInjectorDynamicStrategy.prototype.addDirectivesMatchingQuery = function(query, list) {
      var p = this._protoStrategy;
      for (var i = 0; i < p._bindings.length; i++) {
        if (p._bindings[i].key.token === query.selector)
          list.push(this._objs[i]);
      }
    };
    ElementInjectorDynamicStrategy.prototype.getObjByKeyId = function(keyId, visibility) {
      var p = this._protoStrategy;
      for (var i = 0; i < p._keyIds.length; i++) {
        if (p._keyIds[i] === keyId && (p._visibilities[i] & visibility) > 0) {
          if (lang_1.isBlank(this._objs[i])) {
            this._objs[i] = this._ei._new(p._bindings[i]);
          }
          return this._objs[i];
        }
      }
      return _undefined;
    };
    ElementInjectorDynamicStrategy.prototype.getDirectiveAtIndex = function(index) {
      if (index < 0 || index >= this._objs.length) {
        throw new OutOfBoundsAccess(index);
      }
      return this._objs[index];
    };
    ElementInjectorDynamicStrategy.prototype.getComponentBinding = function() {
      return this._protoStrategy._bindings[0];
    };
    ElementInjectorDynamicStrategy.prototype.getMaxDirectives = function() {
      return this._objs.length;
    };
    return ElementInjectorDynamicStrategy;
  })();
  var OutOfBoundsAccess = (function(_super) {
    __extends(OutOfBoundsAccess, _super);
    function OutOfBoundsAccess(index) {
      _super.call(this);
      this.message = "Index " + index + " is out-of-bounds.";
    }
    OutOfBoundsAccess.prototype.toString = function() {
      return this.message;
    };
    return OutOfBoundsAccess;
  })(lang_1.BaseException);
  var QueryError = (function(_super) {
    __extends(QueryError, _super);
    function QueryError() {
      _super.call(this);
      this.message = 'Only 3 queries can be concurrently active in a template.';
    }
    QueryError.prototype.toString = function() {
      return this.message;
    };
    return QueryError;
  })(lang_1.BaseException);
  var QueryRef = (function() {
    function QueryRef(query, list, originator) {
      this.query = query;
      this.list = list;
      this.originator = originator;
    }
    QueryRef.prototype.update = function() {
      var aggregator = [];
      this.visit(this.originator, aggregator);
      this.list.reset(aggregator);
    };
    QueryRef.prototype.visit = function(inj, aggregator) {
      if (lang_1.isBlank(inj) || !inj._hasQuery(this))
        return ;
      if (this.query.isVarBindingQuery) {
        this._aggregateVariableBindings(inj, aggregator);
      } else {
        this._aggregateDirective(inj, aggregator);
      }
      var child = inj._head;
      while (lang_1.isPresent(child)) {
        this.visit(child, aggregator);
        child = child._next;
      }
    };
    QueryRef.prototype._aggregateVariableBindings = function(inj, aggregator) {
      var vb = this.query.varBindings;
      for (var i = 0; i < vb.length; ++i) {
        if (inj.hasVariableBinding(vb[i])) {
          aggregator.push(inj.getVariableBinding(vb[i]));
        }
      }
    };
    QueryRef.prototype._aggregateDirective = function(inj, aggregator) {
      inj.addDirectivesMatchingQuery(this.query, aggregator);
    };
    return QueryRef;
  })();
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/http", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/http/http", "npm:angular2@2.0.0-alpha.28/src/http/backends/xhr_backend", "npm:angular2@2.0.0-alpha.28/src/http/backends/browser_xhr", "npm:angular2@2.0.0-alpha.28/src/http/base_request_options", "npm:angular2@2.0.0-alpha.28/src/http/backends/mock_backend", "npm:angular2@2.0.0-alpha.28/src/http/static_request", "npm:angular2@2.0.0-alpha.28/src/http/static_response", "npm:angular2@2.0.0-alpha.28/src/http/headers", "npm:angular2@2.0.0-alpha.28/src/http/enums", "npm:angular2@2.0.0-alpha.28/src/http/url_search_params"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var http_1 = require("npm:angular2@2.0.0-alpha.28/src/http/http");
  exports.Http = http_1.Http;
  exports.HttpFactory = http_1.HttpFactory;
  var xhr_backend_1 = require("npm:angular2@2.0.0-alpha.28/src/http/backends/xhr_backend");
  exports.XHRBackend = xhr_backend_1.XHRBackend;
  exports.XHRConnection = xhr_backend_1.XHRConnection;
  var browser_xhr_1 = require("npm:angular2@2.0.0-alpha.28/src/http/backends/browser_xhr");
  var base_request_options_1 = require("npm:angular2@2.0.0-alpha.28/src/http/base_request_options");
  exports.BaseRequestOptions = base_request_options_1.BaseRequestOptions;
  exports.RequestOptions = base_request_options_1.RequestOptions;
  var mock_backend_1 = require("npm:angular2@2.0.0-alpha.28/src/http/backends/mock_backend");
  exports.MockConnection = mock_backend_1.MockConnection;
  exports.MockBackend = mock_backend_1.MockBackend;
  var static_request_1 = require("npm:angular2@2.0.0-alpha.28/src/http/static_request");
  exports.Request = static_request_1.Request;
  var static_response_1 = require("npm:angular2@2.0.0-alpha.28/src/http/static_response");
  exports.Response = static_response_1.Response;
  var headers_1 = require("npm:angular2@2.0.0-alpha.28/src/http/headers");
  exports.Headers = headers_1.Headers;
  __export(require("npm:angular2@2.0.0-alpha.28/src/http/enums"));
  var url_search_params_1 = require("npm:angular2@2.0.0-alpha.28/src/http/url_search_params");
  exports.URLSearchParams = url_search_params_1.URLSearchParams;
  exports.httpInjectables = [di_1.bind(browser_xhr_1.BrowserXHR).toValue(browser_xhr_1.BrowserXHR), xhr_backend_1.XHRBackend, base_request_options_1.BaseRequestOptions, di_1.bind(http_1.HttpFactory).toFactory(http_1.HttpFactory, [xhr_backend_1.XHRBackend, base_request_options_1.BaseRequestOptions]), http_1.Http];
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1/index", ["npm:rx@2.5.1/dist/rx", "npm:rx@2.5.1/dist/rx.aggregates", "npm:rx@2.5.1/dist/rx.async", "npm:rx@2.5.1/dist/rx.backpressure", "npm:rx@2.5.1/dist/rx.binding", "npm:rx@2.5.1/dist/rx.coincidence", "npm:rx@2.5.1/dist/rx.experimental", "npm:rx@2.5.1/dist/rx.joinpatterns", "npm:rx@2.5.1/dist/rx.sorting", "npm:rx@2.5.1/dist/rx.virtualtime", "npm:rx@2.5.1/dist/rx.testing", "npm:rx@2.5.1/dist/rx.time"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  var Rx = require("npm:rx@2.5.1/dist/rx");
  require("npm:rx@2.5.1/dist/rx.aggregates");
  require("npm:rx@2.5.1/dist/rx.async");
  require("npm:rx@2.5.1/dist/rx.backpressure");
  require("npm:rx@2.5.1/dist/rx.binding");
  require("npm:rx@2.5.1/dist/rx.coincidence");
  require("npm:rx@2.5.1/dist/rx.experimental");
  require("npm:rx@2.5.1/dist/rx.joinpatterns");
  require("npm:rx@2.5.1/dist/rx.sorting");
  require("npm:rx@2.5.1/dist/rx.virtualtime");
  require("npm:rx@2.5.1/dist/rx.testing");
  require("npm:rx@2.5.1/dist/rx.time");
  module.exports = Rx;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/compiler/compiler", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_resolver", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref", "npm:angular2@2.0.0-alpha.28/src/core/compiler/element_injector", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_resolver", "npm:angular2@2.0.0-alpha.28/src/core/compiler/component_url_mapper", "npm:angular2@2.0.0-alpha.28/src/core/compiler/proto_view_factory", "npm:angular2@2.0.0-alpha.28/src/services/url_resolver", "npm:angular2@2.0.0-alpha.28/src/services/app_root_url", "npm:angular2@2.0.0-alpha.28/src/render/api"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var directive_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_resolver");
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref");
  var element_injector_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_injector");
  var view_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_resolver");
  var component_url_mapper_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/component_url_mapper");
  var proto_view_factory_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/proto_view_factory");
  var url_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/services/url_resolver");
  var app_root_url_1 = require("npm:angular2@2.0.0-alpha.28/src/services/app_root_url");
  var renderApi = require("npm:angular2@2.0.0-alpha.28/src/render/api");
  var CompilerCache = (function() {
    function CompilerCache() {
      this._cache = new collection_1.Map();
      this._hostCache = new collection_1.Map();
    }
    CompilerCache.prototype.set = function(component, protoView) {
      this._cache.set(component, protoView);
    };
    CompilerCache.prototype.get = function(component) {
      var result = this._cache.get(component);
      return lang_1.normalizeBlank(result);
    };
    CompilerCache.prototype.setHost = function(component, protoView) {
      this._hostCache.set(component, protoView);
    };
    CompilerCache.prototype.getHost = function(component) {
      var result = this._hostCache.get(component);
      return lang_1.normalizeBlank(result);
    };
    CompilerCache.prototype.clear = function() {
      this._cache.clear();
      this._hostCache.clear();
    };
    CompilerCache = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [])], CompilerCache);
    return CompilerCache;
  })();
  exports.CompilerCache = CompilerCache;
  var Compiler = (function() {
    function Compiler(reader, cache, viewResolver, componentUrlMapper, urlResolver, render, protoViewFactory, appUrl) {
      this._reader = reader;
      this._compilerCache = cache;
      this._compiling = new collection_1.Map();
      this._viewResolver = viewResolver;
      this._componentUrlMapper = componentUrlMapper;
      this._urlResolver = urlResolver;
      this._appUrl = appUrl.value;
      this._render = render;
      this._protoViewFactory = protoViewFactory;
    }
    Compiler.prototype._bindDirective = function(directiveTypeOrBinding) {
      if (directiveTypeOrBinding instanceof element_injector_1.DirectiveBinding) {
        return directiveTypeOrBinding;
      } else if (directiveTypeOrBinding instanceof di_1.Binding) {
        var annotation = this._reader.resolve(directiveTypeOrBinding.token);
        return element_injector_1.DirectiveBinding.createFromBinding(directiveTypeOrBinding, annotation);
      } else {
        var annotation = this._reader.resolve(directiveTypeOrBinding);
        return element_injector_1.DirectiveBinding.createFromType(directiveTypeOrBinding, annotation);
      }
    };
    Compiler.prototype.compileInHost = function(componentTypeOrBinding) {
      var _this = this;
      var componentBinding = this._bindDirective(componentTypeOrBinding);
      Compiler._assertTypeIsComponent(componentBinding);
      var directiveMetadata = componentBinding.metadata;
      var hostPvPromise;
      var component = componentBinding.key.token;
      var hostAppProtoView = this._compilerCache.getHost(component);
      if (lang_1.isPresent(hostAppProtoView)) {
        hostPvPromise = async_1.PromiseWrapper.resolve(hostAppProtoView);
      } else {
        hostPvPromise = this._render.compileHost(directiveMetadata).then(function(hostRenderPv) {
          return _this._compileNestedProtoViews(componentBinding, hostRenderPv, [componentBinding]);
        });
      }
      return hostPvPromise.then(function(hostAppProtoView) {
        return new view_ref_1.ProtoViewRef(hostAppProtoView);
      });
    };
    Compiler.prototype._compile = function(componentBinding) {
      var _this = this;
      var component = componentBinding.key.token;
      var protoView = this._compilerCache.get(component);
      if (lang_1.isPresent(protoView)) {
        return protoView;
      }
      var pvPromise = this._compiling.get(component);
      if (lang_1.isPresent(pvPromise)) {
        return pvPromise;
      }
      var view = this._viewResolver.resolve(component);
      var directives = this._flattenDirectives(view);
      for (var i = 0; i < directives.length; i++) {
        if (!Compiler._isValidDirective(directives[i])) {
          throw new lang_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
        }
      }
      var boundDirectives = collection_1.ListWrapper.map(directives, function(directive) {
        return _this._bindDirective(directive);
      });
      var renderTemplate = this._buildRenderTemplate(component, view, boundDirectives);
      pvPromise = this._render.compile(renderTemplate).then(function(renderPv) {
        return _this._compileNestedProtoViews(componentBinding, renderPv, boundDirectives);
      });
      this._compiling.set(component, pvPromise);
      return pvPromise;
    };
    Compiler.prototype._compileNestedProtoViews = function(componentBinding, renderPv, directives) {
      var _this = this;
      var protoViews = this._protoViewFactory.createAppProtoViews(componentBinding, renderPv, directives);
      var protoView = protoViews[0];
      if (lang_1.isPresent(componentBinding)) {
        var component = componentBinding.key.token;
        if (renderPv.type === renderApi.ViewType.COMPONENT) {
          this._compilerCache.set(component, protoView);
          collection_1.MapWrapper.delete(this._compiling, component);
        } else {
          this._compilerCache.setHost(component, protoView);
        }
      }
      var nestedPVPromises = [];
      collection_1.ListWrapper.forEach(this._collectComponentElementBinders(protoViews), function(elementBinder) {
        var nestedComponent = elementBinder.componentDirective;
        var elementBinderDone = function(nestedPv) {
          elementBinder.nestedProtoView = nestedPv;
        };
        var nestedCall = _this._compile(nestedComponent);
        if (lang_1.isPromise(nestedCall)) {
          nestedPVPromises.push(nestedCall.then(elementBinderDone));
        } else {
          elementBinderDone(nestedCall);
        }
      });
      if (nestedPVPromises.length > 0) {
        return async_1.PromiseWrapper.all(nestedPVPromises).then(function(_) {
          return protoView;
        });
      } else {
        return protoView;
      }
    };
    Compiler.prototype._collectComponentElementBinders = function(protoViews) {
      var componentElementBinders = [];
      collection_1.ListWrapper.forEach(protoViews, function(protoView) {
        collection_1.ListWrapper.forEach(protoView.elementBinders, function(elementBinder) {
          if (lang_1.isPresent(elementBinder.componentDirective)) {
            componentElementBinders.push(elementBinder);
          }
        });
      });
      return componentElementBinders;
    };
    Compiler.prototype._buildRenderTemplate = function(component, view, directives) {
      var _this = this;
      var componentUrl = this._urlResolver.resolve(this._appUrl, this._componentUrlMapper.getUrl(component));
      var templateAbsUrl = null;
      var styleAbsUrls = null;
      if (lang_1.isPresent(view.templateUrl)) {
        templateAbsUrl = this._urlResolver.resolve(componentUrl, view.templateUrl);
      } else if (lang_1.isPresent(view.template)) {
        templateAbsUrl = componentUrl;
      }
      if (lang_1.isPresent(view.styleUrls)) {
        styleAbsUrls = collection_1.ListWrapper.map(view.styleUrls, function(url) {
          return _this._urlResolver.resolve(componentUrl, url);
        });
      }
      return new renderApi.ViewDefinition({
        componentId: lang_1.stringify(component),
        templateAbsUrl: templateAbsUrl,
        template: view.template,
        styleAbsUrls: styleAbsUrls,
        styles: view.styles,
        directives: collection_1.ListWrapper.map(directives, function(directiveBinding) {
          return directiveBinding.metadata;
        })
      });
    };
    Compiler.prototype._flattenDirectives = function(template) {
      if (lang_1.isBlank(template.directives))
        return [];
      var directives = [];
      this._flattenList(template.directives, directives);
      return directives;
    };
    Compiler.prototype._flattenList = function(tree, out) {
      for (var i = 0; i < tree.length; i++) {
        var item = di_1.resolveForwardRef(tree[i]);
        if (lang_1.isArray(item)) {
          this._flattenList(item, out);
        } else {
          out.push(item);
        }
      }
    };
    Compiler._isValidDirective = function(value) {
      return lang_1.isPresent(value) && (value instanceof lang_1.Type || value instanceof di_1.Binding);
    };
    Compiler._assertTypeIsComponent = function(directiveBinding) {
      if (directiveBinding.metadata.type !== renderApi.DirectiveMetadata.COMPONENT_TYPE) {
        throw new lang_1.BaseException("Could not load '" + lang_1.stringify(directiveBinding.key.token) + "' because it is not a component.");
      }
    };
    Compiler = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [directive_resolver_1.DirectiveResolver, CompilerCache, view_resolver_1.ViewResolver, component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, renderApi.RenderCompiler, proto_view_factory_1.ProtoViewFactory, app_root_url_1.AppRootUrl])], Compiler);
    return Compiler;
  })();
  exports.Compiler = Compiler;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:rx@2.5.1", ["npm:rx@2.5.1/index"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  module.exports = require("npm:rx@2.5.1/index");
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/core/application", ["npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/dom/browser_adapter", "npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter", "npm:angular2@2.0.0-alpha.28/src/core/compiler/compiler", "npm:angular2@2.0.0-alpha.28/src/reflection/reflection", "npm:angular2@2.0.0-alpha.28/change_detection", "npm:angular2@2.0.0-alpha.28/src/core/exception_handler", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_loader", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_url_resolver", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_inliner", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_resolver", "npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_resolver", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/core/zone/ng_zone", "npm:angular2@2.0.0-alpha.28/src/core/life_cycle/life_cycle", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy", "npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/emulated_unscoped_shadow_dom_strategy", "npm:angular2@2.0.0-alpha.28/src/render/xhr", "npm:angular2@2.0.0-alpha.28/src/render/xhr_impl", "npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager", "npm:angular2@2.0.0-alpha.28/src/render/dom/events/key_events", "npm:angular2@2.0.0-alpha.28/src/render/dom/events/hammer_gestures", "npm:angular2@2.0.0-alpha.28/src/core/compiler/component_url_mapper", "npm:angular2@2.0.0-alpha.28/src/services/url_resolver", "npm:angular2@2.0.0-alpha.28/src/services/app_root_url", "npm:angular2@2.0.0-alpha.28/src/core/compiler/dynamic_component_loader", "npm:angular2@2.0.0-alpha.28/src/core/testability/testability", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_pool", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager_utils", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_listener", "npm:angular2@2.0.0-alpha.28/src/core/compiler/proto_view_factory", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/render/dom/dom_renderer", "npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compiler", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref", "npm:angular2@2.0.0-alpha.28/src/core/application_tokens", "github:jspm/nodelibs-process@0.1.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  (function(process) {
    'use strict';
    var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
    var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
    var browser_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/browser_adapter");
    var dom_adapter_1 = require("npm:angular2@2.0.0-alpha.28/src/dom/dom_adapter");
    var compiler_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/compiler");
    var reflection_1 = require("npm:angular2@2.0.0-alpha.28/src/reflection/reflection");
    var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
    var exception_handler_1 = require("npm:angular2@2.0.0-alpha.28/src/core/exception_handler");
    var view_loader_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/view_loader");
    var style_url_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_url_resolver");
    var style_inliner_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/style_inliner");
    var view_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_resolver");
    var directive_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_resolver");
    var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
    var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
    var ng_zone_1 = require("npm:angular2@2.0.0-alpha.28/src/core/zone/ng_zone");
    var life_cycle_1 = require("npm:angular2@2.0.0-alpha.28/src/core/life_cycle/life_cycle");
    var shadow_dom_strategy_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/shadow_dom_strategy");
    var emulated_unscoped_shadow_dom_strategy_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/shadow_dom/emulated_unscoped_shadow_dom_strategy");
    var xhr_1 = require("npm:angular2@2.0.0-alpha.28/src/render/xhr");
    var xhr_impl_1 = require("npm:angular2@2.0.0-alpha.28/src/render/xhr_impl");
    var event_manager_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/events/event_manager");
    var key_events_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/events/key_events");
    var hammer_gestures_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/events/hammer_gestures");
    var component_url_mapper_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/component_url_mapper");
    var url_resolver_1 = require("npm:angular2@2.0.0-alpha.28/src/services/url_resolver");
    var app_root_url_1 = require("npm:angular2@2.0.0-alpha.28/src/services/app_root_url");
    var dynamic_component_loader_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/dynamic_component_loader");
    var testability_1 = require("npm:angular2@2.0.0-alpha.28/src/core/testability/testability");
    var view_pool_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_pool");
    var view_manager_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager");
    var view_manager_utils_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_manager_utils");
    var view_listener_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_listener");
    var proto_view_factory_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/proto_view_factory");
    var api_1 = require("npm:angular2@2.0.0-alpha.28/src/render/api");
    var dom_renderer_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/dom_renderer");
    var compiler_2 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/compiler/compiler");
    var view_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref");
    var application_tokens_1 = require("npm:angular2@2.0.0-alpha.28/src/core/application_tokens");
    var _rootInjector;
    var _rootBindings = [di_1.bind(reflection_1.Reflector).toValue(reflection_1.reflector), testability_1.TestabilityRegistry];
    function _injectorBindings(appComponentType) {
      var bestChangeDetection = change_detection_1.DynamicChangeDetection;
      if (change_detection_1.PreGeneratedChangeDetection.isSupported()) {
        bestChangeDetection = change_detection_1.PreGeneratedChangeDetection;
      } else if (change_detection_1.JitChangeDetection.isSupported()) {
        bestChangeDetection = change_detection_1.JitChangeDetection;
      }
      return [di_1.bind(dom_renderer_1.DOCUMENT_TOKEN).toValue(dom_adapter_1.DOM.defaultDoc()), di_1.bind(application_tokens_1.appComponentTypeToken).toValue(appComponentType), di_1.bind(application_tokens_1.appComponentRefToken).toAsyncFactory(function(dynamicComponentLoader, injector, testability, registry) {
        return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector).then(function(componentRef) {
          registry.registerApplication(componentRef.location.nativeElement, testability);
          return componentRef;
        });
      }, [dynamic_component_loader_1.DynamicComponentLoader, di_1.Injector, testability_1.Testability, testability_1.TestabilityRegistry]), di_1.bind(appComponentType).toFactory(function(ref) {
        return ref.instance;
      }, [application_tokens_1.appComponentRefToken]), di_1.bind(life_cycle_1.LifeCycle).toFactory(function(exceptionHandler) {
        return new life_cycle_1.LifeCycle(exceptionHandler, null, lang_1.assertionsEnabled());
      }, [exception_handler_1.ExceptionHandler]), di_1.bind(event_manager_1.EventManager).toFactory(function(ngZone) {
        var plugins = [new hammer_gestures_1.HammerGesturesPlugin(), new key_events_1.KeyEventsPlugin(), new event_manager_1.DomEventsPlugin()];
        return new event_manager_1.EventManager(plugins, ngZone);
      }, [ng_zone_1.NgZone]), di_1.bind(shadow_dom_strategy_1.ShadowDomStrategy).toFactory(function(doc) {
        return new emulated_unscoped_shadow_dom_strategy_1.EmulatedUnscopedShadowDomStrategy(doc.head);
      }, [dom_renderer_1.DOCUMENT_TOKEN]), dom_renderer_1.DomRenderer, compiler_2.DefaultDomCompiler, di_1.bind(api_1.Renderer).toAlias(dom_renderer_1.DomRenderer), di_1.bind(api_1.RenderCompiler).toAlias(compiler_2.DefaultDomCompiler), proto_view_factory_1.ProtoViewFactory, view_pool_1.AppViewPool, di_1.bind(view_pool_1.APP_VIEW_POOL_CAPACITY).toValue(10000), view_manager_1.AppViewManager, view_manager_utils_1.AppViewManagerUtils, view_listener_1.AppViewListener, compiler_1.Compiler, compiler_1.CompilerCache, view_resolver_1.ViewResolver, di_1.bind(change_detection_1.PipeRegistry).toValue(change_detection_1.defaultPipeRegistry), di_1.bind(change_detection_1.ChangeDetection).toClass(bestChangeDetection), view_loader_1.ViewLoader, directive_resolver_1.DirectiveResolver, change_detection_1.Parser, change_detection_1.Lexer, exception_handler_1.ExceptionHandler, di_1.bind(xhr_1.XHR).toValue(new xhr_impl_1.XHRImpl()), component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, style_url_resolver_1.StyleUrlResolver, style_inliner_1.StyleInliner, dynamic_component_loader_1.DynamicComponentLoader, testability_1.Testability, app_root_url_1.AppRootUrl];
    }
    function _createNgZone(givenReporter) {
      var defaultErrorReporter = function(exception, stackTrace) {
        var longStackTrace = collection_1.ListWrapper.join(stackTrace, "\n\n-----async gap-----\n");
        dom_adapter_1.DOM.logError(exception + "\n\n" + longStackTrace);
        throw exception;
      };
      var reporter = lang_1.isPresent(givenReporter) ? givenReporter : defaultErrorReporter;
      var zone = new ng_zone_1.NgZone({enableLongStackTrace: lang_1.assertionsEnabled()});
      zone.initCallbacks({onErrorHandler: reporter});
      return zone;
    }
    function bootstrap(appComponentType, componentInjectableBindings, errorReporter) {
      if (componentInjectableBindings === void 0) {
        componentInjectableBindings = null;
      }
      if (errorReporter === void 0) {
        errorReporter = null;
      }
      browser_adapter_1.BrowserDomAdapter.makeCurrent();
      var bootstrapProcess = async_1.PromiseWrapper.completer();
      var zone = _createNgZone(errorReporter);
      zone.run(function() {
        var appInjector = _createAppInjector(appComponentType, componentInjectableBindings, zone);
        async_1.PromiseWrapper.then(appInjector.asyncGet(application_tokens_1.appComponentRefToken), function(componentRef) {
          var appChangeDetector = view_ref_1.internalView(componentRef.hostView).changeDetector;
          var lc = appInjector.get(life_cycle_1.LifeCycle);
          lc.registerWith(zone, appChangeDetector);
          lc.tick();
          bootstrapProcess.resolve(new ApplicationRef(componentRef, appComponentType, appInjector));
        }, function(err, stackTrace) {
          bootstrapProcess.reject(err, stackTrace);
        });
      });
      return bootstrapProcess.promise;
    }
    exports.bootstrap = bootstrap;
    var ApplicationRef = (function() {
      function ApplicationRef(hostComponent, hostComponentType, injector) {
        this._hostComponent = hostComponent;
        this._injector = injector;
        this._hostComponentType = hostComponentType;
      }
      Object.defineProperty(ApplicationRef.prototype, "hostComponentType", {
        get: function() {
          return this._hostComponentType;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(ApplicationRef.prototype, "hostComponent", {
        get: function() {
          return this._hostComponent.instance;
        },
        enumerable: true,
        configurable: true
      });
      ApplicationRef.prototype.dispose = function() {
        return this._hostComponent.dispose();
      };
      Object.defineProperty(ApplicationRef.prototype, "injector", {
        get: function() {
          return this._injector;
        },
        enumerable: true,
        configurable: true
      });
      return ApplicationRef;
    })();
    exports.ApplicationRef = ApplicationRef;
    function _createAppInjector(appComponentType, bindings, zone) {
      if (lang_1.isBlank(_rootInjector))
        _rootInjector = di_1.Injector.resolveAndCreate(_rootBindings);
      var mergedBindings = lang_1.isPresent(bindings) ? collection_1.ListWrapper.concat(_injectorBindings(appComponentType), bindings) : _injectorBindings(appComponentType);
      mergedBindings.push(di_1.bind(ng_zone_1.NgZone).toValue(zone));
      return _rootInjector.resolveAndCreateChild(mergedBindings);
    }
    exports.__esModule = true;
  })(require("github:jspm/nodelibs-process@0.1.1"));
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/facade/async", ["npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:rx@2.5.1"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var Rx = require("npm:rx@2.5.1");
  exports.Promise = lang_1.global.Promise;
  var PromiseWrapper = (function() {
    function PromiseWrapper() {}
    PromiseWrapper.resolve = function(obj) {
      return exports.Promise.resolve(obj);
    };
    PromiseWrapper.reject = function(obj, _) {
      return exports.Promise.reject(obj);
    };
    PromiseWrapper.catchError = function(promise, onError) {
      return promise.catch(onError);
    };
    PromiseWrapper.all = function(promises) {
      if (promises.length == 0)
        return exports.Promise.resolve([]);
      return exports.Promise.all(promises);
    };
    PromiseWrapper.then = function(promise, success, rejection) {
      return promise.then(success, rejection);
    };
    PromiseWrapper.completer = function() {
      var resolve;
      var reject;
      var p = new exports.Promise(function(res, rej) {
        resolve = res;
        reject = rej;
      });
      return {
        promise: p,
        resolve: resolve,
        reject: reject
      };
    };
    return PromiseWrapper;
  })();
  exports.PromiseWrapper = PromiseWrapper;
  var TimerWrapper = (function() {
    function TimerWrapper() {}
    TimerWrapper.setTimeout = function(fn, millis) {
      return lang_1.global.setTimeout(fn, millis);
    };
    TimerWrapper.clearTimeout = function(id) {
      lang_1.global.clearTimeout(id);
    };
    TimerWrapper.setInterval = function(fn, millis) {
      return lang_1.global.setInterval(fn, millis);
    };
    TimerWrapper.clearInterval = function(id) {
      lang_1.global.clearInterval(id);
    };
    return TimerWrapper;
  })();
  exports.TimerWrapper = TimerWrapper;
  var ObservableWrapper = (function() {
    function ObservableWrapper() {}
    ObservableWrapper.subscribe = function(emitter, onNext, onThrow, onReturn) {
      if (onThrow === void 0) {
        onThrow = null;
      }
      if (onReturn === void 0) {
        onReturn = null;
      }
      return emitter.observer({
        next: onNext,
        throw: onThrow,
        return: onReturn
      });
    };
    ObservableWrapper.isObservable = function(obs) {
      return obs instanceof Observable;
    };
    ObservableWrapper.dispose = function(subscription) {
      subscription.dispose();
    };
    ObservableWrapper.callNext = function(emitter, value) {
      emitter.next(value);
    };
    ObservableWrapper.callThrow = function(emitter, error) {
      emitter.throw(error);
    };
    ObservableWrapper.callReturn = function(emitter) {
      emitter.return(null);
    };
    return ObservableWrapper;
  })();
  exports.ObservableWrapper = ObservableWrapper;
  var Observable = (function() {
    function Observable() {}
    Observable.prototype.observer = function(generator) {
      return null;
    };
    return Observable;
  })();
  exports.Observable = Observable;
  var EventEmitter = (function(_super) {
    __extends(EventEmitter, _super);
    function EventEmitter() {
      _super.call(this);
      if (Rx.hasOwnProperty('default')) {
        this._subject = new Rx.default.Rx.Subject();
        this._immediateScheduler = Rx.default.Rx.Scheduler.immediate;
      } else {
        this._subject = new Rx.Subject();
        this._immediateScheduler = Rx.Scheduler.immediate;
      }
    }
    EventEmitter.prototype.observer = function(generator) {
      return this._subject.observeOn(this._immediateScheduler).subscribe(function(value) {
        setTimeout(function() {
          return generator.next(value);
        });
      }, function(error) {
        return generator.throw ? generator.throw(error) : null;
      }, function() {
        return generator.return ? generator.return() : null;
      });
    };
    EventEmitter.prototype.toRx = function() {
      return this._subject;
    };
    EventEmitter.prototype.next = function(value) {
      this._subject.onNext(value);
    };
    EventEmitter.prototype.throw = function(error) {
      this._subject.onError(error);
    };
    EventEmitter.prototype.return = function(value) {
      this._subject.onCompleted();
    };
    return EventEmitter;
  })(Observable);
  exports.EventEmitter = EventEmitter;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/core", ["npm:angular2@2.0.0-alpha.28/src/core/annotations/visibility", "npm:angular2@2.0.0-alpha.28/src/core/annotations/view", "npm:angular2@2.0.0-alpha.28/src/core/application", "npm:angular2@2.0.0-alpha.28/src/core/application_tokens", "npm:angular2@2.0.0-alpha.28/src/core/annotations/di", "npm:angular2@2.0.0-alpha.28/src/core/compiler/compiler", "npm:angular2@2.0.0-alpha.28/src/core/compiler/interfaces", "npm:angular2@2.0.0-alpha.28/src/core/compiler/query_list", "npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_resolver", "npm:angular2@2.0.0-alpha.28/src/core/compiler/dynamic_component_loader", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref", "npm:angular2@2.0.0-alpha.28/src/core/compiler/view_container_ref", "npm:angular2@2.0.0-alpha.28/src/core/compiler/element_ref", "npm:angular2@2.0.0-alpha.28/src/core/zone/ng_zone"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/annotations/visibility"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/annotations/view"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/application"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/application_tokens"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/annotations/di"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/compiler/compiler"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/compiler/interfaces"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/compiler/query_list"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/compiler/directive_resolver"));
  __export(require("npm:angular2@2.0.0-alpha.28/src/core/compiler/dynamic_component_loader"));
  var view_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_ref");
  exports.ViewRef = view_ref_1.ViewRef;
  exports.ProtoViewRef = view_ref_1.ProtoViewRef;
  var view_container_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/view_container_ref");
  exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
  var element_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/core/compiler/element_ref");
  exports.ElementRef = element_ref_1.ElementRef;
  var ng_zone_1 = require("npm:angular2@2.0.0-alpha.28/src/core/zone/ng_zone");
  exports.NgZone = ng_zone_1.NgZone;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/observable_pipe", ["npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/facade/lang", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  var ObservablePipe = (function() {
    function ObservablePipe(_ref) {
      this._ref = _ref;
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._observable = null;
    }
    ObservablePipe.prototype.supports = function(obs) {
      return async_1.ObservableWrapper.isObservable(obs);
    };
    ObservablePipe.prototype.onDestroy = function() {
      if (lang_1.isPresent(this._subscription)) {
        this._dispose();
      }
    };
    ObservablePipe.prototype.transform = function(obs) {
      if (lang_1.isBlank(this._subscription)) {
        this._subscribe(obs);
        return null;
      }
      if (obs !== this._observable) {
        this._dispose();
        return this.transform(obs);
      }
      if (this._latestValue === this._latestReturnedValue) {
        return this._latestReturnedValue;
      } else {
        this._latestReturnedValue = this._latestValue;
        return pipe_1.WrappedValue.wrap(this._latestValue);
      }
    };
    ObservablePipe.prototype._subscribe = function(obs) {
      var _this = this;
      this._observable = obs;
      this._subscription = async_1.ObservableWrapper.subscribe(obs, function(value) {
        _this._updateLatestValue(value);
      }, function(e) {
        throw e;
      });
    };
    ObservablePipe.prototype._dispose = function() {
      async_1.ObservableWrapper.dispose(this._subscription);
      this._latestValue = null;
      this._latestReturnedValue = null;
      this._subscription = null;
      this._observable = null;
    };
    ObservablePipe.prototype._updateLatestValue = function(value) {
      this._latestValue = value;
      this._ref.requestCheck();
    };
    return ObservablePipe;
  })();
  exports.ObservablePipe = ObservablePipe;
  var ObservablePipeFactory = (function() {
    function ObservablePipeFactory() {}
    ObservablePipeFactory.prototype.supports = function(obs) {
      return async_1.ObservableWrapper.isObservable(obs);
    };
    ObservablePipeFactory.prototype.create = function(cdRef) {
      return new ObservablePipe(cdRef);
    };
    ObservablePipeFactory = __decorate([lang_1.CONST(), __metadata('design:paramtypes', [])], ObservablePipeFactory);
    return ObservablePipeFactory;
  })();
  exports.ObservablePipeFactory = ObservablePipeFactory;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection", ["npm:angular2@2.0.0-alpha.28/src/change_detection/jit_proto_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/pregen_proto_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/proto_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe_registry", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/iterable_changes", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/keyvalue_changes", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/observable_pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/promise_pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/uppercase_pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/lowercase_pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/json_pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/null_pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/interfaces", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/src/facade/collection", "npm:angular2@2.0.0-alpha.28/src/facade/lang"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var __extends = (this && this.__extends) || function(d, b) {
    for (var p in b)
      if (b.hasOwnProperty(p))
        d[p] = b[p];
    function __() {
      this.constructor = d;
    }
    __.prototype = b.prototype;
    d.prototype = new __();
  };
  var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
      case 2:
        return decorators.reduceRight(function(o, d) {
          return (d && d(o)) || o;
        }, target);
      case 3:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key)), void 0;
        }, void 0);
      case 4:
        return decorators.reduceRight(function(o, d) {
          return (d && d(target, key, o)) || o;
        }, desc);
    }
  };
  var __metadata = (this && this.__metadata) || function(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(k, v);
  };
  var __param = (this && this.__param) || function(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  };
  var jit_proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/jit_proto_change_detector");
  var pregen_proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pregen_proto_change_detector");
  var proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_change_detector");
  var pipe_registry_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe_registry");
  var iterable_changes_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/iterable_changes");
  var keyvalue_changes_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/keyvalue_changes");
  var observable_pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/observable_pipe");
  var promise_pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/promise_pipe");
  var uppercase_pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/uppercase_pipe");
  var lowercase_pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/lowercase_pipe");
  var json_pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/json_pipe");
  var null_pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/null_pipe");
  var interfaces_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/interfaces");
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  var collection_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/collection");
  var lang_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/lang");
  exports.keyValDiff = [new keyvalue_changes_1.KeyValueChangesFactory(), new null_pipe_1.NullPipeFactory()];
  exports.iterableDiff = [new iterable_changes_1.IterableChangesFactory(), new null_pipe_1.NullPipeFactory()];
  exports.async = [new observable_pipe_1.ObservablePipeFactory(), new promise_pipe_1.PromisePipeFactory(), new null_pipe_1.NullPipeFactory()];
  exports.uppercase = [new uppercase_pipe_1.UpperCaseFactory(), new null_pipe_1.NullPipeFactory()];
  exports.lowercase = [new lowercase_pipe_1.LowerCaseFactory(), new null_pipe_1.NullPipeFactory()];
  exports.json = [new json_pipe_1.JsonPipe(), new null_pipe_1.NullPipeFactory()];
  exports.defaultPipes = {
    "iterableDiff": exports.iterableDiff,
    "keyValDiff": exports.keyValDiff,
    "async": exports.async,
    "uppercase": exports.uppercase,
    "lowercase": exports.lowercase,
    "json": exports.json
  };
  exports.preGeneratedProtoDetectors = {};
  exports.PROTO_CHANGE_DETECTOR_KEY = lang_1.CONST_EXPR(new di_1.OpaqueToken('ProtoChangeDetectors'));
  var PreGeneratedChangeDetection = (function(_super) {
    __extends(PreGeneratedChangeDetection, _super);
    function PreGeneratedChangeDetection(registry, protoChangeDetectorsForTest) {
      _super.call(this);
      this.registry = registry;
      this._dynamicChangeDetection = new DynamicChangeDetection(registry);
      this._protoChangeDetectorFactories = lang_1.isPresent(protoChangeDetectorsForTest) ? protoChangeDetectorsForTest : exports.preGeneratedProtoDetectors;
    }
    PreGeneratedChangeDetection.isSupported = function() {
      return pregen_proto_change_detector_1.PregenProtoChangeDetector.isSupported();
    };
    PreGeneratedChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      var id = definition.id;
      if (collection_1.StringMapWrapper.contains(this._protoChangeDetectorFactories, id)) {
        return collection_1.StringMapWrapper.get(this._protoChangeDetectorFactories, id)(this.registry, definition);
      }
      return this._dynamicChangeDetection.createProtoChangeDetector(definition);
    };
    PreGeneratedChangeDetection = __decorate([di_1.Injectable(), __param(1, di_1.Inject(exports.PROTO_CHANGE_DETECTOR_KEY)), __param(1, di_1.Optional()), __metadata('design:paramtypes', [pipe_registry_1.PipeRegistry, Object])], PreGeneratedChangeDetection);
    return PreGeneratedChangeDetection;
  })(interfaces_1.ChangeDetection);
  exports.PreGeneratedChangeDetection = PreGeneratedChangeDetection;
  var DynamicChangeDetection = (function(_super) {
    __extends(DynamicChangeDetection, _super);
    function DynamicChangeDetection(registry) {
      _super.call(this);
      this.registry = registry;
    }
    DynamicChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      return new proto_change_detector_1.DynamicProtoChangeDetector(this.registry, definition);
    };
    DynamicChangeDetection = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [pipe_registry_1.PipeRegistry])], DynamicChangeDetection);
    return DynamicChangeDetection;
  })(interfaces_1.ChangeDetection);
  exports.DynamicChangeDetection = DynamicChangeDetection;
  var JitChangeDetection = (function(_super) {
    __extends(JitChangeDetection, _super);
    function JitChangeDetection(registry) {
      _super.call(this);
      this.registry = registry;
    }
    JitChangeDetection.isSupported = function() {
      return jit_proto_change_detector_1.JitProtoChangeDetector.isSupported();
    };
    JitChangeDetection.prototype.createProtoChangeDetector = function(definition) {
      return new jit_proto_change_detector_1.JitProtoChangeDetector(this.registry, definition);
    };
    JitChangeDetection = __decorate([di_1.Injectable(), __metadata('design:paramtypes', [pipe_registry_1.PipeRegistry])], JitChangeDetection);
    return JitChangeDetection;
  })(interfaces_1.ChangeDetection);
  exports.JitChangeDetection = JitChangeDetection;
  exports.defaultPipeRegistry = new pipe_registry_1.PipeRegistry(exports.defaultPipes);
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/change_detection", ["npm:angular2@2.0.0-alpha.28/src/change_detection/parser/ast", "npm:angular2@2.0.0-alpha.28/src/change_detection/parser/lexer", "npm:angular2@2.0.0-alpha.28/src/change_detection/parser/parser", "npm:angular2@2.0.0-alpha.28/src/change_detection/parser/locals", "npm:angular2@2.0.0-alpha.28/src/change_detection/exceptions", "npm:angular2@2.0.0-alpha.28/src/change_detection/interfaces", "npm:angular2@2.0.0-alpha.28/src/change_detection/constants", "npm:angular2@2.0.0-alpha.28/src/change_detection/proto_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/binding_record", "npm:angular2@2.0.0-alpha.28/src/change_detection/directive_record", "npm:angular2@2.0.0-alpha.28/src/change_detection/dynamic_change_detector", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detector_ref", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe_registry", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/null_pipe", "npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  var ast_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/ast");
  exports.ASTWithSource = ast_1.ASTWithSource;
  exports.AST = ast_1.AST;
  exports.AstTransformer = ast_1.AstTransformer;
  exports.AccessMember = ast_1.AccessMember;
  exports.LiteralArray = ast_1.LiteralArray;
  exports.ImplicitReceiver = ast_1.ImplicitReceiver;
  var lexer_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/lexer");
  exports.Lexer = lexer_1.Lexer;
  var parser_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/parser");
  exports.Parser = parser_1.Parser;
  var locals_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/parser/locals");
  exports.Locals = locals_1.Locals;
  var exceptions_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/exceptions");
  exports.DehydratedException = exceptions_1.DehydratedException;
  exports.ExpressionChangedAfterItHasBeenChecked = exceptions_1.ExpressionChangedAfterItHasBeenChecked;
  exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
  var interfaces_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/interfaces");
  exports.ChangeDetection = interfaces_1.ChangeDetection;
  exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
  var constants_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/constants");
  exports.CHECK_ONCE = constants_1.CHECK_ONCE;
  exports.CHECK_ALWAYS = constants_1.CHECK_ALWAYS;
  exports.DETACHED = constants_1.DETACHED;
  exports.CHECKED = constants_1.CHECKED;
  exports.ON_PUSH = constants_1.ON_PUSH;
  exports.DEFAULT = constants_1.DEFAULT;
  var proto_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/proto_change_detector");
  exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
  var binding_record_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/binding_record");
  exports.BindingRecord = binding_record_1.BindingRecord;
  var directive_record_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/directive_record");
  exports.DirectiveIndex = directive_record_1.DirectiveIndex;
  exports.DirectiveRecord = directive_record_1.DirectiveRecord;
  var dynamic_change_detector_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/dynamic_change_detector");
  exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
  var change_detector_ref_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detector_ref");
  exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
  var pipe_registry_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe_registry");
  exports.PipeRegistry = pipe_registry_1.PipeRegistry;
  var change_detection_util_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection_util");
  exports.uninitialized = change_detection_util_1.uninitialized;
  var pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/pipe");
  exports.WrappedValue = pipe_1.WrappedValue;
  exports.BasePipe = pipe_1.BasePipe;
  var null_pipe_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/pipes/null_pipe");
  exports.NullPipe = null_pipe_1.NullPipe;
  exports.NullPipeFactory = null_pipe_1.NullPipeFactory;
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/src/change_detection/change_detection");
  exports.defaultPipes = change_detection_1.defaultPipes;
  exports.DynamicChangeDetection = change_detection_1.DynamicChangeDetection;
  exports.JitChangeDetection = change_detection_1.JitChangeDetection;
  exports.PreGeneratedChangeDetection = change_detection_1.PreGeneratedChangeDetection;
  exports.preGeneratedProtoDetectors = change_detection_1.preGeneratedProtoDetectors;
  exports.defaultPipeRegistry = change_detection_1.defaultPipeRegistry;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

System.register("npm:angular2@2.0.0-alpha.28/angular2", ["npm:angular2@2.0.0-alpha.28/change_detection", "npm:angular2@2.0.0-alpha.28/di", "npm:angular2@2.0.0-alpha.28/core", "npm:angular2@2.0.0-alpha.28/annotations", "npm:angular2@2.0.0-alpha.28/directives", "npm:angular2@2.0.0-alpha.28/forms", "npm:angular2@2.0.0-alpha.28/http", "npm:angular2@2.0.0-alpha.28/src/facade/async", "npm:angular2@2.0.0-alpha.28/src/render/api", "npm:angular2@2.0.0-alpha.28/src/render/dom/dom_renderer"], true, function(require, exports, module) {
  var global = System.global,
      __define = global.define;
  global.define = undefined;
  'use strict';
  function __export(m) {
    for (var p in m)
      if (!exports.hasOwnProperty(p))
        exports[p] = m[p];
  }
  var change_detection_1 = require("npm:angular2@2.0.0-alpha.28/change_detection");
  exports.DehydratedException = change_detection_1.DehydratedException;
  exports.ExpressionChangedAfterItHasBeenChecked = change_detection_1.ExpressionChangedAfterItHasBeenChecked;
  exports.ChangeDetectionError = change_detection_1.ChangeDetectionError;
  exports.ChangeDetection = change_detection_1.ChangeDetection;
  exports.ON_PUSH = change_detection_1.ON_PUSH;
  exports.DEFAULT = change_detection_1.DEFAULT;
  exports.ChangeDetectorRef = change_detection_1.ChangeDetectorRef;
  exports.PipeRegistry = change_detection_1.PipeRegistry;
  exports.WrappedValue = change_detection_1.WrappedValue;
  exports.NullPipe = change_detection_1.NullPipe;
  exports.NullPipeFactory = change_detection_1.NullPipeFactory;
  exports.defaultPipes = change_detection_1.defaultPipes;
  exports.DynamicChangeDetection = change_detection_1.DynamicChangeDetection;
  exports.JitChangeDetection = change_detection_1.JitChangeDetection;
  exports.PreGeneratedChangeDetection = change_detection_1.PreGeneratedChangeDetection;
  exports.preGeneratedProtoDetectors = change_detection_1.preGeneratedProtoDetectors;
  exports.defaultPipeRegistry = change_detection_1.defaultPipeRegistry;
  exports.DirectiveIndex = change_detection_1.DirectiveIndex;
  exports.BindingRecord = change_detection_1.BindingRecord;
  exports.Locals = change_detection_1.Locals;
  exports.ChangeDetectorDefinition = change_detection_1.ChangeDetectorDefinition;
  exports.BasePipe = change_detection_1.BasePipe;
  exports.DirectiveRecord = change_detection_1.DirectiveRecord;
  var di_1 = require("npm:angular2@2.0.0-alpha.28/di");
  exports.Inject = di_1.Inject;
  exports.InjectPromise = di_1.InjectPromise;
  exports.InjectLazy = di_1.InjectLazy;
  exports.Optional = di_1.Optional;
  exports.Injectable = di_1.Injectable;
  exports.forwardRef = di_1.forwardRef;
  exports.resolveForwardRef = di_1.resolveForwardRef;
  exports.Injector = di_1.Injector;
  exports.Binding = di_1.Binding;
  exports.bind = di_1.bind;
  exports.Key = di_1.Key;
  exports.NoBindingError = di_1.NoBindingError;
  exports.AbstractBindingError = di_1.AbstractBindingError;
  exports.AsyncBindingError = di_1.AsyncBindingError;
  exports.CyclicDependencyError = di_1.CyclicDependencyError;
  exports.InstantiationError = di_1.InstantiationError;
  exports.InvalidBindingError = di_1.InvalidBindingError;
  exports.NoAnnotationError = di_1.NoAnnotationError;
  exports.OpaqueToken = di_1.OpaqueToken;
  exports.ResolvedBinding = di_1.ResolvedBinding;
  exports.BindingBuilder = di_1.BindingBuilder;
  exports.Dependency = di_1.Dependency;
  __export(require("npm:angular2@2.0.0-alpha.28/core"));
  __export(require("npm:angular2@2.0.0-alpha.28/annotations"));
  __export(require("npm:angular2@2.0.0-alpha.28/directives"));
  var forms_1 = require("npm:angular2@2.0.0-alpha.28/forms");
  exports.AbstractControl = forms_1.AbstractControl;
  exports.Control = forms_1.Control;
  exports.ControlGroup = forms_1.ControlGroup;
  exports.ControlArray = forms_1.ControlArray;
  exports.NgControlName = forms_1.NgControlName;
  exports.NgFormControl = forms_1.NgFormControl;
  exports.NgModel = forms_1.NgModel;
  exports.NgControl = forms_1.NgControl;
  exports.NgControlGroup = forms_1.NgControlGroup;
  exports.NgFormModel = forms_1.NgFormModel;
  exports.NgForm = forms_1.NgForm;
  exports.DefaultValueAccessor = forms_1.DefaultValueAccessor;
  exports.CheckboxControlValueAccessor = forms_1.CheckboxControlValueAccessor;
  exports.SelectControlValueAccessor = forms_1.SelectControlValueAccessor;
  exports.formDirectives = forms_1.formDirectives;
  exports.Validators = forms_1.Validators;
  exports.NgValidator = forms_1.NgValidator;
  exports.NgRequiredValidator = forms_1.NgRequiredValidator;
  exports.FormBuilder = forms_1.FormBuilder;
  exports.formInjectables = forms_1.formInjectables;
  __export(require("npm:angular2@2.0.0-alpha.28/http"));
  var async_1 = require("npm:angular2@2.0.0-alpha.28/src/facade/async");
  exports.Observable = async_1.Observable;
  exports.EventEmitter = async_1.EventEmitter;
  __export(require("npm:angular2@2.0.0-alpha.28/src/render/api"));
  var dom_renderer_1 = require("npm:angular2@2.0.0-alpha.28/src/render/dom/dom_renderer");
  exports.DomRenderer = dom_renderer_1.DomRenderer;
  exports.DOCUMENT_TOKEN = dom_renderer_1.DOCUMENT_TOKEN;
  exports.__esModule = true;
  global.define = __define;
  return module.exports;
});

//# sourceMappingURL=angular2.js.map